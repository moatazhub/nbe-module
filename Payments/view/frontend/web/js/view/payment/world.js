/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 303:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

  module.exports = __webpack_require__(457)


  /***/ }),
  
  /***/ 402:
  /***/ ((module) => {
  
  /*
   * File: iframeResizer.contentWindow.js
   * Desc: Include this file in any page being loaded into an iframe
   *       to force the iframe to resize to the content size.
   * Requires: iframeResizer.js on host page.
   * Doc: https://github.com/davidjbradshaw/iframe-resizer
   * Author: David J. Bradshaw - dave@bradshaw.net
   *
   */
  
  // eslint-disable-next-line sonarjs/cognitive-complexity, no-shadow-restricted-names
  ;(function (undefined) {
    if (typeof window === 'undefined') return // don't run for server side render
  
    var autoResize = true,
      base = 10,
      bodyBackground = '',
      bodyMargin = 0,
      bodyMarginStr = '',
      bodyObserver = null,
      bodyPadding = '',
      calculateWidth = false,
      doubleEventList = { resize: 1, click: 1 },
      eventCancelTimer = 128,
      firstRun = true,
      height = 1,
      heightCalcModeDefault = 'bodyOffset',
      heightCalcMode = heightCalcModeDefault,
      initLock = true,
      initMsg = '',
      inPageLinks = {},
      interval = 32,
      intervalTimer = null,
      logging = false,
      mouseEvents = false,
      msgID = '[iFrameSizer]', // Must match host page msg ID
      msgIdLen = msgID.length,
      myID = '',
      resetRequiredMethods = {
        max: 1,
        min: 1,
        bodyScroll: 1,
        documentElementScroll: 1
      },
      resizeFrom = 'child',
      sendPermit = true,
      target = window.parent,
      targetOriginDefault = '*',
      tolerance = 0,
      triggerLocked = false,
      triggerLockedTimer = null,
      throttledTimer = 16,
      width = 1,
      widthCalcModeDefault = 'scroll',
      widthCalcMode = widthCalcModeDefault,
      win = window,
      onMessage = function () {
        warn('onMessage function not defined')
      },
      onReady = function () {},
      onPageInfo = function () {},
      customCalcMethods = {
        height: function () {
          warn('Custom height calculation function not defined')
          return document.documentElement.offsetHeight
        },
        width: function () {
          warn('Custom width calculation function not defined')
          return document.body.scrollWidth
        }
      },
      eventHandlersByName = {},
      passiveSupported = false
  
    function noop() {}
  
    try {
      var options = Object.create(
        {},
        {
          passive: {
            get: function () {
              passiveSupported = true
            }
          }
        }
      )
      window.addEventListener('test', noop, options)
      window.removeEventListener('test', noop, options)
    } catch (error) {
      /* */
    }
  
    function addEventListener(el, evt, func, options) {
      el.addEventListener(evt, func, passiveSupported ? options || {} : false)
    }
  
    function removeEventListener(el, evt, func) {
      el.removeEventListener(evt, func, false)
    }
  
    function capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1)
    }
  
    // Based on underscore.js
    function throttle(func) {
      var context,
        args,
        result,
        timeout = null,
        previous = 0,
        later = function () {
          previous = Date.now()
          timeout = null
          result = func.apply(context, args)
          if (!timeout) {
            // eslint-disable-next-line no-multi-assign
            context = args = null
          }
        }
  
      return function () {
        var now = Date.now()
  
        if (!previous) {
          previous = now
        }
  
        var remaining = throttledTimer - (now - previous)
  
        context = this
        args = arguments
  
        if (remaining <= 0 || remaining > throttledTimer) {
          if (timeout) {
            clearTimeout(timeout)
            timeout = null
          }
  
          previous = now
          result = func.apply(context, args)
  
          if (!timeout) {
            // eslint-disable-next-line no-multi-assign
            context = args = null
          }
        } else if (!timeout) {
          timeout = setTimeout(later, remaining)
        }
  
        return result
      }
    }
  
    function formatLogMsg(msg) {
      return msgID + '[' + myID + '] ' + msg
    }
  
    function log(msg) {
      if (logging && 'object' === typeof window.console) {
        // eslint-disable-next-line no-console
        console.log(formatLogMsg(msg))
      }
    }
  
    function warn(msg) {
      if ('object' === typeof window.console) {
        // eslint-disable-next-line no-console
        console.warn(formatLogMsg(msg))
      }
    }
  
    function init() {
      readDataFromParent()
      log('Initialising iFrame (' + window.location.href + ')')
      readDataFromPage()
      setMargin()
      setBodyStyle('background', bodyBackground)
      setBodyStyle('padding', bodyPadding)
      injectClearFixIntoBodyElement()
      checkHeightMode()
      checkWidthMode()
      stopInfiniteResizingOfIFrame()
      setupPublicMethods()
      setupMouseEvents()
      startEventListeners()
      inPageLinks = setupInPageLinks()
      sendSize('init', 'Init message from host page')
      onReady()
    }
  
    function readDataFromParent() {
      function strBool(str) {
        return 'true' === str
      }
  
      var data = initMsg.substr(msgIdLen).split(':')
  
      myID = data[0]
      bodyMargin = undefined !== data[1] ? Number(data[1]) : bodyMargin // For V1 compatibility
      calculateWidth = undefined !== data[2] ? strBool(data[2]) : calculateWidth
      logging = undefined !== data[3] ? strBool(data[3]) : logging
      interval = undefined !== data[4] ? Number(data[4]) : interval
      autoResize = undefined !== data[6] ? strBool(data[6]) : autoResize
      bodyMarginStr = data[7]
      heightCalcMode = undefined !== data[8] ? data[8] : heightCalcMode
      bodyBackground = data[9]
      bodyPadding = data[10]
      tolerance = undefined !== data[11] ? Number(data[11]) : tolerance
      inPageLinks.enable = undefined !== data[12] ? strBool(data[12]) : false
      resizeFrom = undefined !== data[13] ? data[13] : resizeFrom
      widthCalcMode = undefined !== data[14] ? data[14] : widthCalcMode
      mouseEvents = undefined !== data[15] ? Boolean(data[15]) : mouseEvents
    }
  
    function depricate(key) {
      var splitName = key.split('Callback')
  
      if (splitName.length === 2) {
        var name =
          'on' + splitName[0].charAt(0).toUpperCase() + splitName[0].slice(1)
        this[name] = this[key]
        delete this[key]
        warn(
          "Deprecated: '" +
            key +
            "' has been renamed '" +
            name +
            "'. The old method will be removed in the next major version."
        )
      }
    }
  
    function readDataFromPage() {
      function readData() {
        var data = window.iFrameResizer
  
        log('Reading data from page: ' + JSON.stringify(data))
        Object.keys(data).forEach(depricate, data)
  
        onMessage = 'onMessage' in data ? data.onMessage : onMessage
        onReady = 'onReady' in data ? data.onReady : onReady
        targetOriginDefault =
          'targetOrigin' in data ? data.targetOrigin : targetOriginDefault
        heightCalcMode =
          'heightCalculationMethod' in data
            ? data.heightCalculationMethod
            : heightCalcMode
        widthCalcMode =
          'widthCalculationMethod' in data
            ? data.widthCalculationMethod
            : widthCalcMode
      }
  
      function setupCustomCalcMethods(calcMode, calcFunc) {
        if ('function' === typeof calcMode) {
          log('Setup custom ' + calcFunc + 'CalcMethod')
          customCalcMethods[calcFunc] = calcMode
          calcMode = 'custom'
        }
  
        return calcMode
      }
  
      if (
        'iFrameResizer' in window &&
        Object === window.iFrameResizer.constructor
      ) {
        readData()
        heightCalcMode = setupCustomCalcMethods(heightCalcMode, 'height')
        widthCalcMode = setupCustomCalcMethods(widthCalcMode, 'width')
      }
  
      log('TargetOrigin for parent set to: ' + targetOriginDefault)
    }
  
    function chkCSS(attr, value) {
      if (-1 !== value.indexOf('-')) {
        warn('Negative CSS value ignored for ' + attr)
        value = ''
      }
      return value
    }
  
    function setBodyStyle(attr, value) {
      if (undefined !== value && '' !== value && 'null' !== value) {
        document.body.style[attr] = value
        log('Body ' + attr + ' set to "' + value + '"')
      }
    }
  
    function setMargin() {
      // If called via V1 script, convert bodyMargin from int to str
      if (undefined === bodyMarginStr) {
        bodyMarginStr = bodyMargin + 'px'
      }
  
      setBodyStyle('margin', chkCSS('margin', bodyMarginStr))
    }
  
    function stopInfiniteResizingOfIFrame() {
      document.documentElement.style.height = ''
      document.body.style.height = ''
      log('HTML & body height set to "auto"')
    }
  
    function manageTriggerEvent(options) {
      var listener = {
        add: function (eventName) {
          function handleEvent() {
            sendSize(options.eventName, options.eventType)
          }
  
          eventHandlersByName[eventName] = handleEvent
  
          addEventListener(window, eventName, handleEvent, { passive: true })
        },
        remove: function (eventName) {
          var handleEvent = eventHandlersByName[eventName]
          delete eventHandlersByName[eventName]
  
          removeEventListener(window, eventName, handleEvent)
        }
      }
  
      if (options.eventNames && Array.prototype.map) {
        options.eventName = options.eventNames[0]
        options.eventNames.map(listener[options.method])
      } else {
        listener[options.method](options.eventName)
      }
  
      log(
        capitalizeFirstLetter(options.method) +
          ' event listener: ' +
          options.eventType
      )
    }
  
    function manageEventListeners(method) {
      manageTriggerEvent({
        method: method,
        eventType: 'Animation Start',
        eventNames: ['animationstart', 'webkitAnimationStart']
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Animation Iteration',
        eventNames: ['animationiteration', 'webkitAnimationIteration']
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Animation End',
        eventNames: ['animationend', 'webkitAnimationEnd']
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Input',
        eventName: 'input'
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Mouse Up',
        eventName: 'mouseup'
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Mouse Down',
        eventName: 'mousedown'
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Orientation Change',
        eventName: 'orientationchange'
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Print',
        eventName: ['afterprint', 'beforeprint']
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Ready State Change',
        eventName: 'readystatechange'
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Touch Start',
        eventName: 'touchstart'
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Touch End',
        eventName: 'touchend'
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Touch Cancel',
        eventName: 'touchcancel'
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Transition Start',
        eventNames: [
          'transitionstart',
          'webkitTransitionStart',
          'MSTransitionStart',
          'oTransitionStart',
          'otransitionstart'
        ]
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Transition Iteration',
        eventNames: [
          'transitioniteration',
          'webkitTransitionIteration',
          'MSTransitionIteration',
          'oTransitionIteration',
          'otransitioniteration'
        ]
      })
      manageTriggerEvent({
        method: method,
        eventType: 'Transition End',
        eventNames: [
          'transitionend',
          'webkitTransitionEnd',
          'MSTransitionEnd',
          'oTransitionEnd',
          'otransitionend'
        ]
      })
      if ('child' === resizeFrom) {
        manageTriggerEvent({
          method: method,
          eventType: 'IFrame Resized',
          eventName: 'resize'
        })
      }
    }
  
    function checkCalcMode(calcMode, calcModeDefault, modes, type) {
      if (calcModeDefault !== calcMode) {
        if (!(calcMode in modes)) {
          warn(
            calcMode + ' is not a valid option for ' + type + 'CalculationMethod.'
          )
          calcMode = calcModeDefault
        }
        log(type + ' calculation method set to "' + calcMode + '"')
      }
  
      return calcMode
    }
  
    function checkHeightMode() {
      heightCalcMode = checkCalcMode(
        heightCalcMode,
        heightCalcModeDefault,
        getHeight,
        'height'
      )
    }
  
    function checkWidthMode() {
      widthCalcMode = checkCalcMode(
        widthCalcMode,
        widthCalcModeDefault,
        getWidth,
        'width'
      )
    }
  
    function startEventListeners() {
      if (true === autoResize) {
        manageEventListeners('add')
        setupMutationObserver()
      } else {
        log('Auto Resize disabled')
      }
    }
  
    //   function stopMsgsToParent() {
    //     log('Disable outgoing messages')
    //     sendPermit = false
    //   }
  
    //   function removeMsgListener() {
    //     log('Remove event listener: Message')
    //     removeEventListener(window, 'message', receiver)
    //   }
  
    function disconnectMutationObserver() {
      if (null !== bodyObserver) {
        /* istanbul ignore next */ // Not testable in PhantonJS
        bodyObserver.disconnect()
      }
    }
  
    function stopEventListeners() {
      manageEventListeners('remove')
      disconnectMutationObserver()
      clearInterval(intervalTimer)
    }
  
    //   function teardown() {
    //     stopMsgsToParent()
    //     removeMsgListener()
    //     if (true === autoResize) stopEventListeners()
    //   }
  
    function injectClearFixIntoBodyElement() {
      var clearFix = document.createElement('div')
      clearFix.style.clear = 'both'
      // Guard against the following having been globally redefined in CSS.
      clearFix.style.display = 'block'
      clearFix.style.height = '0'
      document.body.appendChild(clearFix)
    }
  
    function setupInPageLinks() {
      function getPagePosition() {
        return {
          x:
            window.pageXOffset !== undefined
              ? window.pageXOffset
              : document.documentElement.scrollLeft,
          y:
            window.pageYOffset !== undefined
              ? window.pageYOffset
              : document.documentElement.scrollTop
        }
      }
  
      function getElementPosition(el) {
        var elPosition = el.getBoundingClientRect(),
          pagePosition = getPagePosition()
  
        return {
          x: parseInt(elPosition.left, 10) + parseInt(pagePosition.x, 10),
          y: parseInt(elPosition.top, 10) + parseInt(pagePosition.y, 10)
        }
      }
  
      function findTarget(location) {
        function jumpToTarget(target) {
          var jumpPosition = getElementPosition(target)
  
          log(
            'Moving to in page link (#' +
              hash +
              ') at x: ' +
              jumpPosition.x +
              ' y: ' +
              jumpPosition.y
          )
          sendMsg(jumpPosition.y, jumpPosition.x, 'scrollToOffset') // X&Y reversed at sendMsg uses height/width
        }
  
        var hash = location.split('#')[1] || location, // Remove # if present
          hashData = decodeURIComponent(hash),
          target =
            document.getElementById(hashData) ||
            document.getElementsByName(hashData)[0]
  
        if (undefined !== target) {
          jumpToTarget(target)
        } else {
          log(
            'In page link (#' +
              hash +
              ') not found in iFrame, so sending to parent'
          )
          sendMsg(0, 0, 'inPageLink', '#' + hash)
        }
      }
  
      function checkLocationHash() {
        var hash = window.location.hash
        var href = window.location.href
  
        if ('' !== hash && '#' !== hash) {
          findTarget(href)
        }
      }
  
      function bindAnchors() {
        function setupLink(el) {
          function linkClicked(e) {
            e.preventDefault()
  
            /* jshint validthis:true */
            findTarget(this.getAttribute('href'))
          }
  
          if ('#' !== el.getAttribute('href')) {
            addEventListener(el, 'click', linkClicked)
          }
        }
  
        Array.prototype.forEach.call(
          document.querySelectorAll('a[href^="#"]'),
          setupLink
        )
      }
  
      function bindLocationHash() {
        addEventListener(window, 'hashchange', checkLocationHash)
      }
  
      function initCheck() {
        // Check if page loaded with location hash after init resize
        setTimeout(checkLocationHash, eventCancelTimer)
      }
  
      function enableInPageLinks() {
        /* istanbul ignore else */ // Not testable in phantonJS
        if (Array.prototype.forEach && document.querySelectorAll) {
          log('Setting up location.hash handlers')
          bindAnchors()
          bindLocationHash()
          initCheck()
        } else {
          warn(
            'In page linking not fully supported in this browser! (See README.md for IE8 workaround)'
          )
        }
      }
  
      if (inPageLinks.enable) {
        enableInPageLinks()
      } else {
        log('In page linking not enabled')
      }
  
      return {
        findTarget: findTarget
      }
    }
  
    function setupMouseEvents() {
      if (mouseEvents !== true) return
  
      function sendMouse(e) {
        sendMsg(0, 0, e.type, e.screenY + ':' + e.screenX)
      }
  
      function addMouseListener(evt, name) {
        log('Add event listener: ' + name)
        addEventListener(window.document, evt, sendMouse)
      }
  
      addMouseListener('mouseenter', 'Mouse Enter')
      addMouseListener('mouseleave', 'Mouse Leave')
    }
  
    function setupPublicMethods() {
      log('Enable public methods')
  
      win.parentIFrame = {
        autoResize: function autoResizeF(resize) {
          if (true === resize && false === autoResize) {
            autoResize = true
            startEventListeners()
          } else if (false === resize && true === autoResize) {
            autoResize = false
            stopEventListeners()
          }
          sendMsg(0, 0, 'autoResize', JSON.stringify(autoResize))
          return autoResize
        },
  
        close: function closeF() {
          sendMsg(0, 0, 'close')
          // teardown()
        },
  
        getId: function getIdF() {
          return myID
        },
  
        getPageInfo: function getPageInfoF(callback) {
          if ('function' === typeof callback) {
            onPageInfo = callback
            sendMsg(0, 0, 'pageInfo')
          } else {
            onPageInfo = function () {}
            sendMsg(0, 0, 'pageInfoStop')
          }
        },
  
        moveToAnchor: function moveToAnchorF(hash) {
          inPageLinks.findTarget(hash)
        },
  
        reset: function resetF() {
          resetIFrame('parentIFrame.reset')
        },
  
        scrollTo: function scrollToF(x, y) {
          sendMsg(y, x, 'scrollTo') // X&Y reversed at sendMsg uses height/width
        },
  
        scrollToOffset: function scrollToF(x, y) {
          sendMsg(y, x, 'scrollToOffset') // X&Y reversed at sendMsg uses height/width
        },
  
        sendMessage: function sendMessageF(msg, targetOrigin) {
          sendMsg(0, 0, 'message', JSON.stringify(msg), targetOrigin)
        },
  
        setHeightCalculationMethod: function setHeightCalculationMethodF(
          heightCalculationMethod
        ) {
          heightCalcMode = heightCalculationMethod
          checkHeightMode()
        },
  
        setWidthCalculationMethod: function setWidthCalculationMethodF(
          widthCalculationMethod
        ) {
          widthCalcMode = widthCalculationMethod
          checkWidthMode()
        },
  
        setTargetOrigin: function setTargetOriginF(targetOrigin) {
          log('Set targetOrigin: ' + targetOrigin)
          targetOriginDefault = targetOrigin
        },
  
        size: function sizeF(customHeight, customWidth) {
          var valString =
            '' + (customHeight || '') + (customWidth ? ',' + customWidth : '')
          sendSize(
            'size',
            'parentIFrame.size(' + valString + ')',
            customHeight,
            customWidth
          )
        }
      }
    }
  
    function initInterval() {
      if (0 !== interval) {
        log('setInterval: ' + interval + 'ms')
        intervalTimer = setInterval(function () {
          sendSize('interval', 'setInterval: ' + interval)
        }, Math.abs(interval))
      }
    }
  
    // Not testable in PhantomJS
    /* istanbul ignore next */
    function setupBodyMutationObserver() {
      function addImageLoadListners(mutation) {
        function addImageLoadListener(element) {
          if (false === element.complete) {
            log('Attach listeners to ' + element.src)
            element.addEventListener('load', imageLoaded, false)
            element.addEventListener('error', imageError, false)
            elements.push(element)
          }
        }
  
        if (mutation.type === 'attributes' && mutation.attributeName === 'src') {
          addImageLoadListener(mutation.target)
        } else if (mutation.type === 'childList') {
          Array.prototype.forEach.call(
            mutation.target.querySelectorAll('img'),
            addImageLoadListener
          )
        }
      }
  
      function removeFromArray(element) {
        elements.splice(elements.indexOf(element), 1)
      }
  
      function removeImageLoadListener(element) {
        log('Remove listeners from ' + element.src)
        element.removeEventListener('load', imageLoaded, false)
        element.removeEventListener('error', imageError, false)
        removeFromArray(element)
      }
  
      function imageEventTriggered(event, type, typeDesc) {
        removeImageLoadListener(event.target)
        sendSize(type, typeDesc + ': ' + event.target.src)
      }
  
      function imageLoaded(event) {
        imageEventTriggered(event, 'imageLoad', 'Image loaded')
      }
  
      function imageError(event) {
        imageEventTriggered(event, 'imageLoadFailed', 'Image load failed')
      }
  
      function mutationObserved(mutations) {
        sendSize(
          'mutationObserver',
          'mutationObserver: ' + mutations[0].target + ' ' + mutations[0].type
        )
  
        // Deal with WebKit / Blink asyncing image loading when tags are injected into the page
        mutations.forEach(addImageLoadListners)
      }
  
      function createMutationObserver() {
        var target = document.querySelector('body'),
          config = {
            attributes: true,
            attributeOldValue: false,
            characterData: true,
            characterDataOldValue: false,
            childList: true,
            subtree: true
          }
  
        observer = new MutationObserver(mutationObserved)
  
        log('Create body MutationObserver')
        observer.observe(target, config)
  
        return observer
      }
  
      var elements = [],
        MutationObserver =
          window.MutationObserver || window.WebKitMutationObserver,
        observer = createMutationObserver()
  
      return {
        disconnect: function () {
          if ('disconnect' in observer) {
            log('Disconnect body MutationObserver')
            observer.disconnect()
            elements.forEach(removeImageLoadListener)
          }
        }
      }
    }
  
    function setupMutationObserver() {
      var forceIntervalTimer = 0 > interval
  
      // Not testable in PhantomJS
      /* istanbul ignore if */ if (
        window.MutationObserver ||
        window.WebKitMutationObserver
      ) {
        if (forceIntervalTimer) {
          initInterval()
        } else {
          bodyObserver = setupBodyMutationObserver()
        }
      } else {
        log('MutationObserver not supported in this browser!')
        initInterval()
      }
    }
  
    // document.documentElement.offsetHeight is not reliable, so
    // we have to jump through hoops to get a better value.
    function getComputedStyle(prop, el) {
      var retVal = 0
      el = el || document.body // Not testable in phantonJS
  
      retVal = document.defaultView.getComputedStyle(el, null)
      retVal = null !== retVal ? retVal[prop] : 0
  
      return parseInt(retVal, base)
    }
  
    function chkEventThottle(timer) {
      if (timer > throttledTimer / 2) {
        throttledTimer = 2 * timer
        log('Event throttle increased to ' + throttledTimer + 'ms')
      }
    }
  
    // Idea from https://github.com/guardian/iframe-messenger
    function getMaxElement(side, elements) {
      var elementsLength = elements.length,
        elVal = 0,
        maxVal = 0,
        Side = capitalizeFirstLetter(side),
        timer = Date.now()
  
      for (var i = 0; i < elementsLength; i++) {
        elVal =
          elements[i].getBoundingClientRect()[side] +
          getComputedStyle('margin' + Side, elements[i])
        if (elVal > maxVal) {
          maxVal = elVal
        }
      }
  
      timer = Date.now() - timer
  
      log('Parsed ' + elementsLength + ' HTML elements')
      log('Element position calculated in ' + timer + 'ms')
  
      chkEventThottle(timer)
  
      return maxVal
    }
  
    function getAllMeasurements(dimensions) {
      return [
        dimensions.bodyOffset(),
        dimensions.bodyScroll(),
        dimensions.documentElementOffset(),
        dimensions.documentElementScroll()
      ]
    }
  
    function getTaggedElements(side, tag) {
      function noTaggedElementsFound() {
        warn('No tagged elements (' + tag + ') found on page')
        return document.querySelectorAll('body *')
      }
  
      var elements = document.querySelectorAll('[' + tag + ']')
  
      if (elements.length === 0) noTaggedElementsFound()
  
      return getMaxElement(side, elements)
    }
  
    function getAllElements() {
      return document.querySelectorAll('body *')
    }
  
    var getHeight = {
        bodyOffset: function getBodyOffsetHeight() {
          return (
            document.body.offsetHeight +
            getComputedStyle('marginTop') +
            getComputedStyle('marginBottom')
          )
        },
  
        offset: function () {
          return getHeight.bodyOffset() // Backwards compatability
        },
  
        bodyScroll: function getBodyScrollHeight() {
          return document.body.scrollHeight
        },
  
        custom: function getCustomWidth() {
          return customCalcMethods.height()
        },
  
        documentElementOffset: function getDEOffsetHeight() {
          return document.documentElement.offsetHeight
        },
  
        documentElementScroll: function getDEScrollHeight() {
          return document.documentElement.scrollHeight
        },
  
        max: function getMaxHeight() {
          return Math.max.apply(null, getAllMeasurements(getHeight))
        },
  
        min: function getMinHeight() {
          return Math.min.apply(null, getAllMeasurements(getHeight))
        },
  
        grow: function growHeight() {
          return getHeight.max() // Run max without the forced downsizing
        },
  
        lowestElement: function getBestHeight() {
          return Math.max(
            getHeight.bodyOffset() || getHeight.documentElementOffset(),
            getMaxElement('bottom', getAllElements())
          )
        },
  
        taggedElement: function getTaggedElementsHeight() {
          return getTaggedElements('bottom', 'data-iframe-height')
        }
      },
      getWidth = {
        bodyScroll: function getBodyScrollWidth() {
          return document.body.scrollWidth
        },
  
        bodyOffset: function getBodyOffsetWidth() {
          return document.body.offsetWidth
        },
  
        custom: function getCustomWidth() {
          return customCalcMethods.width()
        },
  
        documentElementScroll: function getDEScrollWidth() {
          return document.documentElement.scrollWidth
        },
  
        documentElementOffset: function getDEOffsetWidth() {
          return document.documentElement.offsetWidth
        },
  
        scroll: function getMaxWidth() {
          return Math.max(getWidth.bodyScroll(), getWidth.documentElementScroll())
        },
  
        max: function getMaxWidth() {
          return Math.max.apply(null, getAllMeasurements(getWidth))
        },
  
        min: function getMinWidth() {
          return Math.min.apply(null, getAllMeasurements(getWidth))
        },
  
        rightMostElement: function rightMostElement() {
          return getMaxElement('right', getAllElements())
        },
  
        taggedElement: function getTaggedElementsWidth() {
          return getTaggedElements('right', 'data-iframe-width')
        }
      }
  
    function sizeIFrame(
      triggerEvent,
      triggerEventDesc,
      customHeight,
      customWidth
    ) {
      function resizeIFrame() {
        height = currentHeight
        width = currentWidth
  
        sendMsg(height, width, triggerEvent)
      }
  
      function isSizeChangeDetected() {
        function checkTolarance(a, b) {
          var retVal = Math.abs(a - b) <= tolerance
          return !retVal
        }
  
        currentHeight =
          undefined !== customHeight ? customHeight : getHeight[heightCalcMode]()
        currentWidth =
          undefined !== customWidth ? customWidth : getWidth[widthCalcMode]()
  
        return (
          checkTolarance(height, currentHeight) ||
          (calculateWidth && checkTolarance(width, currentWidth))
        )
      }
  
      function isForceResizableEvent() {
        return !(triggerEvent in { init: 1, interval: 1, size: 1 })
      }
  
      function isForceResizableCalcMode() {
        return (
          heightCalcMode in resetRequiredMethods ||
          (calculateWidth && widthCalcMode in resetRequiredMethods)
        )
      }
  
      function logIgnored() {
        log('No change in size detected')
      }
  
      function checkDownSizing() {
        if (isForceResizableEvent() && isForceResizableCalcMode()) {
          resetIFrame(triggerEventDesc)
        } else if (!(triggerEvent in { interval: 1 })) {
          logIgnored()
        }
      }
  
      var currentHeight, currentWidth
  
      if (isSizeChangeDetected() || 'init' === triggerEvent) {
        lockTrigger()
        resizeIFrame()
      } else {
        checkDownSizing()
      }
    }
  
    var sizeIFrameThrottled = throttle(sizeIFrame)
  
    function sendSize(triggerEvent, triggerEventDesc, customHeight, customWidth) {
      function recordTrigger() {
        if (!(triggerEvent in { reset: 1, resetPage: 1, init: 1 })) {
          log('Trigger event: ' + triggerEventDesc)
        }
      }
  
      function isDoubleFiredEvent() {
        return triggerLocked && triggerEvent in doubleEventList
      }
  
      if (!isDoubleFiredEvent()) {
        recordTrigger()
        if (triggerEvent === 'init') {
          sizeIFrame(triggerEvent, triggerEventDesc, customHeight, customWidth)
        } else {
          sizeIFrameThrottled(
            triggerEvent,
            triggerEventDesc,
            customHeight,
            customWidth
          )
        }
      } else {
        log('Trigger event cancelled: ' + triggerEvent)
      }
    }
  
    function lockTrigger() {
      if (!triggerLocked) {
        triggerLocked = true
        log('Trigger event lock on')
      }
      clearTimeout(triggerLockedTimer)
      triggerLockedTimer = setTimeout(function () {
        triggerLocked = false
        log('Trigger event lock off')
        log('--')
      }, eventCancelTimer)
    }
  
    function triggerReset(triggerEvent) {
      height = getHeight[heightCalcMode]()
      width = getWidth[widthCalcMode]()
  
      sendMsg(height, width, triggerEvent)
    }
  
    function resetIFrame(triggerEventDesc) {
      var hcm = heightCalcMode
      heightCalcMode = heightCalcModeDefault
  
      log('Reset trigger event: ' + triggerEventDesc)
      lockTrigger()
      triggerReset('reset')
  
      heightCalcMode = hcm
    }
  
    function sendMsg(height, width, triggerEvent, msg, targetOrigin) {
      function setTargetOrigin() {
        if (undefined === targetOrigin) {
          targetOrigin = targetOriginDefault
        } else {
          log('Message targetOrigin: ' + targetOrigin)
        }
      }
  
      function sendToParent() {
        var size = height + ':' + width,
          message =
            myID +
            ':' +
            size +
            ':' +
            triggerEvent +
            (undefined !== msg ? ':' + msg : '')
  
        log('Sending message to host page (' + message + ')')
        target.postMessage(msgID + message, targetOrigin)
      }
  
      if (true === sendPermit) {
        setTargetOrigin()
        sendToParent()
      }
    }
  
    function receiver(event) {
      var processRequestFromParent = {
        init: function initFromParent() {
          initMsg = event.data
          target = event.source
  
          init()
          firstRun = false
          setTimeout(function () {
            initLock = false
          }, eventCancelTimer)
        },
  
        reset: function resetFromParent() {
          if (!initLock) {
            log('Page size reset by host page')
            triggerReset('resetPage')
          } else {
            log('Page reset ignored by init')
          }
        },
  
        resize: function resizeFromParent() {
          sendSize('resizeParent', 'Parent window requested size check')
        },
  
        moveToAnchor: function moveToAnchorF() {
          inPageLinks.findTarget(getData())
        },
        inPageLink: function inPageLinkF() {
          this.moveToAnchor()
        }, // Backward compatability
  
        pageInfo: function pageInfoFromParent() {
          var msgBody = getData()
          log('PageInfoFromParent called from parent: ' + msgBody)
          onPageInfo(JSON.parse(msgBody))
          log(' --')
        },
  
        message: function messageFromParent() {
          var msgBody = getData()
  
          log('onMessage called from parent: ' + msgBody)
          // eslint-disable-next-line sonarjs/no-extra-arguments
          onMessage(JSON.parse(msgBody))
          log(' --')
        }
      }
  
      function isMessageForUs() {
        return msgID === ('' + event.data).substr(0, msgIdLen) // ''+ Protects against non-string messages
      }
  
      function getMessageType() {
        return event.data.split(']')[1].split(':')[0]
      }
  
      function getData() {
        return event.data.substr(event.data.indexOf(':') + 1)
      }
  
      function isMiddleTier() {
        return (
          (!( true && module.exports) &&
            'iFrameResize' in window) ||
          ('jQuery' in window && 'iFrameResize' in window.jQuery.prototype)
        )
      }
  
      function isInitMsg() {
        // Test if this message is from a child below us. This is an ugly test, however, updating
        // the message format would break backwards compatibity.
        return event.data.split(':')[2] in { true: 1, false: 1 }
      }
  
      function callFromParent() {
        var messageType = getMessageType()
  
        if (messageType in processRequestFromParent) {
          processRequestFromParent[messageType]()
        } else if (!isMiddleTier() && !isInitMsg()) {
          warn('Unexpected message (' + event.data + ')')
        }
      }
  
      function processMessage() {
        if (false === firstRun) {
          callFromParent()
        } else if (isInitMsg()) {
          processRequestFromParent.init()
        } else {
          log(
            'Ignored message of type "' +
              getMessageType() +
              '". Received before initialization.'
          )
        }
      }
  
      if (isMessageForUs()) {
        processMessage()
      }
    }
  
    // Normally the parent kicks things off when it detects the iFrame has loaded.
    // If this script is async-loaded, then tell parent page to retry init.
    function chkLateLoaded() {
      if ('loading' !== document.readyState) {
        window.parent.postMessage('[iFrameResizerChild]Ready', '*')
      }
    }
  
    addEventListener(window, 'message', receiver)
    addEventListener(window, 'readystatechange', chkLateLoaded)
    chkLateLoaded()
  
    
  })()
  
  
  /***/ }),
  
  /***/ 702:
  /***/ ((module, exports) => {
  
  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
   * File: iframeResizer.js
   * Desc: Force iframes to size to content.
   * Requires: iframeResizer.contentWindow.js to be loaded into the target frame.
   * Doc: https://github.com/davidjbradshaw/iframe-resizer
   * Author: David J. Bradshaw - dave@bradshaw.net
   * Contributor: Jure Mav - jure.mav@gmail.com
   * Contributor: Reed Dadoune - reed@dadoune.com
   */
  
  // eslint-disable-next-line sonarjs/cognitive-complexity, no-shadow-restricted-names
  ;(function (undefined) {
    if (typeof window === 'undefined') return // don't run for server side render
  
    var count = 0,
      logEnabled = false,
      hiddenCheckEnabled = false,
      msgHeader = 'message',
      msgHeaderLen = msgHeader.length,
      msgId = '[iFrameSizer]', // Must match iframe msg ID
      msgIdLen = msgId.length,
      pagePosition = null,
      requestAnimationFrame = window.requestAnimationFrame,
      resetRequiredMethods = {
        max: 1,
        scroll: 1,
        bodyScroll: 1,
        documentElementScroll: 1
      },
      settings = {},
      timer = null,
      defaults = {
        autoResize: true,
        bodyBackground: null,
        bodyMargin: null,
        bodyMarginV1: 8,
        bodyPadding: null,
        checkOrigin: true,
        inPageLinks: false,
        enablePublicMethods: true,
        heightCalculationMethod: 'bodyOffset',
        id: 'iFrameResizer',
        interval: 32,
        log: false,
        maxHeight: Infinity,
        maxWidth: Infinity,
        minHeight: 0,
        minWidth: 0,
        mouseEvents: true,
        resizeFrom: 'parent',
        scrolling: false,
        sizeHeight: true,
        sizeWidth: false,
        warningTimeout: 5000,
        tolerance: 0,
        widthCalculationMethod: 'scroll',
        onClose: function () {
          return true
        },
        onClosed: function () {},
        onInit: function () {},
        onMessage: function () {
          warn('onMessage function not defined')
        },
        onMouseEnter: function () {},
        onMouseLeave: function () {},
        onResized: function () {},
        onScroll: function () {
          return true
        }
      }
  
    function getMutationObserver() {
      return (
        window.MutationObserver ||
        window.WebKitMutationObserver ||
        window.MozMutationObserver
      )
    }
  
    function addEventListener(el, evt, func) {
      el.addEventListener(evt, func, false)
    }
  
    function removeEventListener(el, evt, func) {
      el.removeEventListener(evt, func, false)
    }
  
    function setupRequestAnimationFrame() {
      var vendors = ['moz', 'webkit', 'o', 'ms']
      var x
  
      // Remove vendor prefixing if prefixed and break early if not
      for (x = 0; x < vendors.length && !requestAnimationFrame; x += 1) {
        requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame']
      }
  
      if (!requestAnimationFrame) {
        log('setup', 'RequestAnimationFrame not supported')
      } else {
        // Firefox extension content-scripts have a globalThis object that is not the same as window.
        // Binding `requestAnimationFrame` to window allows the function to work and prevents errors
        // being thrown when run in that context, and should be a no-op in every other context.
        requestAnimationFrame = requestAnimationFrame.bind(window)
      }
    }
  
    function getMyID(iframeId) {
      var retStr = 'Host page: ' + iframeId
  
      if (window.top !== window.self) {
        retStr =
          window.parentIFrame && window.parentIFrame.getId
            ? window.parentIFrame.getId() + ': ' + iframeId
            : 'Nested host page: ' + iframeId
      }
  
      return retStr
    }
  
    function formatLogHeader(iframeId) {
      return msgId + '[' + getMyID(iframeId) + ']'
    }
  
    function isLogEnabled(iframeId) {
      return settings[iframeId] ? settings[iframeId].log : logEnabled
    }
  
    function log(iframeId, msg) {
      output('log', iframeId, msg, isLogEnabled(iframeId))
    }
  
    function info(iframeId, msg) {
      output('info', iframeId, msg, isLogEnabled(iframeId))
    }
  
    function warn(iframeId, msg) {
      output('warn', iframeId, msg, true)
    }
  
    function output(type, iframeId, msg, enabled) {
      if (true === enabled && 'object' === typeof window.console) {
        // eslint-disable-next-line no-console
        console[type](formatLogHeader(iframeId), msg)
      }
    }
  
    function iFrameListener(event) {
      function resizeIFrame() {
        function resize() {
          setSize(messageData)
          setPagePosition(iframeId)
          on('onResized', messageData)
        }
  
        ensureInRange('Height')
        ensureInRange('Width')
  
        syncResize(resize, messageData, 'init')
      }
  
      function processMsg() {
        var data = msg.substr(msgIdLen).split(':')
        var height = data[1] ? parseInt(data[1], 10) : 0
        var iframe = settings[data[0]] && settings[data[0]].iframe
        var compStyle = getComputedStyle(iframe)
  
        return {
          iframe: iframe,
          id: data[0],
          height: height + getPaddingEnds(compStyle) + getBorderEnds(compStyle),
          width: data[2],
          type: data[3]
        }
      }
  
      function getPaddingEnds(compStyle) {
        if (compStyle.boxSizing !== 'border-box') {
          return 0
        }
        var top = compStyle.paddingTop ? parseInt(compStyle.paddingTop, 10) : 0
        var bot = compStyle.paddingBottom
          ? parseInt(compStyle.paddingBottom, 10)
          : 0
        return top + bot
      }
  
      function getBorderEnds(compStyle) {
        if (compStyle.boxSizing !== 'border-box') {
          return 0
        }
        var top = compStyle.borderTopWidth
          ? parseInt(compStyle.borderTopWidth, 10)
          : 0
        var bot = compStyle.borderBottomWidth
          ? parseInt(compStyle.borderBottomWidth, 10)
          : 0
        return top + bot
      }
  
      function ensureInRange(Dimension) {
        var max = Number(settings[iframeId]['max' + Dimension]),
          min = Number(settings[iframeId]['min' + Dimension]),
          dimension = Dimension.toLowerCase(),
          size = Number(messageData[dimension])
  
        log(iframeId, 'Checking ' + dimension + ' is in range ' + min + '-' + max)
  
        if (size < min) {
          size = min
          log(iframeId, 'Set ' + dimension + ' to min value')
        }
  
        if (size > max) {
          size = max
          log(iframeId, 'Set ' + dimension + ' to max value')
        }
  
        messageData[dimension] = '' + size
      }
  
      function isMessageFromIFrame() {
        function checkAllowedOrigin() {
          function checkList() {
            var i = 0,
              retCode = false
  
            log(
              iframeId,
              'Checking connection is from allowed list of origins: ' +
                checkOrigin
            )
  
            for (; i < checkOrigin.length; i++) {
              if (checkOrigin[i] === origin) {
                retCode = true
                break
              }
            }
            return retCode
          }
  
          function checkSingle() {
            var remoteHost = settings[iframeId] && settings[iframeId].remoteHost
            log(iframeId, 'Checking connection is from: ' + remoteHost)
            return origin === remoteHost
          }
  
          return checkOrigin.constructor === Array ? checkList() : checkSingle()
        }
  
        var origin = event.origin,
          checkOrigin = settings[iframeId] && settings[iframeId].checkOrigin
  
        if (checkOrigin && '' + origin !== 'null' && !checkAllowedOrigin()) {
          throw new Error(
            'Unexpected message received from: ' +
              origin +
              ' for ' +
              messageData.iframe.id +
              '. Message was: ' +
              event.data +
              '. This error can be disabled by setting the checkOrigin: false option or by providing of array of trusted domains.'
          )
        }
  
        return true
      }
  
      function isMessageForUs() {
        return (
          msgId === ('' + msg).substr(0, msgIdLen) &&
          msg.substr(msgIdLen).split(':')[0] in settings
        ) // ''+Protects against non-string msg
      }
  
      function isMessageFromMetaParent() {
        // Test if this message is from a parent above us. This is an ugly test, however, updating
        // the message format would break backwards compatibity.
        var retCode = messageData.type in { true: 1, false: 1, undefined: 1 }
  
        if (retCode) {
          log(iframeId, 'Ignoring init message from meta parent page')
        }
  
        return retCode
      }
  
      function getMsgBody(offset) {
        return msg.substr(msg.indexOf(':') + msgHeaderLen + offset)
      }
  
      function forwardMsgFromIFrame(msgBody) {
        log(
          iframeId,
          'onMessage passed: {iframe: ' +
            messageData.iframe.id +
            ', message: ' +
            msgBody +
            '}'
        )
  
        on('onMessage', {
          iframe: messageData.iframe,
          message: JSON.parse(msgBody)
        })
  
        log(iframeId, '--')
      }
  
      function getPageInfo() {
        var bodyPosition = document.body.getBoundingClientRect(),
          iFramePosition = messageData.iframe.getBoundingClientRect()
  
        return JSON.stringify({
          iframeHeight: iFramePosition.height,
          iframeWidth: iFramePosition.width,
          clientHeight: Math.max(
            document.documentElement.clientHeight,
            window.innerHeight || 0
          ),
          clientWidth: Math.max(
            document.documentElement.clientWidth,
            window.innerWidth || 0
          ),
          offsetTop: parseInt(iFramePosition.top - bodyPosition.top, 10),
          offsetLeft: parseInt(iFramePosition.left - bodyPosition.left, 10),
          scrollTop: window.pageYOffset,
          scrollLeft: window.pageXOffset,
          documentHeight: document.documentElement.clientHeight,
          documentWidth: document.documentElement.clientWidth,
          windowHeight: window.innerHeight,
          windowWidth: window.innerWidth
        })
      }
  
      function sendPageInfoToIframe(iframe, iframeId) {
        function debouncedTrigger() {
          trigger('Send Page Info', 'pageInfo:' + getPageInfo(), iframe, iframeId)
        }
        debounceFrameEvents(debouncedTrigger, 32, iframeId)
      }
  
      function startPageInfoMonitor() {
        function setListener(type, func) {
          function sendPageInfo() {
            if (settings[id]) {
              sendPageInfoToIframe(settings[id].iframe, id)
            } else {
              stop()
            }
          }
  
          ;['scroll', 'resize'].forEach(function (evt) {
            log(id, type + evt + ' listener for sendPageInfo')
            func(window, evt, sendPageInfo)
          })
        }
  
        function stop() {
          setListener('Remove ', removeEventListener)
        }
  
        function start() {
          setListener('Add ', addEventListener)
        }
  
        var id = iframeId // Create locally scoped copy of iFrame ID
  
        start()
  
        if (settings[id]) {
          settings[id].stopPageInfo = stop
        }
      }
  
      function stopPageInfoMonitor() {
        if (settings[iframeId] && settings[iframeId].stopPageInfo) {
          settings[iframeId].stopPageInfo()
          delete settings[iframeId].stopPageInfo
        }
      }
  
      function checkIFrameExists() {
        var retBool = true
  
        if (null === messageData.iframe) {
          warn(iframeId, 'IFrame (' + messageData.id + ') not found')
          retBool = false
        }
        return retBool
      }
  
      function getElementPosition(target) {
        var iFramePosition = target.getBoundingClientRect()
  
        getPagePosition(iframeId)
  
        return {
          x: Math.floor(Number(iFramePosition.left) + Number(pagePosition.x)),
          y: Math.floor(Number(iFramePosition.top) + Number(pagePosition.y))
        }
      }
  
      function scrollRequestFromChild(addOffset) {
        /* istanbul ignore next */ // Not testable in Karma
        function reposition() {
          pagePosition = newPosition
          scrollTo()
          log(iframeId, '--')
        }
  
        function calcOffset() {
          return {
            x: Number(messageData.width) + offset.x,
            y: Number(messageData.height) + offset.y
          }
        }
  
        function scrollParent() {
          if (window.parentIFrame) {
            window.parentIFrame['scrollTo' + (addOffset ? 'Offset' : '')](
              newPosition.x,
              newPosition.y
            )
          } else {
            warn(
              iframeId,
              'Unable to scroll to requested position, window.parentIFrame not found'
            )
          }
        }
  
        var offset = addOffset
            ? getElementPosition(messageData.iframe)
            : { x: 0, y: 0 },
          newPosition = calcOffset()
  
        log(
          iframeId,
          'Reposition requested from iFrame (offset x:' +
            offset.x +
            ' y:' +
            offset.y +
            ')'
        )
  
        if (window.top !== window.self) {
          scrollParent()
        } else {
          reposition()
        }
      }
  
      function scrollTo() {
        if (false !== on('onScroll', pagePosition)) {
          setPagePosition(iframeId)
        } else {
          unsetPagePosition()
        }
      }
  
      function findTarget(location) {
        function jumpToTarget() {
          var jumpPosition = getElementPosition(target)
  
          log(
            iframeId,
            'Moving to in page link (#' +
              hash +
              ') at x: ' +
              jumpPosition.x +
              ' y: ' +
              jumpPosition.y
          )
          pagePosition = {
            x: jumpPosition.x,
            y: jumpPosition.y
          }
  
          scrollTo()
          log(iframeId, '--')
        }
  
        function jumpToParent() {
          if (window.parentIFrame) {
            window.parentIFrame.moveToAnchor(hash)
          } else {
            log(
              iframeId,
              'In page link #' +
                hash +
                ' not found and window.parentIFrame not found'
            )
          }
        }
  
        var hash = location.split('#')[1] || '',
          hashData = decodeURIComponent(hash),
          target =
            document.getElementById(hashData) ||
            document.getElementsByName(hashData)[0]
  
        if (target) {
          jumpToTarget()
        } else if (window.top !== window.self) {
          jumpToParent()
        } else {
          log(iframeId, 'In page link #' + hash + ' not found')
        }
      }
  
      function onMouse(event) {
        var mousePos = {}
  
        if (Number(messageData.width) === 0 && Number(messageData.height) === 0) {
          var data = getMsgBody(9).split(':')
          mousePos = {
            x: data[1],
            y: data[0]
          }
        } else {
          mousePos = {
            x: messageData.width,
            y: messageData.height
          }
        }
  
        on(event, {
          iframe: messageData.iframe,
          screenX: Number(mousePos.x),
          screenY: Number(mousePos.y),
          type: messageData.type
        })
      }
  
      function on(funcName, val) {
        return chkEvent(iframeId, funcName, val)
      }
  
      function actionMsg() {
        if (settings[iframeId] && settings[iframeId].firstRun) firstRun()
  
        switch (messageData.type) {
          case 'close':
            closeIFrame(messageData.iframe)
            break
  
          case 'message':
            forwardMsgFromIFrame(getMsgBody(6))
            break
  
          case 'mouseenter':
            onMouse('onMouseEnter')
            break
  
          case 'mouseleave':
            onMouse('onMouseLeave')
            break
  
          case 'autoResize':
            settings[iframeId].autoResize = JSON.parse(getMsgBody(9))
            break
  
          case 'scrollTo':
            scrollRequestFromChild(false)
            break
  
          case 'scrollToOffset':
            scrollRequestFromChild(true)
            break
  
          case 'pageInfo':
            sendPageInfoToIframe(
              settings[iframeId] && settings[iframeId].iframe,
              iframeId
            )
            startPageInfoMonitor()
            break
  
          case 'pageInfoStop':
            stopPageInfoMonitor()
            break
  
          case 'inPageLink':
            findTarget(getMsgBody(9))
            break
  
          case 'reset':
            resetIFrame(messageData)
            break
  
          case 'init':
            resizeIFrame()
            on('onInit', messageData.iframe)
            break
  
          default:
            if (
              Number(messageData.width) === 0 &&
              Number(messageData.height) === 0
            ) {
              warn(
                'Unsupported message received (' +
                  messageData.type +
                  '), this is likely due to the iframe containing a later ' +
                  'version of iframe-resizer than the parent page'
              )
            } else {
              resizeIFrame()
            }
        }
      }
  
      function hasSettings(iframeId) {
        var retBool = true
  
        if (!settings[iframeId]) {
          retBool = false
          warn(
            messageData.type +
              ' No settings for ' +
              iframeId +
              '. Message was: ' +
              msg
          )
        }
  
        return retBool
      }
  
      function iFrameReadyMsgReceived() {
        // eslint-disable-next-line no-restricted-syntax, guard-for-in
        for (var iframeId in settings) {
          trigger(
            'iFrame requested init',
            createOutgoingMsg(iframeId),
            settings[iframeId].iframe,
            iframeId
          )
        }
      }
  
      function firstRun() {
        if (settings[iframeId]) {
          settings[iframeId].firstRun = false
        }
      }
  
      var msg = event.data,
        messageData = {},
        iframeId = null
  
      if ('[iFrameResizerChild]Ready' === msg) {
        iFrameReadyMsgReceived()
      } else if (isMessageForUs()) {
        messageData = processMsg()
        iframeId = messageData.id
        if (settings[iframeId]) {
          settings[iframeId].loaded = true
        }
  
        if (!isMessageFromMetaParent() && hasSettings(iframeId)) {
          log(iframeId, 'Received: ' + msg)
  
          if (checkIFrameExists() && isMessageFromIFrame()) {
            actionMsg()
          }
        }
      } else {
        info(iframeId, 'Ignored: ' + msg)
      }
    }
  
    function chkEvent(iframeId, funcName, val) {
      var func = null,
        retVal = null
  
      if (settings[iframeId]) {
        func = settings[iframeId][funcName]
  
        if ('function' === typeof func) {
          retVal = func(val)
        } else {
          throw new TypeError(
            funcName + ' on iFrame[' + iframeId + '] is not a function'
          )
        }
      }
  
      return retVal
    }
  
    function removeIframeListeners(iframe) {
      var iframeId = iframe.id
      delete settings[iframeId]
    }
  
    function closeIFrame(iframe) {
      var iframeId = iframe.id
      if (chkEvent(iframeId, 'onClose', iframeId) === false) {
        log(iframeId, 'Close iframe cancelled by onClose event')
        return
      }
      log(iframeId, 'Removing iFrame: ' + iframeId)
  
      try {
        // Catch race condition error with React
        if (iframe.parentNode) {
          iframe.parentNode.removeChild(iframe)
        }
      } catch (error) {
        warn(error)
      }
  
      chkEvent(iframeId, 'onClosed', iframeId)
      log(iframeId, '--')
      removeIframeListeners(iframe)
    }
  
    function getPagePosition(iframeId) {
      if (null === pagePosition) {
        pagePosition = {
          x:
            window.pageXOffset !== undefined
              ? window.pageXOffset
              : document.documentElement.scrollLeft,
          y:
            window.pageYOffset !== undefined
              ? window.pageYOffset
              : document.documentElement.scrollTop
        }
        log(
          iframeId,
          'Get page position: ' + pagePosition.x + ',' + pagePosition.y
        )
      }
    }
  
    function setPagePosition(iframeId) {
      if (null !== pagePosition) {
        window.scrollTo(pagePosition.x, pagePosition.y)
        log(
          iframeId,
          'Set page position: ' + pagePosition.x + ',' + pagePosition.y
        )
        unsetPagePosition()
      }
    }
  
    function unsetPagePosition() {
      pagePosition = null
    }
  
    function resetIFrame(messageData) {
      function reset() {
        setSize(messageData)
        trigger('reset', 'reset', messageData.iframe, messageData.id)
      }
  
      log(
        messageData.id,
        'Size reset requested by ' +
          ('init' === messageData.type ? 'host page' : 'iFrame')
      )
      getPagePosition(messageData.id)
      syncResize(reset, messageData, 'reset')
    }
  
    function setSize(messageData) {
      function setDimension(dimension) {
        if (!messageData.id) {
          log('undefined', 'messageData id not set')
          return
        }
        messageData.iframe.style[dimension] = messageData[dimension] + 'px'
        log(
          messageData.id,
          'IFrame (' +
            iframeId +
            ') ' +
            dimension +
            ' set to ' +
            messageData[dimension] +
            'px'
        )
      }
  
      function chkZero(dimension) {
        // FireFox sets dimension of hidden iFrames to zero.
        // So if we detect that set up an event to check for
        // when iFrame becomes visible.
  
        /* istanbul ignore next */ // Not testable in PhantomJS
        if (!hiddenCheckEnabled && '0' === messageData[dimension]) {
          hiddenCheckEnabled = true
          log(iframeId, 'Hidden iFrame detected, creating visibility listener')
          fixHiddenIFrames()
        }
      }
  
      function processDimension(dimension) {
        setDimension(dimension)
        chkZero(dimension)
      }
  
      var iframeId = messageData.iframe.id
  
      if (settings[iframeId]) {
        if (settings[iframeId].sizeHeight) {
          processDimension('height')
        }
        if (settings[iframeId].sizeWidth) {
          processDimension('width')
        }
      }
    }
  
    function syncResize(func, messageData, doNotSync) {
      /* istanbul ignore if */ // Not testable in PhantomJS
      if (
        doNotSync !== messageData.type &&
        requestAnimationFrame &&
        // including check for jasmine because had trouble getting spy to work in unit test using requestAnimationFrame
        !window.jasmine
      ) {
        log(messageData.id, 'Requesting animation frame')
        requestAnimationFrame(func)
      } else {
        func()
      }
    }
  
    function trigger(calleeMsg, msg, iframe, id, noResponseWarning) {
      function postMessageToIFrame() {
        var target = settings[id] && settings[id].targetOrigin
        log(
          id,
          '[' +
            calleeMsg +
            '] Sending msg to iframe[' +
            id +
            '] (' +
            msg +
            ') targetOrigin: ' +
            target
        )
        iframe.contentWindow.postMessage(msgId + msg, target)
      }
  
      function iFrameNotFound() {
        warn(id, '[' + calleeMsg + '] IFrame(' + id + ') not found')
      }
  
      function chkAndSend() {
        if (
          iframe &&
          'contentWindow' in iframe &&
          null !== iframe.contentWindow
        ) {
          // Null test for PhantomJS
          postMessageToIFrame()
        } else {
          iFrameNotFound()
        }
      }
  
      function warnOnNoResponse() {
        function warning() {
          if (settings[id] && !settings[id].loaded && !errorShown) {
            errorShown = true
            warn(
              id,
              'IFrame has not responded within ' +
                settings[id].warningTimeout / 1000 +
                ' seconds. Check iFrameResizer.contentWindow.js has been loaded in iFrame. This message can be ignored if everything is working, or you can set the warningTimeout option to a higher value or zero to suppress this warning.'
            )
          }
        }
  
        if (
          !!noResponseWarning &&
          settings[id] &&
          !!settings[id].warningTimeout
        ) {
          settings[id].msgTimeout = setTimeout(
            warning,
            settings[id].warningTimeout
          )
        }
      }
  
      var errorShown = false
  
      id = id || iframe.id
  
      if (settings[id]) {
        chkAndSend()
        warnOnNoResponse()
      }
    }
  
    function createOutgoingMsg(iframeId) {
      return (
        iframeId +
        ':' +
        settings[iframeId].bodyMarginV1 +
        ':' +
        settings[iframeId].sizeWidth +
        ':' +
        settings[iframeId].log +
        ':' +
        settings[iframeId].interval +
        ':' +
        settings[iframeId].enablePublicMethods +
        ':' +
        settings[iframeId].autoResize +
        ':' +
        settings[iframeId].bodyMargin +
        ':' +
        settings[iframeId].heightCalculationMethod +
        ':' +
        settings[iframeId].bodyBackground +
        ':' +
        settings[iframeId].bodyPadding +
        ':' +
        settings[iframeId].tolerance +
        ':' +
        settings[iframeId].inPageLinks +
        ':' +
        settings[iframeId].resizeFrom +
        ':' +
        settings[iframeId].widthCalculationMethod +
        ':' +
        settings[iframeId].mouseEvents
      )
    }
  
    function isNumber(value) {
      return typeof value === 'number'
    }
  
    function setupIFrame(iframe, options) {
      function setLimits() {
        function addStyle(style) {
          var styleValue = settings[iframeId][style]
          if (Infinity !== styleValue && 0 !== styleValue) {
            iframe.style[style] = isNumber(styleValue)
              ? styleValue + 'px'
              : styleValue
            log(iframeId, 'Set ' + style + ' = ' + iframe.style[style])
          }
        }
  
        function chkMinMax(dimension) {
          if (
            settings[iframeId]['min' + dimension] >
            settings[iframeId]['max' + dimension]
          ) {
            throw new Error(
              'Value for min' +
                dimension +
                ' can not be greater than max' +
                dimension
            )
          }
        }
  
        chkMinMax('Height')
        chkMinMax('Width')
  
        addStyle('maxHeight')
        addStyle('minHeight')
        addStyle('maxWidth')
        addStyle('minWidth')
      }
  
      function newId() {
        var id = (options && options.id) || defaults.id + count++
        if (null !== document.getElementById(id)) {
          id += count++
        }
        return id
      }
  
      function ensureHasId(iframeId) {
        if ('' === iframeId) {
          // eslint-disable-next-line no-multi-assign
          iframe.id = iframeId = newId()
          logEnabled = (options || {}).log
          log(
            iframeId,
            'Added missing iframe ID: ' + iframeId + ' (' + iframe.src + ')'
          )
        }
  
        return iframeId
      }
  
      function setScrolling() {
        log(
          iframeId,
          'IFrame scrolling ' +
            (settings[iframeId] && settings[iframeId].scrolling
              ? 'enabled'
              : 'disabled') +
            ' for ' +
            iframeId
        )
        iframe.style.overflow =
          false === (settings[iframeId] && settings[iframeId].scrolling)
            ? 'hidden'
            : 'auto'
        switch (settings[iframeId] && settings[iframeId].scrolling) {
          case 'omit':
            break
  
          case true:
            iframe.scrolling = 'yes'
            break
  
          case false:
            iframe.scrolling = 'no'
            break
  
          default:
            iframe.scrolling = settings[iframeId]
              ? settings[iframeId].scrolling
              : 'no'
        }
      }
  
      // The V1 iFrame script expects an int, where as in V2 expects a CSS
      // string value such as '1px 3em', so if we have an int for V2, set V1=V2
      // and then convert V2 to a string PX value.
      function setupBodyMarginValues() {
        if (
          'number' ===
            typeof (settings[iframeId] && settings[iframeId].bodyMargin) ||
          '0' === (settings[iframeId] && settings[iframeId].bodyMargin)
        ) {
          settings[iframeId].bodyMarginV1 = settings[iframeId].bodyMargin
          settings[iframeId].bodyMargin =
            '' + settings[iframeId].bodyMargin + 'px'
        }
      }
  
      function checkReset() {
        // Reduce scope of firstRun to function, because IE8's JS execution
        // context stack is borked and this value gets externally
        // changed midway through running this function!!!
        var firstRun = settings[iframeId] && settings[iframeId].firstRun,
          resetRequertMethod =
            settings[iframeId] &&
            settings[iframeId].heightCalculationMethod in resetRequiredMethods
  
        if (!firstRun && resetRequertMethod) {
          resetIFrame({ iframe: iframe, height: 0, width: 0, type: 'init' })
        }
      }
  
      function setupIFrameObject() {
        if (settings[iframeId]) {
          settings[iframeId].iframe.iFrameResizer = {
            close: closeIFrame.bind(null, settings[iframeId].iframe),
  
            removeListeners: removeIframeListeners.bind(
              null,
              settings[iframeId].iframe
            ),
  
            resize: trigger.bind(
              null,
              'Window resize',
              'resize',
              settings[iframeId].iframe
            ),
  
            moveToAnchor: function (anchor) {
              trigger(
                'Move to anchor',
                'moveToAnchor:' + anchor,
                settings[iframeId].iframe,
                iframeId
              )
            },
  
            sendMessage: function (message) {
              message = JSON.stringify(message)
              trigger(
                'Send Message',
                'message:' + message,
                settings[iframeId].iframe,
                iframeId
              )
            }
          }
        }
      }
  
      // We have to call trigger twice, as we can not be sure if all
      // iframes have completed loading when this code runs. The
      // event listener also catches the page changing in the iFrame.
      function init(msg) {
        function iFrameLoaded() {
          trigger('iFrame.onload', msg, iframe, undefined, true)
          checkReset()
        }
  
        function createDestroyObserver(MutationObserver) {
          if (!iframe.parentNode) {
            return
          }
  
          var destroyObserver = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
              var removedNodes = Array.prototype.slice.call(mutation.removedNodes) // Transform NodeList into an Array
              removedNodes.forEach(function (removedNode) {
                if (removedNode === iframe) {
                  closeIFrame(iframe)
                }
              })
            })
          })
          destroyObserver.observe(iframe.parentNode, {
            childList: true
          })
        }
  
        var MutationObserver = getMutationObserver()
        if (MutationObserver) {
          createDestroyObserver(MutationObserver)
        }
  
        addEventListener(iframe, 'load', iFrameLoaded)
        trigger('init', msg, iframe, undefined, true)
      }
  
      function checkOptions(options) {
        if ('object' !== typeof options) {
          throw new TypeError('Options is not an object')
        }
      }
  
      function copyOptions(options) {
        // eslint-disable-next-line no-restricted-syntax
        for (var option in defaults) {
          if (Object.prototype.hasOwnProperty.call(defaults, option)) {
            settings[iframeId][option] = Object.prototype.hasOwnProperty.call(
              options,
              option
            )
              ? options[option]
              : defaults[option]
          }
        }
      }
  
      function getTargetOrigin(remoteHost) {
        return '' === remoteHost ||
          null !== remoteHost.match(/^(about:blank|javascript:|file:\/\/)/)
          ? '*'
          : remoteHost
      }
  
      function depricate(key) {
        var splitName = key.split('Callback')
  
        if (splitName.length === 2) {
          var name =
            'on' + splitName[0].charAt(0).toUpperCase() + splitName[0].slice(1)
          this[name] = this[key]
          delete this[key]
          warn(
            iframeId,
            "Deprecated: '" +
              key +
              "' has been renamed '" +
              name +
              "'. The old method will be removed in the next major version."
          )
        }
      }
  
      function processOptions(options) {
        options = options || {}
        settings[iframeId] = {
          firstRun: true,
          iframe: iframe,
          remoteHost: iframe.src && iframe.src.split('/').slice(0, 3).join('/')
        }
  
        checkOptions(options)
        Object.keys(options).forEach(depricate, options)
        copyOptions(options)
  
        if (settings[iframeId]) {
          settings[iframeId].targetOrigin =
            true === settings[iframeId].checkOrigin
              ? getTargetOrigin(settings[iframeId].remoteHost)
              : '*'
        }
      }
  
      function beenHere() {
        return iframeId in settings && 'iFrameResizer' in iframe
      }
  
      var iframeId = ensureHasId(iframe.id)
  
      if (!beenHere()) {
        processOptions(options)
        setScrolling()
        setLimits()
        setupBodyMarginValues()
        init(createOutgoingMsg(iframeId))
        setupIFrameObject()
      } else {
        warn(iframeId, 'Ignored iFrame, already setup.')
      }
    }
  
    function debouce(fn, time) {
      if (null === timer) {
        timer = setTimeout(function () {
          timer = null
          fn()
        }, time)
      }
    }
  
    var frameTimer = {}
    function debounceFrameEvents(fn, time, frameId) {
      if (!frameTimer[frameId]) {
        frameTimer[frameId] = setTimeout(function () {
          frameTimer[frameId] = null
          fn()
        }, time)
      }
    }
  
    // Not testable in PhantomJS
    /* istanbul ignore next */
  
    function fixHiddenIFrames() {
      function checkIFrames() {
        function checkIFrame(settingId) {
          function chkDimension(dimension) {
            return (
              '0px' ===
              (settings[settingId] && settings[settingId].iframe.style[dimension])
            )
          }
  
          function isVisible(el) {
            return null !== el.offsetParent
          }
  
          if (
            settings[settingId] &&
            isVisible(settings[settingId].iframe) &&
            (chkDimension('height') || chkDimension('width'))
          ) {
            trigger(
              'Visibility change',
              'resize',
              settings[settingId].iframe,
              settingId
            )
          }
        }
  
        Object.keys(settings).forEach(function (key) {
          checkIFrame(key)
        })
      }
  
      function mutationObserved(mutations) {
        log(
          'window',
          'Mutation observed: ' + mutations[0].target + ' ' + mutations[0].type
        )
        debouce(checkIFrames, 16)
      }
  
      function createMutationObserver() {
        var target = document.querySelector('body'),
          config = {
            attributes: true,
            attributeOldValue: false,
            characterData: true,
            characterDataOldValue: false,
            childList: true,
            subtree: true
          },
          observer = new MutationObserver(mutationObserved)
  
        observer.observe(target, config)
      }
  
      var MutationObserver = getMutationObserver()
      if (MutationObserver) {
        createMutationObserver()
      }
    }
  
    function resizeIFrames(event) {
      function resize() {
        sendTriggerMsg('Window ' + event, 'resize')
      }
  
      log('window', 'Trigger event: ' + event)
      debouce(resize, 16)
    }
  
    // Not testable in PhantomJS
    /* istanbul ignore next */
    function tabVisible() {
      function resize() {
        sendTriggerMsg('Tab Visable', 'resize')
      }
  
      if ('hidden' !== document.visibilityState) {
        log('document', 'Trigger event: Visiblity change')
        debouce(resize, 16)
      }
    }
  
    function sendTriggerMsg(eventName, event) {
      function isIFrameResizeEnabled(iframeId) {
        return (
          settings[iframeId] &&
          'parent' === settings[iframeId].resizeFrom &&
          settings[iframeId].autoResize &&
          !settings[iframeId].firstRun
        )
      }
  
      Object.keys(settings).forEach(function (iframeId) {
        if (isIFrameResizeEnabled(iframeId)) {
          trigger(eventName, event, settings[iframeId].iframe, iframeId)
        }
      })
    }
  
    function setupEventListeners() {
      addEventListener(window, 'message', iFrameListener)
  
      addEventListener(window, 'resize', function () {
        resizeIFrames('resize')
      })
  
      addEventListener(document, 'visibilitychange', tabVisible)
  
      addEventListener(document, '-webkit-visibilitychange', tabVisible)
    }
  
    function factory() {
      function init(options, element) {
        function chkType() {
          if (!element.tagName) {
            throw new TypeError('Object is not a valid DOM element')
          } else if ('IFRAME' !== element.tagName.toUpperCase()) {
            throw new TypeError(
              'Expected <IFRAME> tag, found <' + element.tagName + '>'
            )
          }
        }
  
        if (element) {
          chkType()
          setupIFrame(element, options)
          iFrames.push(element)
        }
      }
  
      function warnDeprecatedOptions(options) {
        if (options && options.enablePublicMethods) {
          warn(
            'enablePublicMethods option has been removed, public methods are now always available in the iFrame'
          )
        }
      }
  
      var iFrames
  
      setupRequestAnimationFrame()
      setupEventListeners()
  
      return function iFrameResizeF(options, target) {
        iFrames = [] // Only return iFrames past in on this call
  
        warnDeprecatedOptions(options)
  
        switch (typeof target) {
          case 'undefined':
          case 'string':
            Array.prototype.forEach.call(
              document.querySelectorAll(target || 'iframe'),
              init.bind(undefined, options)
            )
            break
  
          case 'object':
            init(options, target)
            break
  
          default:
            throw new TypeError('Unexpected data type (' + typeof target + ')')
        }
  
        return iFrames
      }
    }
  
    function createJQueryPublicMethod($) {
      if (!$.fn) {
        info('', 'Unable to bind to jQuery, it is not fully loaded.')
      } else if (!$.fn.iFrameResize) {
        $.fn.iFrameResize = function $iFrameResizeF(options) {
          function init(index, element) {
            setupIFrame(element, options)
          }
  
          return this.filter('iframe').each(init).end()
        }
      }
    }
  
    if (window.jQuery) {
      createJQueryPublicMethod(window.jQuery)
    }
  
    if (true) {
      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
      __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
      (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
      __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
    } else {}
    window.iFrameResize = window.iFrameResize || factory()
  })()
  
  
  /***/ }),
  
  /***/ 457:
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  var __webpack_unused_export__;
  var iframeResize = __webpack_require__(702)
  
  __webpack_unused_export__ = iframeResize
  exports.iframeResizer = iframeResize // Backwards compatability
  /* unused reexport */ __webpack_require__(402)
  
  
  /***/ }),
  
  /***/ 755:
  /***/ (function(module, exports) {
  
  var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
   * jQuery JavaScript Library v3.5.1
   * https://jquery.com/
   *
   * Includes Sizzle.js
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2020-05-04T22:49Z
   */
  ( function( global, factory ) {
  
    "use strict";
  
    if (  true && typeof module.exports === "object" ) {
  
      // For CommonJS and CommonJS-like environments where a proper `window`
      // is present, execute the factory and get jQuery.
      // For environments that do not have a `window` with a `document`
      // (such as Node.js), expose a factory as module.exports.
      // This accentuates the need for the creation of a real `window`.
      // e.g. var jQuery = require("jquery")(window);
      // See ticket #14549 for more info.
      module.exports = global.document ?
        factory( global, true ) :
        function( w ) {
          if ( !w.document ) {
            throw new Error( "jQuery requires a window with a document" );
          }
          return factory( w );
        };
    } else {
      factory( global );
    }
  
  // Pass this if window is not defined yet
  } )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
  
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";
  
  var arr = [];
  
  var getProto = Object.getPrototypeOf;
  
  var slice = arr.slice;
  
  var flat = arr.flat ? function( array ) {
    return arr.flat.call( array );
  } : function( array ) {
    return arr.concat.apply( [], array );
  };
  
  
  var push = arr.push;
  
  var indexOf = arr.indexOf;
  
  var class2type = {};
  
  var toString = class2type.toString;
  
  var hasOwn = class2type.hasOwnProperty;
  
  var fnToString = hasOwn.toString;
  
  var ObjectFunctionString = fnToString.call( Object );
  
  var support = {};
  
  var isFunction = function isFunction( obj ) {
  
        // Support: Chrome <=57, Firefox <=52
        // In some browsers, typeof returns "function" for HTML <object> elements
        // (i.e., `typeof document.createElement( "object" ) === "function"`).
        // We don't want to classify *any* DOM node as a function.
        return typeof obj === "function" && typeof obj.nodeType !== "number";
    };
  
  
  var isWindow = function isWindow( obj ) {
      return obj != null && obj === obj.window;
    };
  
  
  var document = window.document;
  
  
  
    var preservedScriptAttributes = {
      type: true,
      src: true,
      nonce: true,
      noModule: true
    };
  
    function DOMEval( code, node, doc ) {
      doc = doc || document;
  
      var i, val,
        script = doc.createElement( "script" );
  
      script.text = code;
      if ( node ) {
        for ( i in preservedScriptAttributes ) {
  
          // Support: Firefox 64+, Edge 18+
          // Some browsers don't support the "nonce" property on scripts.
          // On the other hand, just using `getAttribute` is not enough as
          // the `nonce` attribute is reset to an empty string whenever it
          // becomes browsing-context connected.
          // See https://github.com/whatwg/html/issues/2369
          // See https://html.spec.whatwg.org/#nonce-attributes
          // The `node.getAttribute` check was added for the sake of
          // `jQuery.globalEval` so that it can fake a nonce-containing node
          // via an object.
          val = node[ i ] || node.getAttribute && node.getAttribute( i );
          if ( val ) {
            script.setAttribute( i, val );
          }
        }
      }
      doc.head.appendChild( script ).parentNode.removeChild( script );
    }
  
  
  function toType( obj ) {
    if ( obj == null ) {
      return obj + "";
    }
  
    // Support: Android <=2.3 only (functionish RegExp)
    return typeof obj === "object" || typeof obj === "function" ?
      class2type[ toString.call( obj ) ] || "object" :
      typeof obj;
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module
  
  
  
  var
    version = "3.5.1",
  
    // Define a local copy of jQuery
    jQuery = function( selector, context ) {
  
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init( selector, context );
    };
  
  jQuery.fn = jQuery.prototype = {
  
    // The current version of jQuery being used
    jquery: version,
  
    constructor: jQuery,
  
    // The default length of a jQuery object is 0
    length: 0,
  
    toArray: function() {
      return slice.call( this );
    },
  
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function( num ) {
  
      // Return all the elements in a clean array
      if ( num == null ) {
        return slice.call( this );
      }
  
      // Return just the one element from the set
      return num < 0 ? this[ num + this.length ] : this[ num ];
    },
  
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function( elems ) {
  
      // Build a new jQuery matched element set
      var ret = jQuery.merge( this.constructor(), elems );
  
      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;
  
      // Return the newly-formed element set
      return ret;
    },
  
    // Execute a callback for every element in the matched set.
    each: function( callback ) {
      return jQuery.each( this, callback );
    },
  
    map: function( callback ) {
      return this.pushStack( jQuery.map( this, function( elem, i ) {
        return callback.call( elem, i, elem );
      } ) );
    },
  
    slice: function() {
      return this.pushStack( slice.apply( this, arguments ) );
    },
  
    first: function() {
      return this.eq( 0 );
    },
  
    last: function() {
      return this.eq( -1 );
    },
  
    even: function() {
      return this.pushStack( jQuery.grep( this, function( _elem, i ) {
        return ( i + 1 ) % 2;
      } ) );
    },
  
    odd: function() {
      return this.pushStack( jQuery.grep( this, function( _elem, i ) {
        return i % 2;
      } ) );
    },
  
    eq: function( i ) {
      var len = this.length,
        j = +i + ( i < 0 ? len : 0 );
      return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
    },
  
    end: function() {
      return this.prevObject || this.constructor();
    },
  
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };
  
  jQuery.extend = jQuery.fn.extend = function() {
    var options, name, src, copy, copyIsArray, clone,
      target = arguments[ 0 ] || {},
      i = 1,
      length = arguments.length,
      deep = false;
  
    // Handle a deep copy situation
    if ( typeof target === "boolean" ) {
      deep = target;
  
      // Skip the boolean and the target
      target = arguments[ i ] || {};
      i++;
    }
  
    // Handle case when target is a string or something (possible in deep copy)
    if ( typeof target !== "object" && !isFunction( target ) ) {
      target = {};
    }
  
    // Extend jQuery itself if only one argument is passed
    if ( i === length ) {
      target = this;
      i--;
    }
  
    for ( ; i < length; i++ ) {
  
      // Only deal with non-null/undefined values
      if ( ( options = arguments[ i ] ) != null ) {
  
        // Extend the base object
        for ( name in options ) {
          copy = options[ name ];
  
          // Prevent Object.prototype pollution
          // Prevent never-ending loop
          if ( name === "__proto__" || target === copy ) {
            continue;
          }
  
          // Recurse if we're merging plain objects or arrays
          if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
            ( copyIsArray = Array.isArray( copy ) ) ) ) {
            src = target[ name ];
  
            // Ensure proper type for the source value
            if ( copyIsArray && !Array.isArray( src ) ) {
              clone = [];
            } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
              clone = {};
            } else {
              clone = src;
            }
            copyIsArray = false;
  
            // Never move original objects, clone them
            target[ name ] = jQuery.extend( deep, clone, copy );
  
          // Don't bring in undefined values
          } else if ( copy !== undefined ) {
            target[ name ] = copy;
          }
        }
      }
    }
  
    // Return the modified object
    return target;
  };
  
  jQuery.extend( {
  
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
  
    // Assume jQuery is ready without the ready module
    isReady: true,
  
    error: function( msg ) {
      throw new Error( msg );
    },
  
    noop: function() {},
  
    isPlainObject: function( obj ) {
      var proto, Ctor;
  
      // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects
      if ( !obj || toString.call( obj ) !== "[object Object]" ) {
        return false;
      }
  
      proto = getProto( obj );
  
      // Objects with no prototype (e.g., `Object.create( null )`) are plain
      if ( !proto ) {
        return true;
      }
  
      // Objects with prototype are plain iff they were constructed by a global Object function
      Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
      return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
    },
  
    isEmptyObject: function( obj ) {
      var name;
  
      for ( name in obj ) {
        return false;
      }
      return true;
    },
  
    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function( code, options, doc ) {
      DOMEval( code, { nonce: options && options.nonce }, doc );
    },
  
    each: function( obj, callback ) {
      var length, i = 0;
  
      if ( isArrayLike( obj ) ) {
        length = obj.length;
        for ( ; i < length; i++ ) {
          if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
            break;
          }
        }
      } else {
        for ( i in obj ) {
          if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
            break;
          }
        }
      }
  
      return obj;
    },
  
    // results is for internal usage only
    makeArray: function( arr, results ) {
      var ret = results || [];
  
      if ( arr != null ) {
        if ( isArrayLike( Object( arr ) ) ) {
          jQuery.merge( ret,
            typeof arr === "string" ?
            [ arr ] : arr
          );
        } else {
          push.call( ret, arr );
        }
      }
  
      return ret;
    },
  
    inArray: function( elem, arr, i ) {
      return arr == null ? -1 : indexOf.call( arr, elem, i );
    },
  
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function( first, second ) {
      var len = +second.length,
        j = 0,
        i = first.length;
  
      for ( ; j < len; j++ ) {
        first[ i++ ] = second[ j ];
      }
  
      first.length = i;
  
      return first;
    },
  
    grep: function( elems, callback, invert ) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;
  
      // Go through the array, only saving the items
      // that pass the validator function
      for ( ; i < length; i++ ) {
        callbackInverse = !callback( elems[ i ], i );
        if ( callbackInverse !== callbackExpect ) {
          matches.push( elems[ i ] );
        }
      }
  
      return matches;
    },
  
    // arg is for internal usage only
    map: function( elems, callback, arg ) {
      var length, value,
        i = 0,
        ret = [];
  
      // Go through the array, translating each of the items to their new values
      if ( isArrayLike( elems ) ) {
        length = elems.length;
        for ( ; i < length; i++ ) {
          value = callback( elems[ i ], i, arg );
  
          if ( value != null ) {
            ret.push( value );
          }
        }
  
      // Go through every key on the object,
      } else {
        for ( i in elems ) {
          value = callback( elems[ i ], i, arg );
  
          if ( value != null ) {
            ret.push( value );
          }
        }
      }
  
      // Flatten any nested arrays
      return flat( ret );
    },
  
    // A global GUID counter for objects
    guid: 1,
  
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  } );
  
  if ( typeof Symbol === "function" ) {
    jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
  }
  
  // Populate the class2type map
  jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
  function( _i, name ) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase();
  } );
  
  function isArrayLike( obj ) {
  
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
      type = toType( obj );
  
    if ( isFunction( obj ) || isWindow( obj ) ) {
      return false;
    }
  
    return type === "array" || length === 0 ||
      typeof length === "number" && length > 0 && ( length - 1 ) in obj;
  }
  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.3.5
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2020-03-14
   */
  ( function( window ) {
  var i,
    support,
    Expr,
    getText,
    isXML,
    tokenize,
    compile,
    select,
    outermostContext,
    sortInput,
    hasDuplicate,
  
    // Local document vars
    setDocument,
    document,
    docElem,
    documentIsHTML,
    rbuggyQSA,
    rbuggyMatches,
    matches,
    contains,
  
    // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
    preferredDoc = window.document,
    dirruns = 0,
    done = 0,
    classCache = createCache(),
    tokenCache = createCache(),
    compilerCache = createCache(),
    nonnativeSelectorCache = createCache(),
    sortOrder = function( a, b ) {
      if ( a === b ) {
        hasDuplicate = true;
      }
      return 0;
    },
  
    // Instance methods
    hasOwn = ( {} ).hasOwnProperty,
    arr = [],
    pop = arr.pop,
    pushNative = arr.push,
    push = arr.push,
    slice = arr.slice,
  
    // Use a stripped-down indexOf as it's faster than native
    // https://jsperf.com/thor-indexof-vs-for/5
    indexOf = function( list, elem ) {
      var i = 0,
        len = list.length;
      for ( ; i < len; i++ ) {
        if ( list[ i ] === elem ) {
          return i;
        }
      }
      return -1;
    },
  
    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
      "ismap|loop|multiple|open|readonly|required|scoped",
  
    // Regular expressions
  
    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
  
    // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
    identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
      "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
  
    // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
  
      // Operator (capture 2)
      "*([*^$|!~]?=)" + whitespace +
  
      // "Attribute values must be CSS identifiers [capture 5]
      // or strings [capture 3 or capture 4]"
      "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
      whitespace + "*\\]",
  
    pseudos = ":(" + identifier + ")(?:\\((" +
  
      // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
      // 1. quoted (capture 3; capture 4 or capture 5)
      "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
  
      // 2. simple (capture 6)
      "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
  
      // 3. anything else (capture 2)
      ".*" +
      ")\\)|)",
  
    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp( whitespace + "+", "g" ),
    rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
      whitespace + "+$", "g" ),
  
    rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
    rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
      "*" ),
    rdescend = new RegExp( whitespace + "|>" ),
  
    rpseudo = new RegExp( pseudos ),
    ridentifier = new RegExp( "^" + identifier + "$" ),
  
    matchExpr = {
      "ID": new RegExp( "^#(" + identifier + ")" ),
      "CLASS": new RegExp( "^\\.(" + identifier + ")" ),
      "TAG": new RegExp( "^(" + identifier + "|[*])" ),
      "ATTR": new RegExp( "^" + attributes ),
      "PSEUDO": new RegExp( "^" + pseudos ),
      "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
        whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
        whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
      "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
  
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp( "^" + whitespace +
        "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
        "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
    },
  
    rhtml = /HTML$/i,
    rinputs = /^(?:input|select|textarea|button)$/i,
    rheader = /^h\d$/i,
  
    rnative = /^[^{]+\{\s*\[native \w/,
  
    // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
  
    rsibling = /[+~]/,
  
    // CSS escapes
    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
    funescape = function( escape, nonHex ) {
      var high = "0x" + escape.slice( 1 ) - 0x10000;
  
      return nonHex ?
  
        // Strip the backslash prefix from a non-hex escape sequence
        nonHex :
  
        // Replace a hexadecimal escape sequence with the encoded Unicode code point
        // Support: IE <=11+
        // For values outside the Basic Multilingual Plane (BMP), manually construct a
        // surrogate pair
        high < 0 ?
          String.fromCharCode( high + 0x10000 ) :
          String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
    },
  
    // CSS string/identifier serialization
    // https://drafts.csswg.org/cssom/#common-serializing-idioms
    rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
    fcssescape = function( ch, asCodePoint ) {
      if ( asCodePoint ) {
  
        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
        if ( ch === "\0" ) {
          return "\uFFFD";
        }
  
        // Control characters and (dependent upon position) numbers get escaped as code points
        return ch.slice( 0, -1 ) + "\\" +
          ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
      }
  
      // Other potentially-special ASCII characters get backslash-escaped
      return "\\" + ch;
    },
  
    // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function() {
      setDocument();
    },
  
    inDisabledFieldset = addCombinator(
      function( elem ) {
        return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
      },
      { dir: "parentNode", next: "legend" }
    );
  
  // Optimize for push.apply( _, NodeList )
  try {
    push.apply(
      ( arr = slice.call( preferredDoc.childNodes ) ),
      preferredDoc.childNodes
    );
  
    // Support: Android<4.0
    // Detect silently failing push.apply
    // eslint-disable-next-line no-unused-expressions
    arr[ preferredDoc.childNodes.length ].nodeType;
  } catch ( e ) {
    push = { apply: arr.length ?
  
      // Leverage slice if possible
      function( target, els ) {
        pushNative.apply( target, slice.call( els ) );
      } :
  
      // Support: IE<9
      // Otherwise append directly
      function( target, els ) {
        var j = target.length,
          i = 0;
  
        // Can't trust NodeList.length
        while ( ( target[ j++ ] = els[ i++ ] ) ) {}
        target.length = j - 1;
      }
    };
  }
  
  function Sizzle( selector, context, results, seed ) {
    var m, i, elem, nid, match, groups, newSelector,
      newContext = context && context.ownerDocument,
  
      // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;
  
    results = results || [];
  
    // Return early from calls with invalid selector or context
    if ( typeof selector !== "string" || !selector ||
      nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
  
      return results;
    }
  
    // Try to shortcut find operations (as opposed to filters) in HTML documents
    if ( !seed ) {
      setDocument( context );
      context = context || document;
  
      if ( documentIsHTML ) {
  
        // If the selector is sufficiently simple, try using a "get*By*" DOM method
        // (excepting DocumentFragment context, where the methods don't exist)
        if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {
  
          // ID selector
          if ( ( m = match[ 1 ] ) ) {
  
            // Document context
            if ( nodeType === 9 ) {
              if ( ( elem = context.getElementById( m ) ) ) {
  
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if ( elem.id === m ) {
                  results.push( elem );
                  return results;
                }
              } else {
                return results;
              }
  
            // Element context
            } else {
  
              // Support: IE, Opera, Webkit
              // TODO: identify versions
              // getElementById can match elements by name instead of ID
              if ( newContext && ( elem = newContext.getElementById( m ) ) &&
                contains( context, elem ) &&
                elem.id === m ) {
  
                results.push( elem );
                return results;
              }
            }
  
          // Type selector
          } else if ( match[ 2 ] ) {
            push.apply( results, context.getElementsByTagName( selector ) );
            return results;
  
          // Class selector
          } else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
            context.getElementsByClassName ) {
  
            push.apply( results, context.getElementsByClassName( m ) );
            return results;
          }
        }
  
        // Take advantage of querySelectorAll
        if ( support.qsa &&
          !nonnativeSelectorCache[ selector + " " ] &&
          ( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&
  
          // Support: IE 8 only
          // Exclude object elements
          ( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {
  
          newSelector = selector;
          newContext = context;
  
          // qSA considers elements outside a scoping root when evaluating child or
          // descendant combinators, which is not what we want.
          // In such cases, we work around the behavior by prefixing every selector in the
          // list with an ID selector referencing the scope context.
          // The technique has to be used as well when a leading combinator is used
          // as such selectors are not recognized by querySelectorAll.
          // Thanks to Andrew Dupont for this technique.
          if ( nodeType === 1 &&
            ( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {
  
            // Expand context for sibling selectors
            newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
              context;
  
            // We can use :scope instead of the ID hack if the browser
            // supports it & if we're not changing the context.
            if ( newContext !== context || !support.scope ) {
  
              // Capture the context ID, setting it first if necessary
              if ( ( nid = context.getAttribute( "id" ) ) ) {
                nid = nid.replace( rcssescape, fcssescape );
              } else {
                context.setAttribute( "id", ( nid = expando ) );
              }
            }
  
            // Prefix every selector in the list
            groups = tokenize( selector );
            i = groups.length;
            while ( i-- ) {
              groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
                toSelector( groups[ i ] );
            }
            newSelector = groups.join( "," );
          }
  
          try {
            push.apply( results,
              newContext.querySelectorAll( newSelector )
            );
            return results;
          } catch ( qsaError ) {
            nonnativeSelectorCache( selector, true );
          } finally {
            if ( nid === expando ) {
              context.removeAttribute( "id" );
            }
          }
        }
      }
    }
  
    // All others
    return select( selector.replace( rtrim, "$1" ), context, results, seed );
  }
  
  /**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
  function createCache() {
    var keys = [];
  
    function cache( key, value ) {
  
      // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
      if ( keys.push( key + " " ) > Expr.cacheLength ) {
  
        // Only keep the most recent entries
        delete cache[ keys.shift() ];
      }
      return ( cache[ key + " " ] = value );
    }
    return cache;
  }
  
  /**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
  function markFunction( fn ) {
    fn[ expando ] = true;
    return fn;
  }
  
  /**
   * Support testing using an element
   * @param {Function} fn Passed the created element and returns a boolean result
   */
  function assert( fn ) {
    var el = document.createElement( "fieldset" );
  
    try {
      return !!fn( el );
    } catch ( e ) {
      return false;
    } finally {
  
      // Remove from its parent by default
      if ( el.parentNode ) {
        el.parentNode.removeChild( el );
      }
  
      // release memory in IE
      el = null;
    }
  }
  
  /**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
  function addHandle( attrs, handler ) {
    var arr = attrs.split( "|" ),
      i = arr.length;
  
    while ( i-- ) {
      Expr.attrHandle[ arr[ i ] ] = handler;
    }
  }
  
  /**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
  function siblingCheck( a, b ) {
    var cur = b && a,
      diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
        a.sourceIndex - b.sourceIndex;
  
    // Use IE sourceIndex if available on both nodes
    if ( diff ) {
      return diff;
    }
  
    // Check if b follows a
    if ( cur ) {
      while ( ( cur = cur.nextSibling ) ) {
        if ( cur === b ) {
          return -1;
        }
      }
    }
  
    return a ? 1 : -1;
  }
  
  /**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
  function createInputPseudo( type ) {
    return function( elem ) {
      var name = elem.nodeName.toLowerCase();
      return name === "input" && elem.type === type;
    };
  }
  
  /**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
  function createButtonPseudo( type ) {
    return function( elem ) {
      var name = elem.nodeName.toLowerCase();
      return ( name === "input" || name === "button" ) && elem.type === type;
    };
  }
  
  /**
   * Returns a function to use in pseudos for :enabled/:disabled
   * @param {Boolean} disabled true for :disabled; false for :enabled
   */
  function createDisabledPseudo( disabled ) {
  
    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
    return function( elem ) {
  
      // Only certain elements can match :enabled or :disabled
      // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
      // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
      if ( "form" in elem ) {
  
        // Check for inherited disabledness on relevant non-disabled elements:
        // * listed form-associated elements in a disabled fieldset
        //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
        //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
        // * option elements in a disabled optgroup
        //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
        // All such elements have a "form" property.
        if ( elem.parentNode && elem.disabled === false ) {
  
          // Option elements defer to a parent optgroup if present
          if ( "label" in elem ) {
            if ( "label" in elem.parentNode ) {
              return elem.parentNode.disabled === disabled;
            } else {
              return elem.disabled === disabled;
            }
          }
  
          // Support: IE 6 - 11
          // Use the isDisabled shortcut property to check for disabled fieldset ancestors
          return elem.isDisabled === disabled ||
  
            // Where there is no isDisabled, check manually
            /* jshint -W018 */
            elem.isDisabled !== !disabled &&
            inDisabledFieldset( elem ) === disabled;
        }
  
        return elem.disabled === disabled;
  
      // Try to winnow out elements that can't be disabled before trusting the disabled property.
      // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
      // even exist on them, let alone have a boolean value.
      } else if ( "label" in elem ) {
        return elem.disabled === disabled;
      }
  
      // Remaining elements are neither :enabled nor :disabled
      return false;
    };
  }
  
  /**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
  function createPositionalPseudo( fn ) {
    return markFunction( function( argument ) {
      argument = +argument;
      return markFunction( function( seed, matches ) {
        var j,
          matchIndexes = fn( [], seed.length, argument ),
          i = matchIndexes.length;
  
        // Match elements found at the specified indexes
        while ( i-- ) {
          if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
            seed[ j ] = !( matches[ j ] = seed[ j ] );
          }
        }
      } );
    } );
  }
  
  /**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
  function testContext( context ) {
    return context && typeof context.getElementsByTagName !== "undefined" && context;
  }
  
  // Expose support vars for convenience
  support = Sizzle.support = {};
  
  /**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
  isXML = Sizzle.isXML = function( elem ) {
    var namespace = elem.namespaceURI,
      docElem = ( elem.ownerDocument || elem ).documentElement;
  
    // Support: IE <=8
    // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
    // https://bugs.jquery.com/ticket/4833
    return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
  };
  
  /**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
  setDocument = Sizzle.setDocument = function( node ) {
    var hasCompare, subWindow,
      doc = node ? node.ownerDocument || node : preferredDoc;
  
    // Return early if doc is invalid or already selected
    // Support: IE 11+, Edge 17 - 18+
    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    // two documents; shallow comparisons work.
    // eslint-disable-next-line eqeqeq
    if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
      return document;
    }
  
    // Update global variables
    document = doc;
    docElem = document.documentElement;
    documentIsHTML = !isXML( document );
  
    // Support: IE 9 - 11+, Edge 12 - 18+
    // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
    // Support: IE 11+, Edge 17 - 18+
    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    // two documents; shallow comparisons work.
    // eslint-disable-next-line eqeqeq
    if ( preferredDoc != document &&
      ( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {
  
      // Support: IE 11, Edge
      if ( subWindow.addEventListener ) {
        subWindow.addEventListener( "unload", unloadHandler, false );
  
      // Support: IE 9 - 10 only
      } else if ( subWindow.attachEvent ) {
        subWindow.attachEvent( "onunload", unloadHandler );
      }
    }
  
    // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
    // Safari 4 - 5 only, Opera <=11.6 - 12.x only
    // IE/Edge & older browsers don't support the :scope pseudo-class.
    // Support: Safari 6.0 only
    // Safari 6.0 supports :scope but it's an alias of :root there.
    support.scope = assert( function( el ) {
      docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
      return typeof el.querySelectorAll !== "undefined" &&
        !el.querySelectorAll( ":scope fieldset div" ).length;
    } );
  
    /* Attributes
    ---------------------------------------------------------------------- */
  
    // Support: IE<8
    // Verify that getAttribute really returns attributes and not properties
    // (excepting IE8 booleans)
    support.attributes = assert( function( el ) {
      el.className = "i";
      return !el.getAttribute( "className" );
    } );
  
    /* getElement(s)By*
    ---------------------------------------------------------------------- */
  
    // Check if getElementsByTagName("*") returns only elements
    support.getElementsByTagName = assert( function( el ) {
      el.appendChild( document.createComment( "" ) );
      return !el.getElementsByTagName( "*" ).length;
    } );
  
    // Support: IE<9
    support.getElementsByClassName = rnative.test( document.getElementsByClassName );
  
    // Support: IE<10
    // Check if getElementById returns elements by name
    // The broken getElementById methods don't pick up programmatically-set names,
    // so use a roundabout getElementsByName test
    support.getById = assert( function( el ) {
      docElem.appendChild( el ).id = expando;
      return !document.getElementsByName || !document.getElementsByName( expando ).length;
    } );
  
    // ID filter and find
    if ( support.getById ) {
      Expr.filter[ "ID" ] = function( id ) {
        var attrId = id.replace( runescape, funescape );
        return function( elem ) {
          return elem.getAttribute( "id" ) === attrId;
        };
      };
      Expr.find[ "ID" ] = function( id, context ) {
        if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
          var elem = context.getElementById( id );
          return elem ? [ elem ] : [];
        }
      };
    } else {
      Expr.filter[ "ID" ] =  function( id ) {
        var attrId = id.replace( runescape, funescape );
        return function( elem ) {
          var node = typeof elem.getAttributeNode !== "undefined" &&
            elem.getAttributeNode( "id" );
          return node && node.value === attrId;
        };
      };
  
      // Support: IE 6 - 7 only
      // getElementById is not reliable as a find shortcut
      Expr.find[ "ID" ] = function( id, context ) {
        if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
          var node, i, elems,
            elem = context.getElementById( id );
  
          if ( elem ) {
  
            // Verify the id attribute
            node = elem.getAttributeNode( "id" );
            if ( node && node.value === id ) {
              return [ elem ];
            }
  
            // Fall back on getElementsByName
            elems = context.getElementsByName( id );
            i = 0;
            while ( ( elem = elems[ i++ ] ) ) {
              node = elem.getAttributeNode( "id" );
              if ( node && node.value === id ) {
                return [ elem ];
              }
            }
          }
  
          return [];
        }
      };
    }
  
    // Tag
    Expr.find[ "TAG" ] = support.getElementsByTagName ?
      function( tag, context ) {
        if ( typeof context.getElementsByTagName !== "undefined" ) {
          return context.getElementsByTagName( tag );
  
        // DocumentFragment nodes don't have gEBTN
        } else if ( support.qsa ) {
          return context.querySelectorAll( tag );
        }
      } :
  
      function( tag, context ) {
        var elem,
          tmp = [],
          i = 0,
  
          // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
          results = context.getElementsByTagName( tag );
  
        // Filter out possible comments
        if ( tag === "*" ) {
          while ( ( elem = results[ i++ ] ) ) {
            if ( elem.nodeType === 1 ) {
              tmp.push( elem );
            }
          }
  
          return tmp;
        }
        return results;
      };
  
    // Class
    Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
      if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
        return context.getElementsByClassName( className );
      }
    };
  
    /* QSA/matchesSelector
    ---------------------------------------------------------------------- */
  
    // QSA and matchesSelector support
  
    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
    rbuggyMatches = [];
  
    // qSa(:focus) reports false when true (Chrome 21)
    // We allow this because of a bug in IE8/9 that throws an error
    // whenever `document.activeElement` is accessed on an iframe
    // So, we allow :focus to pass through QSA all the time to avoid the IE error
    // See https://bugs.jquery.com/ticket/13378
    rbuggyQSA = [];
  
    if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {
  
      // Build QSA regex
      // Regex strategy adopted from Diego Perini
      assert( function( el ) {
  
        var input;
  
        // Select is set to empty string on purpose
        // This is to test IE's treatment of not explicitly
        // setting a boolean content attribute,
        // since its presence should be enough
        // https://bugs.jquery.com/ticket/12359
        docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
          "<select id='" + expando + "-\r\\' msallowcapture=''>" +
          "<option selected=''></option></select>";
  
        // Support: IE8, Opera 11-12.16
        // Nothing should be selected when empty strings follow ^= or $= or *=
        // The test attribute must be unknown in Opera but "safe" for WinRT
        // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
        if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
          rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
        }
  
        // Support: IE8
        // Boolean attributes and "value" are not treated correctly
        if ( !el.querySelectorAll( "[selected]" ).length ) {
          rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
        }
  
        // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
        if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
          rbuggyQSA.push( "~=" );
        }
  
        // Support: IE 11+, Edge 15 - 18+
        // IE 11/Edge don't find elements on a `[name='']` query in some cases.
        // Adding a temporary attribute to the document before the selection works
        // around the issue.
        // Interestingly, IE 10 & older don't seem to have the issue.
        input = document.createElement( "input" );
        input.setAttribute( "name", "" );
        el.appendChild( input );
        if ( !el.querySelectorAll( "[name='']" ).length ) {
          rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
            whitespace + "*(?:''|\"\")" );
        }
  
        // Webkit/Opera - :checked should return selected option elements
        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
        // IE8 throws error here and will not see later tests
        if ( !el.querySelectorAll( ":checked" ).length ) {
          rbuggyQSA.push( ":checked" );
        }
  
        // Support: Safari 8+, iOS 8+
        // https://bugs.webkit.org/show_bug.cgi?id=136851
        // In-page `selector#id sibling-combinator selector` fails
        if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
          rbuggyQSA.push( ".#.+[+~]" );
        }
  
        // Support: Firefox <=3.6 - 5 only
        // Old Firefox doesn't throw on a badly-escaped identifier.
        el.querySelectorAll( "\\\f" );
        rbuggyQSA.push( "[\\r\\n\\f]" );
      } );
  
      assert( function( el ) {
        el.innerHTML = "<a href='' disabled='disabled'></a>" +
          "<select disabled='disabled'><option/></select>";
  
        // Support: Windows 8 Native Apps
        // The type and name attributes are restricted during .innerHTML assignment
        var input = document.createElement( "input" );
        input.setAttribute( "type", "hidden" );
        el.appendChild( input ).setAttribute( "name", "D" );
  
        // Support: IE8
        // Enforce case-sensitivity of name attribute
        if ( el.querySelectorAll( "[name=d]" ).length ) {
          rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
        }
  
        // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
        // IE8 throws error here and will not see later tests
        if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
          rbuggyQSA.push( ":enabled", ":disabled" );
        }
  
        // Support: IE9-11+
        // IE's :disabled selector does not pick up the children of disabled fieldsets
        docElem.appendChild( el ).disabled = true;
        if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
          rbuggyQSA.push( ":enabled", ":disabled" );
        }
  
        // Support: Opera 10 - 11 only
        // Opera 10-11 does not throw on post-comma invalid pseudos
        el.querySelectorAll( "*,:x" );
        rbuggyQSA.push( ",.*:" );
      } );
    }
  
    if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
      docElem.webkitMatchesSelector ||
      docElem.mozMatchesSelector ||
      docElem.oMatchesSelector ||
      docElem.msMatchesSelector ) ) ) ) {
  
      assert( function( el ) {
  
        // Check to see if it's possible to do matchesSelector
        // on a disconnected node (IE 9)
        support.disconnectedMatch = matches.call( el, "*" );
  
        // This should fail with an exception
        // Gecko does not error, returns false instead
        matches.call( el, "[s!='']:x" );
        rbuggyMatches.push( "!=", pseudos );
      } );
    }
  
    rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
    rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );
  
    /* Contains
    ---------------------------------------------------------------------- */
    hasCompare = rnative.test( docElem.compareDocumentPosition );
  
    // Element contains another
    // Purposefully self-exclusive
    // As in, an element does not contain itself
    contains = hasCompare || rnative.test( docElem.contains ) ?
      function( a, b ) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
          bup = b && b.parentNode;
        return a === bup || !!( bup && bup.nodeType === 1 && (
          adown.contains ?
            adown.contains( bup ) :
            a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
        ) );
      } :
      function( a, b ) {
        if ( b ) {
          while ( ( b = b.parentNode ) ) {
            if ( b === a ) {
              return true;
            }
          }
        }
        return false;
      };
  
    /* Sorting
    ---------------------------------------------------------------------- */
  
    // Document order sorting
    sortOrder = hasCompare ?
    function( a, b ) {
  
      // Flag for duplicate removal
      if ( a === b ) {
        hasDuplicate = true;
        return 0;
      }
  
      // Sort on method existence if only one input has compareDocumentPosition
      var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
      if ( compare ) {
        return compare;
      }
  
      // Calculate position if both inputs belong to the same document
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
        a.compareDocumentPosition( b ) :
  
        // Otherwise we know they are disconnected
        1;
  
      // Disconnected nodes
      if ( compare & 1 ||
        ( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {
  
        // Choose the first element that is related to our preferred document
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ( a == document || a.ownerDocument == preferredDoc &&
          contains( preferredDoc, a ) ) {
          return -1;
        }
  
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ( b == document || b.ownerDocument == preferredDoc &&
          contains( preferredDoc, b ) ) {
          return 1;
        }
  
        // Maintain original order
        return sortInput ?
          ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
          0;
      }
  
      return compare & 4 ? -1 : 1;
    } :
    function( a, b ) {
  
      // Exit early if the nodes are identical
      if ( a === b ) {
        hasDuplicate = true;
        return 0;
      }
  
      var cur,
        i = 0,
        aup = a.parentNode,
        bup = b.parentNode,
        ap = [ a ],
        bp = [ b ];
  
      // Parentless nodes are either documents or disconnected
      if ( !aup || !bup ) {
  
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        /* eslint-disable eqeqeq */
        return a == document ? -1 :
          b == document ? 1 :
          /* eslint-enable eqeqeq */
          aup ? -1 :
          bup ? 1 :
          sortInput ?
          ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
          0;
  
      // If the nodes are siblings, we can do a quick check
      } else if ( aup === bup ) {
        return siblingCheck( a, b );
      }
  
      // Otherwise we need full lists of their ancestors for comparison
      cur = a;
      while ( ( cur = cur.parentNode ) ) {
        ap.unshift( cur );
      }
      cur = b;
      while ( ( cur = cur.parentNode ) ) {
        bp.unshift( cur );
      }
  
      // Walk down the tree looking for a discrepancy
      while ( ap[ i ] === bp[ i ] ) {
        i++;
      }
  
      return i ?
  
        // Do a sibling check if the nodes have a common ancestor
        siblingCheck( ap[ i ], bp[ i ] ) :
  
        // Otherwise nodes in our document sort first
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        /* eslint-disable eqeqeq */
        ap[ i ] == preferredDoc ? -1 :
        bp[ i ] == preferredDoc ? 1 :
        /* eslint-enable eqeqeq */
        0;
    };
  
    return document;
  };
  
  Sizzle.matches = function( expr, elements ) {
    return Sizzle( expr, null, null, elements );
  };
  
  Sizzle.matchesSelector = function( elem, expr ) {
    setDocument( elem );
  
    if ( support.matchesSelector && documentIsHTML &&
      !nonnativeSelectorCache[ expr + " " ] &&
      ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
      ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
  
      try {
        var ret = matches.call( elem, expr );
  
        // IE 9's matchesSelector returns false on disconnected nodes
        if ( ret || support.disconnectedMatch ||
  
          // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11 ) {
          return ret;
        }
      } catch ( e ) {
        nonnativeSelectorCache( expr, true );
      }
    }
  
    return Sizzle( expr, document, null, [ elem ] ).length > 0;
  };
  
  Sizzle.contains = function( context, elem ) {
  
    // Set document vars if needed
    // Support: IE 11+, Edge 17 - 18+
    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    // two documents; shallow comparisons work.
    // eslint-disable-next-line eqeqeq
    if ( ( context.ownerDocument || context ) != document ) {
      setDocument( context );
    }
    return contains( context, elem );
  };
  
  Sizzle.attr = function( elem, name ) {
  
    // Set document vars if needed
    // Support: IE 11+, Edge 17 - 18+
    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    // two documents; shallow comparisons work.
    // eslint-disable-next-line eqeqeq
    if ( ( elem.ownerDocument || elem ) != document ) {
      setDocument( elem );
    }
  
    var fn = Expr.attrHandle[ name.toLowerCase() ],
  
      // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
        fn( elem, name, !documentIsHTML ) :
        undefined;
  
    return val !== undefined ?
      val :
      support.attributes || !documentIsHTML ?
        elem.getAttribute( name ) :
        ( val = elem.getAttributeNode( name ) ) && val.specified ?
          val.value :
          null;
  };
  
  Sizzle.escape = function( sel ) {
    return ( sel + "" ).replace( rcssescape, fcssescape );
  };
  
  Sizzle.error = function( msg ) {
    throw new Error( "Syntax error, unrecognized expression: " + msg );
  };
  
  /**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
  Sizzle.uniqueSort = function( results ) {
    var elem,
      duplicates = [],
      j = 0,
      i = 0;
  
    // Unless we *know* we can detect duplicates, assume their presence
    hasDuplicate = !support.detectDuplicates;
    sortInput = !support.sortStable && results.slice( 0 );
    results.sort( sortOrder );
  
    if ( hasDuplicate ) {
      while ( ( elem = results[ i++ ] ) ) {
        if ( elem === results[ i ] ) {
          j = duplicates.push( i );
        }
      }
      while ( j-- ) {
        results.splice( duplicates[ j ], 1 );
      }
    }
  
    // Clear input after sorting to release objects
    // See https://github.com/jquery/sizzle/pull/225
    sortInput = null;
  
    return results;
  };
  
  /**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
  getText = Sizzle.getText = function( elem ) {
    var node,
      ret = "",
      i = 0,
      nodeType = elem.nodeType;
  
    if ( !nodeType ) {
  
      // If no nodeType, this is expected to be an array
      while ( ( node = elem[ i++ ] ) ) {
  
        // Do not traverse comment nodes
        ret += getText( node );
      }
    } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
  
      // Use textContent for elements
      // innerText usage removed for consistency of new lines (jQuery #11153)
      if ( typeof elem.textContent === "string" ) {
        return elem.textContent;
      } else {
  
        // Traverse its children
        for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
          ret += getText( elem );
        }
      }
    } else if ( nodeType === 3 || nodeType === 4 ) {
      return elem.nodeValue;
    }
  
    // Do not include comment or processing instruction nodes
  
    return ret;
  };
  
  Expr = Sizzle.selectors = {
  
    // Can be adjusted by the user
    cacheLength: 50,
  
    createPseudo: markFunction,
  
    match: matchExpr,
  
    attrHandle: {},
  
    find: {},
  
    relative: {
      ">": { dir: "parentNode", first: true },
      " ": { dir: "parentNode" },
      "+": { dir: "previousSibling", first: true },
      "~": { dir: "previousSibling" }
    },
  
    preFilter: {
      "ATTR": function( match ) {
        match[ 1 ] = match[ 1 ].replace( runescape, funescape );
  
        // Move the given value to match[3] whether quoted or unquoted
        match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
          match[ 5 ] || "" ).replace( runescape, funescape );
  
        if ( match[ 2 ] === "~=" ) {
          match[ 3 ] = " " + match[ 3 ] + " ";
        }
  
        return match.slice( 0, 4 );
      },
  
      "CHILD": function( match ) {
  
        /* matches from matchExpr["CHILD"]
          1 type (only|nth|...)
          2 what (child|of-type)
          3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          4 xn-component of xn+y argument ([+-]?\d*n|)
          5 sign of xn-component
          6 x of xn-component
          7 sign of y-component
          8 y of y-component
        */
        match[ 1 ] = match[ 1 ].toLowerCase();
  
        if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {
  
          // nth-* requires argument
          if ( !match[ 3 ] ) {
            Sizzle.error( match[ 0 ] );
          }
  
          // numeric x and y parameters for Expr.filter.CHILD
          // remember that false/true cast respectively to 0/1
          match[ 4 ] = +( match[ 4 ] ?
            match[ 5 ] + ( match[ 6 ] || 1 ) :
            2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
          match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );
  
          // other types prohibit arguments
        } else if ( match[ 3 ] ) {
          Sizzle.error( match[ 0 ] );
        }
  
        return match;
      },
  
      "PSEUDO": function( match ) {
        var excess,
          unquoted = !match[ 6 ] && match[ 2 ];
  
        if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
          return null;
        }
  
        // Accept quoted arguments as-is
        if ( match[ 3 ] ) {
          match[ 2 ] = match[ 4 ] || match[ 5 ] || "";
  
        // Strip excess characters from unquoted arguments
        } else if ( unquoted && rpseudo.test( unquoted ) &&
  
          // Get excess from tokenize (recursively)
          ( excess = tokenize( unquoted, true ) ) &&
  
          // advance to the next closing parenthesis
          ( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {
  
          // excess is a negative index
          match[ 0 ] = match[ 0 ].slice( 0, excess );
          match[ 2 ] = unquoted.slice( 0, excess );
        }
  
        // Return only captures needed by the pseudo filter method (type and argument)
        return match.slice( 0, 3 );
      }
    },
  
    filter: {
  
      "TAG": function( nodeNameSelector ) {
        var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
        return nodeNameSelector === "*" ?
          function() {
            return true;
          } :
          function( elem ) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
      },
  
      "CLASS": function( className ) {
        var pattern = classCache[ className + " " ];
  
        return pattern ||
          ( pattern = new RegExp( "(^|" + whitespace +
            ")" + className + "(" + whitespace + "|$)" ) ) && classCache(
              className, function( elem ) {
                return pattern.test(
                  typeof elem.className === "string" && elem.className ||
                  typeof elem.getAttribute !== "undefined" &&
                    elem.getAttribute( "class" ) ||
                  ""
                );
          } );
      },
  
      "ATTR": function( name, operator, check ) {
        return function( elem ) {
          var result = Sizzle.attr( elem, name );
  
          if ( result == null ) {
            return operator === "!=";
          }
          if ( !operator ) {
            return true;
          }
  
          result += "";
  
          /* eslint-disable max-len */
  
          return operator === "=" ? result === check :
            operator === "!=" ? result !== check :
            operator === "^=" ? check && result.indexOf( check ) === 0 :
            operator === "*=" ? check && result.indexOf( check ) > -1 :
            operator === "$=" ? check && result.slice( -check.length ) === check :
            operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
            operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
            false;
          /* eslint-enable max-len */
  
        };
      },
  
      "CHILD": function( type, what, _argument, first, last ) {
        var simple = type.slice( 0, 3 ) !== "nth",
          forward = type.slice( -4 ) !== "last",
          ofType = what === "of-type";
  
        return first === 1 && last === 0 ?
  
          // Shortcut for :nth-*(n)
          function( elem ) {
            return !!elem.parentNode;
          } :
  
          function( elem, _context, xml ) {
            var cache, uniqueCache, outerCache, node, nodeIndex, start,
              dir = simple !== forward ? "nextSibling" : "previousSibling",
              parent = elem.parentNode,
              name = ofType && elem.nodeName.toLowerCase(),
              useCache = !xml && !ofType,
              diff = false;
  
            if ( parent ) {
  
              // :(first|last|only)-(child|of-type)
              if ( simple ) {
                while ( dir ) {
                  node = elem;
                  while ( ( node = node[ dir ] ) ) {
                    if ( ofType ?
                      node.nodeName.toLowerCase() === name :
                      node.nodeType === 1 ) {
  
                      return false;
                    }
                  }
  
                  // Reverse direction for :only-* (if we haven't yet done so)
                  start = dir = type === "only" && !start && "nextSibling";
                }
                return true;
              }
  
              start = [ forward ? parent.firstChild : parent.lastChild ];
  
              // non-xml :nth-child(...) stores cache data on `parent`
              if ( forward && useCache ) {
  
                // Seek `elem` from a previously-cached index
  
                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[ expando ] || ( node[ expando ] = {} );
  
                // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)
                uniqueCache = outerCache[ node.uniqueID ] ||
                  ( outerCache[ node.uniqueID ] = {} );
  
                cache = uniqueCache[ type ] || [];
                nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
                diff = nodeIndex && cache[ 2 ];
                node = nodeIndex && parent.childNodes[ nodeIndex ];
  
                while ( ( node = ++nodeIndex && node && node[ dir ] ||
  
                  // Fallback to seeking `elem` from the start
                  ( diff = nodeIndex = 0 ) || start.pop() ) ) {
  
                  // When found, cache indexes on `parent` and break
                  if ( node.nodeType === 1 && ++diff && node === elem ) {
                    uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
                    break;
                  }
                }
  
              } else {
  
                // Use previously-cached element index if available
                if ( useCache ) {
  
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[ expando ] || ( node[ expando ] = {} );
  
                  // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)
                  uniqueCache = outerCache[ node.uniqueID ] ||
                    ( outerCache[ node.uniqueID ] = {} );
  
                  cache = uniqueCache[ type ] || [];
                  nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
                  diff = nodeIndex;
                }
  
                // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                if ( diff === false ) {
  
                  // Use the same loop as above to seek `elem` from the start
                  while ( ( node = ++nodeIndex && node && node[ dir ] ||
                    ( diff = nodeIndex = 0 ) || start.pop() ) ) {
  
                    if ( ( ofType ?
                      node.nodeName.toLowerCase() === name :
                      node.nodeType === 1 ) &&
                      ++diff ) {
  
                      // Cache the index of each encountered element
                      if ( useCache ) {
                        outerCache = node[ expando ] ||
                          ( node[ expando ] = {} );
  
                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache = outerCache[ node.uniqueID ] ||
                          ( outerCache[ node.uniqueID ] = {} );
  
                        uniqueCache[ type ] = [ dirruns, diff ];
                      }
  
                      if ( node === elem ) {
                        break;
                      }
                    }
                  }
                }
              }
  
              // Incorporate the offset, then check against cycle size
              diff -= last;
              return diff === first || ( diff % first === 0 && diff / first >= 0 );
            }
          };
      },
  
      "PSEUDO": function( pseudo, argument ) {
  
        // pseudo-class names are case-insensitive
        // http://www.w3.org/TR/selectors/#pseudo-classes
        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
        // Remember that setFilters inherits from pseudos
        var args,
          fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
            Sizzle.error( "unsupported pseudo: " + pseudo );
  
        // The user may use createPseudo to indicate that
        // arguments are needed to create the filter function
        // just as Sizzle does
        if ( fn[ expando ] ) {
          return fn( argument );
        }
  
        // But maintain support for old signatures
        if ( fn.length > 1 ) {
          args = [ pseudo, pseudo, "", argument ];
          return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
            markFunction( function( seed, matches ) {
              var idx,
                matched = fn( seed, argument ),
                i = matched.length;
              while ( i-- ) {
                idx = indexOf( seed, matched[ i ] );
                seed[ idx ] = !( matches[ idx ] = matched[ i ] );
              }
            } ) :
            function( elem ) {
              return fn( elem, 0, args );
            };
        }
  
        return fn;
      }
    },
  
    pseudos: {
  
      // Potentially complex pseudos
      "not": markFunction( function( selector ) {
  
        // Trim the selector passed to compile
        // to avoid treating leading and trailing
        // spaces as combinators
        var input = [],
          results = [],
          matcher = compile( selector.replace( rtrim, "$1" ) );
  
        return matcher[ expando ] ?
          markFunction( function( seed, matches, _context, xml ) {
            var elem,
              unmatched = matcher( seed, null, xml, [] ),
              i = seed.length;
  
            // Match elements unmatched by `matcher`
            while ( i-- ) {
              if ( ( elem = unmatched[ i ] ) ) {
                seed[ i ] = !( matches[ i ] = elem );
              }
            }
          } ) :
          function( elem, _context, xml ) {
            input[ 0 ] = elem;
            matcher( input, null, xml, results );
  
            // Don't keep the element (issue #299)
            input[ 0 ] = null;
            return !results.pop();
          };
      } ),
  
      "has": markFunction( function( selector ) {
        return function( elem ) {
          return Sizzle( selector, elem ).length > 0;
        };
      } ),
  
      "contains": markFunction( function( text ) {
        text = text.replace( runescape, funescape );
        return function( elem ) {
          return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
        };
      } ),
  
      // "Whether an element is represented by a :lang() selector
      // is based solely on the element's language value
      // being equal to the identifier C,
      // or beginning with the identifier C immediately followed by "-".
      // The matching of C against the element's language value is performed case-insensitively.
      // The identifier C does not have to be a valid language name."
      // http://www.w3.org/TR/selectors/#lang-pseudo
      "lang": markFunction( function( lang ) {
  
        // lang value must be a valid identifier
        if ( !ridentifier.test( lang || "" ) ) {
          Sizzle.error( "unsupported lang: " + lang );
        }
        lang = lang.replace( runescape, funescape ).toLowerCase();
        return function( elem ) {
          var elemLang;
          do {
            if ( ( elemLang = documentIsHTML ?
              elem.lang :
              elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {
  
              elemLang = elemLang.toLowerCase();
              return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
            }
          } while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
          return false;
        };
      } ),
  
      // Miscellaneous
      "target": function( elem ) {
        var hash = window.location && window.location.hash;
        return hash && hash.slice( 1 ) === elem.id;
      },
  
      "root": function( elem ) {
        return elem === docElem;
      },
  
      "focus": function( elem ) {
        return elem === document.activeElement &&
          ( !document.hasFocus || document.hasFocus() ) &&
          !!( elem.type || elem.href || ~elem.tabIndex );
      },
  
      // Boolean properties
      "enabled": createDisabledPseudo( false ),
      "disabled": createDisabledPseudo( true ),
  
      "checked": function( elem ) {
  
        // In CSS3, :checked should return both checked and selected elements
        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
        var nodeName = elem.nodeName.toLowerCase();
        return ( nodeName === "input" && !!elem.checked ) ||
          ( nodeName === "option" && !!elem.selected );
      },
  
      "selected": function( elem ) {
  
        // Accessing this property makes selected-by-default
        // options in Safari work properly
        if ( elem.parentNode ) {
          // eslint-disable-next-line no-unused-expressions
          elem.parentNode.selectedIndex;
        }
  
        return elem.selected === true;
      },
  
      // Contents
      "empty": function( elem ) {
  
        // http://www.w3.org/TR/selectors/#empty-pseudo
        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
        //   but not by others (comment: 8; processing instruction: 7; etc.)
        // nodeType < 6 works because attributes (2) do not appear as children
        for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
          if ( elem.nodeType < 6 ) {
            return false;
          }
        }
        return true;
      },
  
      "parent": function( elem ) {
        return !Expr.pseudos[ "empty" ]( elem );
      },
  
      // Element/input types
      "header": function( elem ) {
        return rheader.test( elem.nodeName );
      },
  
      "input": function( elem ) {
        return rinputs.test( elem.nodeName );
      },
  
      "button": function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === "button" || name === "button";
      },
  
      "text": function( elem ) {
        var attr;
        return elem.nodeName.toLowerCase() === "input" &&
          elem.type === "text" &&
  
          // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          ( ( attr = elem.getAttribute( "type" ) ) == null ||
            attr.toLowerCase() === "text" );
      },
  
      // Position-in-collection
      "first": createPositionalPseudo( function() {
        return [ 0 ];
      } ),
  
      "last": createPositionalPseudo( function( _matchIndexes, length ) {
        return [ length - 1 ];
      } ),
  
      "eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
        return [ argument < 0 ? argument + length : argument ];
      } ),
  
      "even": createPositionalPseudo( function( matchIndexes, length ) {
        var i = 0;
        for ( ; i < length; i += 2 ) {
          matchIndexes.push( i );
        }
        return matchIndexes;
      } ),
  
      "odd": createPositionalPseudo( function( matchIndexes, length ) {
        var i = 1;
        for ( ; i < length; i += 2 ) {
          matchIndexes.push( i );
        }
        return matchIndexes;
      } ),
  
      "lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
        var i = argument < 0 ?
          argument + length :
          argument > length ?
            length :
            argument;
        for ( ; --i >= 0; ) {
          matchIndexes.push( i );
        }
        return matchIndexes;
      } ),
  
      "gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
        var i = argument < 0 ? argument + length : argument;
        for ( ; ++i < length; ) {
          matchIndexes.push( i );
        }
        return matchIndexes;
      } )
    }
  };
  
  Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];
  
  // Add button/input type pseudos
  for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
    Expr.pseudos[ i ] = createInputPseudo( i );
  }
  for ( i in { submit: true, reset: true } ) {
    Expr.pseudos[ i ] = createButtonPseudo( i );
  }
  
  // Easy API for creating new setFilters
  function setFilters() {}
  setFilters.prototype = Expr.filters = Expr.pseudos;
  Expr.setFilters = new setFilters();
  
  tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
    var matched, match, tokens, type,
      soFar, groups, preFilters,
      cached = tokenCache[ selector + " " ];
  
    if ( cached ) {
      return parseOnly ? 0 : cached.slice( 0 );
    }
  
    soFar = selector;
    groups = [];
    preFilters = Expr.preFilter;
  
    while ( soFar ) {
  
      // Comma and first run
      if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
        if ( match ) {
  
          // Don't consume trailing commas as valid
          soFar = soFar.slice( match[ 0 ].length ) || soFar;
        }
        groups.push( ( tokens = [] ) );
      }
  
      matched = false;
  
      // Combinators
      if ( ( match = rcombinators.exec( soFar ) ) ) {
        matched = match.shift();
        tokens.push( {
          value: matched,
  
          // Cast descendant combinators to space
          type: match[ 0 ].replace( rtrim, " " )
        } );
        soFar = soFar.slice( matched.length );
      }
  
      // Filters
      for ( type in Expr.filter ) {
        if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
          ( match = preFilters[ type ]( match ) ) ) ) {
          matched = match.shift();
          tokens.push( {
            value: matched,
            type: type,
            matches: match
          } );
          soFar = soFar.slice( matched.length );
        }
      }
  
      if ( !matched ) {
        break;
      }
    }
  
    // Return the length of the invalid excess
    // if we're just parsing
    // Otherwise, throw an error or return tokens
    return parseOnly ?
      soFar.length :
      soFar ?
        Sizzle.error( selector ) :
  
        // Cache the tokens
        tokenCache( selector, groups ).slice( 0 );
  };
  
  function toSelector( tokens ) {
    var i = 0,
      len = tokens.length,
      selector = "";
    for ( ; i < len; i++ ) {
      selector += tokens[ i ].value;
    }
    return selector;
  }
  
  function addCombinator( matcher, combinator, base ) {
    var dir = combinator.dir,
      skip = combinator.next,
      key = skip || dir,
      checkNonElements = base && key === "parentNode",
      doneName = done++;
  
    return combinator.first ?
  
      // Check against closest ancestor/preceding element
      function( elem, context, xml ) {
        while ( ( elem = elem[ dir ] ) ) {
          if ( elem.nodeType === 1 || checkNonElements ) {
            return matcher( elem, context, xml );
          }
        }
        return false;
      } :
  
      // Check against all ancestor/preceding elements
      function( elem, context, xml ) {
        var oldCache, uniqueCache, outerCache,
          newCache = [ dirruns, doneName ];
  
        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
        if ( xml ) {
          while ( ( elem = elem[ dir ] ) ) {
            if ( elem.nodeType === 1 || checkNonElements ) {
              if ( matcher( elem, context, xml ) ) {
                return true;
              }
            }
          }
        } else {
          while ( ( elem = elem[ dir ] ) ) {
            if ( elem.nodeType === 1 || checkNonElements ) {
              outerCache = elem[ expando ] || ( elem[ expando ] = {} );
  
              // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)
              uniqueCache = outerCache[ elem.uniqueID ] ||
                ( outerCache[ elem.uniqueID ] = {} );
  
              if ( skip && skip === elem.nodeName.toLowerCase() ) {
                elem = elem[ dir ] || elem;
              } else if ( ( oldCache = uniqueCache[ key ] ) &&
                oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
  
                // Assign to newCache so results back-propagate to previous elements
                return ( newCache[ 2 ] = oldCache[ 2 ] );
              } else {
  
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[ key ] = newCache;
  
                // A match means we're done; a fail means we have to keep checking
                if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
                  return true;
                }
              }
            }
          }
        }
        return false;
      };
  }
  
  function elementMatcher( matchers ) {
    return matchers.length > 1 ?
      function( elem, context, xml ) {
        var i = matchers.length;
        while ( i-- ) {
          if ( !matchers[ i ]( elem, context, xml ) ) {
            return false;
          }
        }
        return true;
      } :
      matchers[ 0 ];
  }
  
  function multipleContexts( selector, contexts, results ) {
    var i = 0,
      len = contexts.length;
    for ( ; i < len; i++ ) {
      Sizzle( selector, contexts[ i ], results );
    }
    return results;
  }
  
  function condense( unmatched, map, filter, context, xml ) {
    var elem,
      newUnmatched = [],
      i = 0,
      len = unmatched.length,
      mapped = map != null;
  
    for ( ; i < len; i++ ) {
      if ( ( elem = unmatched[ i ] ) ) {
        if ( !filter || filter( elem, context, xml ) ) {
          newUnmatched.push( elem );
          if ( mapped ) {
            map.push( i );
          }
        }
      }
    }
  
    return newUnmatched;
  }
  
  function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
    if ( postFilter && !postFilter[ expando ] ) {
      postFilter = setMatcher( postFilter );
    }
    if ( postFinder && !postFinder[ expando ] ) {
      postFinder = setMatcher( postFinder, postSelector );
    }
    return markFunction( function( seed, results, context, xml ) {
      var temp, i, elem,
        preMap = [],
        postMap = [],
        preexisting = results.length,
  
        // Get initial elements from seed or context
        elems = seed || multipleContexts(
          selector || "*",
          context.nodeType ? [ context ] : context,
          []
        ),
  
        // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && ( seed || !selector ) ?
          condense( elems, preMap, preFilter, context, xml ) :
          elems,
  
        matcherOut = matcher ?
  
          // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
          postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
  
            // ...intermediate processing is necessary
            [] :
  
            // ...otherwise use results directly
            results :
          matcherIn;
  
      // Find primary matches
      if ( matcher ) {
        matcher( matcherIn, matcherOut, context, xml );
      }
  
      // Apply postFilter
      if ( postFilter ) {
        temp = condense( matcherOut, postMap );
        postFilter( temp, [], context, xml );
  
        // Un-match failing elements by moving them back to matcherIn
        i = temp.length;
        while ( i-- ) {
          if ( ( elem = temp[ i ] ) ) {
            matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
          }
        }
      }
  
      if ( seed ) {
        if ( postFinder || preFilter ) {
          if ( postFinder ) {
  
            // Get the final matcherOut by condensing this intermediate into postFinder contexts
            temp = [];
            i = matcherOut.length;
            while ( i-- ) {
              if ( ( elem = matcherOut[ i ] ) ) {
  
                // Restore matcherIn since elem is not yet a final match
                temp.push( ( matcherIn[ i ] = elem ) );
              }
            }
            postFinder( null, ( matcherOut = [] ), temp, xml );
          }
  
          // Move matched elements from seed to results to keep them synchronized
          i = matcherOut.length;
          while ( i-- ) {
            if ( ( elem = matcherOut[ i ] ) &&
              ( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {
  
              seed[ temp ] = !( results[ temp ] = elem );
            }
          }
        }
  
      // Add elements to results, through postFinder if defined
      } else {
        matcherOut = condense(
          matcherOut === results ?
            matcherOut.splice( preexisting, matcherOut.length ) :
            matcherOut
        );
        if ( postFinder ) {
          postFinder( null, results, matcherOut, xml );
        } else {
          push.apply( results, matcherOut );
        }
      }
    } );
  }
  
  function matcherFromTokens( tokens ) {
    var checkContext, matcher, j,
      len = tokens.length,
      leadingRelative = Expr.relative[ tokens[ 0 ].type ],
      implicitRelative = leadingRelative || Expr.relative[ " " ],
      i = leadingRelative ? 1 : 0,
  
      // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator( function( elem ) {
        return elem === checkContext;
      }, implicitRelative, true ),
      matchAnyContext = addCombinator( function( elem ) {
        return indexOf( checkContext, elem ) > -1;
      }, implicitRelative, true ),
      matchers = [ function( elem, context, xml ) {
        var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
          ( checkContext = context ).nodeType ?
            matchContext( elem, context, xml ) :
            matchAnyContext( elem, context, xml ) );
  
        // Avoid hanging onto element (issue #299)
        checkContext = null;
        return ret;
      } ];
  
    for ( ; i < len; i++ ) {
      if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
        matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
      } else {
        matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );
  
        // Return special upon seeing a positional matcher
        if ( matcher[ expando ] ) {
  
          // Find the next relative operator (if any) for proper handling
          j = ++i;
          for ( ; j < len; j++ ) {
            if ( Expr.relative[ tokens[ j ].type ] ) {
              break;
            }
          }
          return setMatcher(
            i > 1 && elementMatcher( matchers ),
            i > 1 && toSelector(
  
            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens
              .slice( 0, i - 1 )
              .concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
            ).replace( rtrim, "$1" ),
            matcher,
            i < j && matcherFromTokens( tokens.slice( i, j ) ),
            j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
            j < len && toSelector( tokens )
          );
        }
        matchers.push( matcher );
      }
    }
  
    return elementMatcher( matchers );
  }
  
  function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
    var bySet = setMatchers.length > 0,
      byElement = elementMatchers.length > 0,
      superMatcher = function( seed, context, xml, results, outermost ) {
        var elem, j, matcher,
          matchedCount = 0,
          i = "0",
          unmatched = seed && [],
          setMatched = [],
          contextBackup = outermostContext,
  
          // We must always have either seed elements or outermost context
          elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),
  
          // Use integer dirruns iff this is the outermost matcher
          dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
          len = elems.length;
  
        if ( outermost ) {
  
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          outermostContext = context == document || context || outermost;
        }
  
        // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
        for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
          if ( byElement && elem ) {
            j = 0;
  
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if ( !context && elem.ownerDocument != document ) {
              setDocument( elem );
              xml = !documentIsHTML;
            }
            while ( ( matcher = elementMatchers[ j++ ] ) ) {
              if ( matcher( elem, context || document, xml ) ) {
                results.push( elem );
                break;
              }
            }
            if ( outermost ) {
              dirruns = dirrunsUnique;
            }
          }
  
          // Track unmatched elements for set filters
          if ( bySet ) {
  
            // They will have gone through all possible matchers
            if ( ( elem = !matcher && elem ) ) {
              matchedCount--;
            }
  
            // Lengthen the array for every element, matched or not
            if ( seed ) {
              unmatched.push( elem );
            }
          }
        }
  
        // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.
        matchedCount += i;
  
        // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.
        if ( bySet && i !== matchedCount ) {
          j = 0;
          while ( ( matcher = setMatchers[ j++ ] ) ) {
            matcher( unmatched, setMatched, context, xml );
          }
  
          if ( seed ) {
  
            // Reintegrate element matches to eliminate the need for sorting
            if ( matchedCount > 0 ) {
              while ( i-- ) {
                if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
                  setMatched[ i ] = pop.call( results );
                }
              }
            }
  
            // Discard index placeholder values to get only actual matches
            setMatched = condense( setMatched );
          }
  
          // Add matches to results
          push.apply( results, setMatched );
  
          // Seedless set matches succeeding multiple successful matchers stipulate sorting
          if ( outermost && !seed && setMatched.length > 0 &&
            ( matchedCount + setMatchers.length ) > 1 ) {
  
            Sizzle.uniqueSort( results );
          }
        }
  
        // Override manipulation of globals by nested matchers
        if ( outermost ) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }
  
        return unmatched;
      };
  
    return bySet ?
      markFunction( superMatcher ) :
      superMatcher;
  }
  
  compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
    var i,
      setMatchers = [],
      elementMatchers = [],
      cached = compilerCache[ selector + " " ];
  
    if ( !cached ) {
  
      // Generate a function of recursive functions that can be used to check each element
      if ( !match ) {
        match = tokenize( selector );
      }
      i = match.length;
      while ( i-- ) {
        cached = matcherFromTokens( match[ i ] );
        if ( cached[ expando ] ) {
          setMatchers.push( cached );
        } else {
          elementMatchers.push( cached );
        }
      }
  
      // Cache the compiled function
      cached = compilerCache(
        selector,
        matcherFromGroupMatchers( elementMatchers, setMatchers )
      );
  
      // Save selector and tokenization
      cached.selector = selector;
    }
    return cached;
  };
  
  /**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
  select = Sizzle.select = function( selector, context, results, seed ) {
    var i, tokens, token, type, find,
      compiled = typeof selector === "function" && selector,
      match = !seed && tokenize( ( selector = compiled.selector || selector ) );
  
    results = results || [];
  
    // Try to minimize operations if there is only one selector in the list and no seed
    // (the latter of which guarantees us context)
    if ( match.length === 1 ) {
  
      // Reduce context if the leading compound selector is an ID
      tokens = match[ 0 ] = match[ 0 ].slice( 0 );
      if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
        context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {
  
        context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
          .replace( runescape, funescape ), context ) || [] )[ 0 ];
        if ( !context ) {
          return results;
  
        // Precompiled matchers will still verify ancestry, so step up a level
        } else if ( compiled ) {
          context = context.parentNode;
        }
  
        selector = selector.slice( tokens.shift().value.length );
      }
  
      // Fetch a seed set for right-to-left matching
      i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
      while ( i-- ) {
        token = tokens[ i ];
  
        // Abort if we hit a combinator
        if ( Expr.relative[ ( type = token.type ) ] ) {
          break;
        }
        if ( ( find = Expr.find[ type ] ) ) {
  
          // Search, expanding context for leading sibling combinators
          if ( ( seed = find(
            token.matches[ 0 ].replace( runescape, funescape ),
            rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
              context
          ) ) ) {
  
            // If seed is empty or no tokens remain, we can return early
            tokens.splice( i, 1 );
            selector = seed.length && toSelector( tokens );
            if ( !selector ) {
              push.apply( results, seed );
              return results;
            }
  
            break;
          }
        }
      }
    }
  
    // Compile and execute a filtering function if one is not provided
    // Provide `match` to avoid retokenization if we modified the selector above
    ( compiled || compile( selector, match ) )(
      seed,
      context,
      !documentIsHTML,
      results,
      !context || rsibling.test( selector ) && testContext( context.parentNode ) || context
    );
    return results;
  };
  
  // One-time assignments
  
  // Sort stability
  support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;
  
  // Support: Chrome 14-35+
  // Always assume duplicates if they aren't passed to the comparison function
  support.detectDuplicates = !!hasDuplicate;
  
  // Initialize against the default document
  setDocument();
  
  // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
  // Detached nodes confoundingly follow *each other*
  support.sortDetached = assert( function( el ) {
  
    // Should return 1, but returns 4 (following)
    return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
  } );
  
  // Support: IE<8
  // Prevent attribute/property "interpolation"
  // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
  if ( !assert( function( el ) {
    el.innerHTML = "<a href='#'></a>";
    return el.firstChild.getAttribute( "href" ) === "#";
  } ) ) {
    addHandle( "type|href|height|width", function( elem, name, isXML ) {
      if ( !isXML ) {
        return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
      }
    } );
  }
  
  // Support: IE<9
  // Use defaultValue in place of getAttribute("value")
  if ( !support.attributes || !assert( function( el ) {
    el.innerHTML = "<input/>";
    el.firstChild.setAttribute( "value", "" );
    return el.firstChild.getAttribute( "value" ) === "";
  } ) ) {
    addHandle( "value", function( elem, _name, isXML ) {
      if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
        return elem.defaultValue;
      }
    } );
  }
  
  // Support: IE<9
  // Use getAttributeNode to fetch booleans when getAttribute lies
  if ( !assert( function( el ) {
    return el.getAttribute( "disabled" ) == null;
  } ) ) {
    addHandle( booleans, function( elem, name, isXML ) {
      var val;
      if ( !isXML ) {
        return elem[ name ] === true ? name.toLowerCase() :
          ( val = elem.getAttributeNode( name ) ) && val.specified ?
            val.value :
            null;
      }
    } );
  }
  
  return Sizzle;
  
  } )( window );
  
  
  
  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  
  // Deprecated
  jQuery.expr[ ":" ] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;
  
  
  
  
  var dir = function( elem, dir, until ) {
    var matched = [],
      truncate = until !== undefined;
  
    while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
      if ( elem.nodeType === 1 ) {
        if ( truncate && jQuery( elem ).is( until ) ) {
          break;
        }
        matched.push( elem );
      }
    }
    return matched;
  };
  
  
  var siblings = function( n, elem ) {
    var matched = [];
  
    for ( ; n; n = n.nextSibling ) {
      if ( n.nodeType === 1 && n !== elem ) {
        matched.push( n );
      }
    }
  
    return matched;
  };
  
  
  var rneedsContext = jQuery.expr.match.needsContext;
  
  
  
  function nodeName( elem, name ) {
  
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  
  };
  var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );
  
  
  
  // Implement the identical functionality for filter and not
  function winnow( elements, qualifier, not ) {
    if ( isFunction( qualifier ) ) {
      return jQuery.grep( elements, function( elem, i ) {
        return !!qualifier.call( elem, i, elem ) !== not;
      } );
    }
  
    // Single element
    if ( qualifier.nodeType ) {
      return jQuery.grep( elements, function( elem ) {
        return ( elem === qualifier ) !== not;
      } );
    }
  
    // Arraylike of elements (jQuery, arguments, Array)
    if ( typeof qualifier !== "string" ) {
      return jQuery.grep( elements, function( elem ) {
        return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
      } );
    }
  
    // Filtered directly for both simple and complex selectors
    return jQuery.filter( qualifier, elements, not );
  }
  
  jQuery.filter = function( expr, elems, not ) {
    var elem = elems[ 0 ];
  
    if ( not ) {
      expr = ":not(" + expr + ")";
    }
  
    if ( elems.length === 1 && elem.nodeType === 1 ) {
      return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
    }
  
    return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
      return elem.nodeType === 1;
    } ) );
  };
  
  jQuery.fn.extend( {
    find: function( selector ) {
      var i, ret,
        len = this.length,
        self = this;
  
      if ( typeof selector !== "string" ) {
        return this.pushStack( jQuery( selector ).filter( function() {
          for ( i = 0; i < len; i++ ) {
            if ( jQuery.contains( self[ i ], this ) ) {
              return true;
            }
          }
        } ) );
      }
  
      ret = this.pushStack( [] );
  
      for ( i = 0; i < len; i++ ) {
        jQuery.find( selector, self[ i ], ret );
      }
  
      return len > 1 ? jQuery.uniqueSort( ret ) : ret;
    },
    filter: function( selector ) {
      return this.pushStack( winnow( this, selector || [], false ) );
    },
    not: function( selector ) {
      return this.pushStack( winnow( this, selector || [], true ) );
    },
    is: function( selector ) {
      return !!winnow(
        this,
  
        // If this is a positional/relative selector, check membership in the returned set
        // so $("p:first").is("p:last") won't return true for a doc with two "p".
        typeof selector === "string" && rneedsContext.test( selector ) ?
          jQuery( selector ) :
          selector || [],
        false
      ).length;
    }
  } );
  
  
  // Initialize a jQuery object
  
  
  // A central reference to the root jQuery(document)
  var rootjQuery,
  
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
  
    init = jQuery.fn.init = function( selector, context, root ) {
      var match, elem;
  
      // HANDLE: $(""), $(null), $(undefined), $(false)
      if ( !selector ) {
        return this;
      }
  
      // Method init() accepts an alternate rootjQuery
      // so migrate can support jQuery.sub (gh-2101)
      root = root || rootjQuery;
  
      // Handle HTML strings
      if ( typeof selector === "string" ) {
        if ( selector[ 0 ] === "<" &&
          selector[ selector.length - 1 ] === ">" &&
          selector.length >= 3 ) {
  
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [ null, selector, null ];
  
        } else {
          match = rquickExpr.exec( selector );
        }
  
        // Match html or make sure no context is specified for #id
        if ( match && ( match[ 1 ] || !context ) ) {
  
          // HANDLE: $(html) -> $(array)
          if ( match[ 1 ] ) {
            context = context instanceof jQuery ? context[ 0 ] : context;
  
            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge( this, jQuery.parseHTML(
              match[ 1 ],
              context && context.nodeType ? context.ownerDocument || context : document,
              true
            ) );
  
            // HANDLE: $(html, props)
            if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
              for ( match in context ) {
  
                // Properties of context are called as methods if possible
                if ( isFunction( this[ match ] ) ) {
                  this[ match ]( context[ match ] );
  
                // ...and otherwise set as attributes
                } else {
                  this.attr( match, context[ match ] );
                }
              }
            }
  
            return this;
  
          // HANDLE: $(#id)
          } else {
            elem = document.getElementById( match[ 2 ] );
  
            if ( elem ) {
  
              // Inject the element directly into the jQuery object
              this[ 0 ] = elem;
              this.length = 1;
            }
            return this;
          }
  
        // HANDLE: $(expr, $(...))
        } else if ( !context || context.jquery ) {
          return ( context || root ).find( selector );
  
        // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor( context ).find( selector );
        }
  
      // HANDLE: $(DOMElement)
      } else if ( selector.nodeType ) {
        this[ 0 ] = selector;
        this.length = 1;
        return this;
  
      // HANDLE: $(function)
      // Shortcut for document ready
      } else if ( isFunction( selector ) ) {
        return root.ready !== undefined ?
          root.ready( selector ) :
  
          // Execute immediately if ready is not present
          selector( jQuery );
      }
  
      return jQuery.makeArray( selector, this );
    };
  
  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;
  
  // Initialize central reference
  rootjQuery = jQuery( document );
  
  
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
  
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };
  
  jQuery.fn.extend( {
    has: function( target ) {
      var targets = jQuery( target, this ),
        l = targets.length;
  
      return this.filter( function() {
        var i = 0;
        for ( ; i < l; i++ ) {
          if ( jQuery.contains( this, targets[ i ] ) ) {
            return true;
          }
        }
      } );
    },
  
    closest: function( selectors, context ) {
      var cur,
        i = 0,
        l = this.length,
        matched = [],
        targets = typeof selectors !== "string" && jQuery( selectors );
  
      // Positional selectors never match, since there's no _selection_ context
      if ( !rneedsContext.test( selectors ) ) {
        for ( ; i < l; i++ ) {
          for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
  
            // Always skip document fragments
            if ( cur.nodeType < 11 && ( targets ?
              targets.index( cur ) > -1 :
  
              // Don't pass non-elements to Sizzle
              cur.nodeType === 1 &&
                jQuery.find.matchesSelector( cur, selectors ) ) ) {
  
              matched.push( cur );
              break;
            }
          }
        }
      }
  
      return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
    },
  
    // Determine the position of an element within the set
    index: function( elem ) {
  
      // No argument, return index in parent
      if ( !elem ) {
        return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
      }
  
      // Index in selector
      if ( typeof elem === "string" ) {
        return indexOf.call( jQuery( elem ), this[ 0 ] );
      }
  
      // Locate the position of the desired element
      return indexOf.call( this,
  
        // If it receives a jQuery object, the first element is used
        elem.jquery ? elem[ 0 ] : elem
      );
    },
  
    add: function( selector, context ) {
      return this.pushStack(
        jQuery.uniqueSort(
          jQuery.merge( this.get(), jQuery( selector, context ) )
        )
      );
    },
  
    addBack: function( selector ) {
      return this.add( selector == null ?
        this.prevObject : this.prevObject.filter( selector )
      );
    }
  } );
  
  function sibling( cur, dir ) {
    while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
    return cur;
  }
  
  jQuery.each( {
    parent: function( elem ) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function( elem ) {
      return dir( elem, "parentNode" );
    },
    parentsUntil: function( elem, _i, until ) {
      return dir( elem, "parentNode", until );
    },
    next: function( elem ) {
      return sibling( elem, "nextSibling" );
    },
    prev: function( elem ) {
      return sibling( elem, "previousSibling" );
    },
    nextAll: function( elem ) {
      return dir( elem, "nextSibling" );
    },
    prevAll: function( elem ) {
      return dir( elem, "previousSibling" );
    },
    nextUntil: function( elem, _i, until ) {
      return dir( elem, "nextSibling", until );
    },
    prevUntil: function( elem, _i, until ) {
      return dir( elem, "previousSibling", until );
    },
    siblings: function( elem ) {
      return siblings( ( elem.parentNode || {} ).firstChild, elem );
    },
    children: function( elem ) {
      return siblings( elem.firstChild );
    },
    contents: function( elem ) {
      if ( elem.contentDocument != null &&
  
        // Support: IE 11+
        // <object> elements with no `data` attribute has an object
        // `contentDocument` with a `null` prototype.
        getProto( elem.contentDocument ) ) {
  
        return elem.contentDocument;
      }
  
      // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.
      if ( nodeName( elem, "template" ) ) {
        elem = elem.content || elem;
      }
  
      return jQuery.merge( [], elem.childNodes );
    }
  }, function( name, fn ) {
    jQuery.fn[ name ] = function( until, selector ) {
      var matched = jQuery.map( this, fn, until );
  
      if ( name.slice( -5 ) !== "Until" ) {
        selector = until;
      }
  
      if ( selector && typeof selector === "string" ) {
        matched = jQuery.filter( selector, matched );
      }
  
      if ( this.length > 1 ) {
  
        // Remove duplicates
        if ( !guaranteedUnique[ name ] ) {
          jQuery.uniqueSort( matched );
        }
  
        // Reverse order for parents* and prev-derivatives
        if ( rparentsprev.test( name ) ) {
          matched.reverse();
        }
      }
  
      return this.pushStack( matched );
    };
  } );
  var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );
  
  
  
  // Convert String-formatted options into Object-formatted ones
  function createOptions( options ) {
    var object = {};
    jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
      object[ flag ] = true;
    } );
    return object;
  }
  
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function( options ) {
  
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ?
      createOptions( options ) :
      jQuery.extend( {}, options );
  
    var // Flag to know if list is currently firing
      firing,
  
      // Last fire value for non-forgettable lists
      memory,
  
      // Flag to know if list was already fired
      fired,
  
      // Flag to prevent firing
      locked,
  
      // Actual callback list
      list = [],
  
      // Queue of execution data for repeatable lists
      queue = [],
  
      // Index of currently firing callback (modified by add/remove as needed)
      firingIndex = -1,
  
      // Fire callbacks
      fire = function() {
  
        // Enforce single-firing
        locked = locked || options.once;
  
        // Execute callbacks for all pending executions,
        // respecting firingIndex overrides and runtime changes
        fired = firing = true;
        for ( ; queue.length; firingIndex = -1 ) {
          memory = queue.shift();
          while ( ++firingIndex < list.length ) {
  
            // Run callback and check for early termination
            if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
              options.stopOnFalse ) {
  
              // Jump to end and forget the data so .add doesn't re-fire
              firingIndex = list.length;
              memory = false;
            }
          }
        }
  
        // Forget the data if we're done with it
        if ( !options.memory ) {
          memory = false;
        }
  
        firing = false;
  
        // Clean up if we're done firing for good
        if ( locked ) {
  
          // Keep an empty list if we have data for future add calls
          if ( memory ) {
            list = [];
  
          // Otherwise, this object is spent
          } else {
            list = "";
          }
        }
      },
  
      // Actual Callbacks object
      self = {
  
        // Add a callback or a collection of callbacks to the list
        add: function() {
          if ( list ) {
  
            // If we have memory from a past run, we should fire after adding
            if ( memory && !firing ) {
              firingIndex = list.length - 1;
              queue.push( memory );
            }
  
            ( function add( args ) {
              jQuery.each( args, function( _, arg ) {
                if ( isFunction( arg ) ) {
                  if ( !options.unique || !self.has( arg ) ) {
                    list.push( arg );
                  }
                } else if ( arg && arg.length && toType( arg ) !== "string" ) {
  
                  // Inspect recursively
                  add( arg );
                }
              } );
            } )( arguments );
  
            if ( memory && !firing ) {
              fire();
            }
          }
          return this;
        },
  
        // Remove a callback from the list
        remove: function() {
          jQuery.each( arguments, function( _, arg ) {
            var index;
            while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
              list.splice( index, 1 );
  
              // Handle firing indexes
              if ( index <= firingIndex ) {
                firingIndex--;
              }
            }
          } );
          return this;
        },
  
        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function( fn ) {
          return fn ?
            jQuery.inArray( fn, list ) > -1 :
            list.length > 0;
        },
  
        // Remove all callbacks from the list
        empty: function() {
          if ( list ) {
            list = [];
          }
          return this;
        },
  
        // Disable .fire and .add
        // Abort any current/pending executions
        // Clear all callbacks and values
        disable: function() {
          locked = queue = [];
          list = memory = "";
          return this;
        },
        disabled: function() {
          return !list;
        },
  
        // Disable .fire
        // Also disable .add unless we have memory (since it would have no effect)
        // Abort any pending executions
        lock: function() {
          locked = queue = [];
          if ( !memory && !firing ) {
            list = memory = "";
          }
          return this;
        },
        locked: function() {
          return !!locked;
        },
  
        // Call all callbacks with the given context and arguments
        fireWith: function( context, args ) {
          if ( !locked ) {
            args = args || [];
            args = [ context, args.slice ? args.slice() : args ];
            queue.push( args );
            if ( !firing ) {
              fire();
            }
          }
          return this;
        },
  
        // Call all the callbacks with the given arguments
        fire: function() {
          self.fireWith( this, arguments );
          return this;
        },
  
        // To know if the callbacks have already been called at least once
        fired: function() {
          return !!fired;
        }
      };
  
    return self;
  };
  
  
  function Identity( v ) {
    return v;
  }
  function Thrower( ex ) {
    throw ex;
  }
  
  function adoptValue( value, resolve, reject, noValue ) {
    var method;
  
    try {
  
      // Check for promise aspect first to privilege synchronous behavior
      if ( value && isFunction( ( method = value.promise ) ) ) {
        method.call( value ).done( resolve ).fail( reject );
  
      // Other thenables
      } else if ( value && isFunction( ( method = value.then ) ) ) {
        method.call( value, resolve, reject );
  
      // Other non-thenables
      } else {
  
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply( undefined, [ value ].slice( noValue ) );
      }
  
    // For Promises/A+, convert exceptions into rejections
    // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
    // Deferred#then to conditionally suppress rejection.
    } catch ( value ) {
  
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply( undefined, [ value ] );
    }
  }
  
  jQuery.extend( {
  
    Deferred: function( func ) {
      var tuples = [
  
          // action, add listener, callbacks,
          // ... .then handlers, argument index, [final state]
          [ "notify", "progress", jQuery.Callbacks( "memory" ),
            jQuery.Callbacks( "memory" ), 2 ],
          [ "resolve", "done", jQuery.Callbacks( "once memory" ),
            jQuery.Callbacks( "once memory" ), 0, "resolved" ],
          [ "reject", "fail", jQuery.Callbacks( "once memory" ),
            jQuery.Callbacks( "once memory" ), 1, "rejected" ]
        ],
        state = "pending",
        promise = {
          state: function() {
            return state;
          },
          always: function() {
            deferred.done( arguments ).fail( arguments );
            return this;
          },
          "catch": function( fn ) {
            return promise.then( null, fn );
          },
  
          // Keep pipe for back-compat
          pipe: function( /* fnDone, fnFail, fnProgress */ ) {
            var fns = arguments;
  
            return jQuery.Deferred( function( newDefer ) {
              jQuery.each( tuples, function( _i, tuple ) {
  
                // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];
  
                // deferred.progress(function() { bind to newDefer or newDefer.notify })
                // deferred.done(function() { bind to newDefer or newDefer.resolve })
                // deferred.fail(function() { bind to newDefer or newDefer.reject })
                deferred[ tuple[ 1 ] ]( function() {
                  var returned = fn && fn.apply( this, arguments );
                  if ( returned && isFunction( returned.promise ) ) {
                    returned.promise()
                      .progress( newDefer.notify )
                      .done( newDefer.resolve )
                      .fail( newDefer.reject );
                  } else {
                    newDefer[ tuple[ 0 ] + "With" ](
                      this,
                      fn ? [ returned ] : arguments
                    );
                  }
                } );
              } );
              fns = null;
            } ).promise();
          },
          then: function( onFulfilled, onRejected, onProgress ) {
            var maxDepth = 0;
            function resolve( depth, deferred, handler, special ) {
              return function() {
                var that = this,
                  args = arguments,
                  mightThrow = function() {
                    var returned, then;
  
                    // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts
                    if ( depth < maxDepth ) {
                      return;
                    }
  
                    returned = handler.apply( that, args );
  
                    // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48
                    if ( returned === deferred.promise() ) {
                      throw new TypeError( "Thenable self-resolution" );
                    }
  
                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once
                    then = returned &&
  
                      // Support: Promises/A+ section 2.3.4
                      // https://promisesaplus.com/#point-64
                      // Only check objects and functions for thenability
                      ( typeof returned === "object" ||
                        typeof returned === "function" ) &&
                      returned.then;
  
                    // Handle a returned thenable
                    if ( isFunction( then ) ) {
  
                      // Special processors (notify) just wait for resolution
                      if ( special ) {
                        then.call(
                          returned,
                          resolve( maxDepth, deferred, Identity, special ),
                          resolve( maxDepth, deferred, Thrower, special )
                        );
  
                      // Normal processors (resolve) also hook into progress
                      } else {
  
                        // ...and disregard older resolution values
                        maxDepth++;
  
                        then.call(
                          returned,
                          resolve( maxDepth, deferred, Identity, special ),
                          resolve( maxDepth, deferred, Thrower, special ),
                          resolve( maxDepth, deferred, Identity,
                            deferred.notifyWith )
                        );
                      }
  
                    // Handle all other returned values
                    } else {
  
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if ( handler !== Identity ) {
                        that = undefined;
                        args = [ returned ];
                      }
  
                      // Process the value(s)
                      // Default process is resolve
                      ( special || deferred.resolveWith )( that, args );
                    }
                  },
  
                  // Only normal processors (resolve) catch and reject exceptions
                  process = special ?
                    mightThrow :
                    function() {
                      try {
                        mightThrow();
                      } catch ( e ) {
  
                        if ( jQuery.Deferred.exceptionHook ) {
                          jQuery.Deferred.exceptionHook( e,
                            process.stackTrace );
                        }
  
                        // Support: Promises/A+ section 2.3.3.3.4.1
                        // https://promisesaplus.com/#point-61
                        // Ignore post-resolution exceptions
                        if ( depth + 1 >= maxDepth ) {
  
                          // Only substitute handlers pass on context
                          // and multiple values (non-spec behavior)
                          if ( handler !== Thrower ) {
                            that = undefined;
                            args = [ e ];
                          }
  
                          deferred.rejectWith( that, args );
                        }
                      }
                    };
  
                // Support: Promises/A+ section 2.3.3.3.1
                // https://promisesaplus.com/#point-57
                // Re-resolve promises immediately to dodge false rejection from
                // subsequent errors
                if ( depth ) {
                  process();
                } else {
  
                  // Call an optional hook to record the stack, in case of exception
                  // since it's otherwise lost when execution goes async
                  if ( jQuery.Deferred.getStackHook ) {
                    process.stackTrace = jQuery.Deferred.getStackHook();
                  }
                  window.setTimeout( process );
                }
              };
            }
  
            return jQuery.Deferred( function( newDefer ) {
  
              // progress_handlers.add( ... )
              tuples[ 0 ][ 3 ].add(
                resolve(
                  0,
                  newDefer,
                  isFunction( onProgress ) ?
                    onProgress :
                    Identity,
                  newDefer.notifyWith
                )
              );
  
              // fulfilled_handlers.add( ... )
              tuples[ 1 ][ 3 ].add(
                resolve(
                  0,
                  newDefer,
                  isFunction( onFulfilled ) ?
                    onFulfilled :
                    Identity
                )
              );
  
              // rejected_handlers.add( ... )
              tuples[ 2 ][ 3 ].add(
                resolve(
                  0,
                  newDefer,
                  isFunction( onRejected ) ?
                    onRejected :
                    Thrower
                )
              );
            } ).promise();
          },
  
          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function( obj ) {
            return obj != null ? jQuery.extend( obj, promise ) : promise;
          }
        },
        deferred = {};
  
      // Add list-specific methods
      jQuery.each( tuples, function( i, tuple ) {
        var list = tuple[ 2 ],
          stateString = tuple[ 5 ];
  
        // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add
        promise[ tuple[ 1 ] ] = list.add;
  
        // Handle state
        if ( stateString ) {
          list.add(
            function() {
  
              // state = "resolved" (i.e., fulfilled)
              // state = "rejected"
              state = stateString;
            },
  
            // rejected_callbacks.disable
            // fulfilled_callbacks.disable
            tuples[ 3 - i ][ 2 ].disable,
  
            // rejected_handlers.disable
            // fulfilled_handlers.disable
            tuples[ 3 - i ][ 3 ].disable,
  
            // progress_callbacks.lock
            tuples[ 0 ][ 2 ].lock,
  
            // progress_handlers.lock
            tuples[ 0 ][ 3 ].lock
          );
        }
  
        // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire
        list.add( tuple[ 3 ].fire );
  
        // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }
        deferred[ tuple[ 0 ] ] = function() {
          deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
          return this;
        };
  
        // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith
        deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
      } );
  
      // Make the deferred a promise
      promise.promise( deferred );
  
      // Call given func if any
      if ( func ) {
        func.call( deferred, deferred );
      }
  
      // All done!
      return deferred;
    },
  
    // Deferred helper
    when: function( singleValue ) {
      var
  
        // count of uncompleted subordinates
        remaining = arguments.length,
  
        // count of unprocessed arguments
        i = remaining,
  
        // subordinate fulfillment data
        resolveContexts = Array( i ),
        resolveValues = slice.call( arguments ),
  
        // the master Deferred
        master = jQuery.Deferred(),
  
        // subordinate callback factory
        updateFunc = function( i ) {
          return function( value ) {
            resolveContexts[ i ] = this;
            resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
            if ( !( --remaining ) ) {
              master.resolveWith( resolveContexts, resolveValues );
            }
          };
        };
  
      // Single- and empty arguments are adopted like Promise.resolve
      if ( remaining <= 1 ) {
        adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
          !remaining );
  
        // Use .then() to unwrap secondary thenables (cf. gh-3000)
        if ( master.state() === "pending" ||
          isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {
  
          return master.then();
        }
      }
  
      // Multiple arguments are aggregated like Promise.all array elements
      while ( i-- ) {
        adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
      }
  
      return master.promise();
    }
  } );
  
  
  // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.
  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
  
  jQuery.Deferred.exceptionHook = function( error, stack ) {
  
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
      window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
    }
  };
  
  
  
  
  jQuery.readyException = function( error ) {
    window.setTimeout( function() {
      throw error;
    } );
  };
  
  
  
  
  // The deferred used on DOM ready
  var readyList = jQuery.Deferred();
  
  jQuery.fn.ready = function( fn ) {
  
    readyList
      .then( fn )
  
      // Wrap jQuery.readyException in a function so that the lookup
      // happens at the time of error handling instead of callback
      // registration.
      .catch( function( error ) {
        jQuery.readyException( error );
      } );
  
    return this;
  };
  
  jQuery.extend( {
  
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
  
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
  
    // Handle when the DOM is ready
    ready: function( wait ) {
  
      // Abort if there are pending holds or we're already ready
      if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
        return;
      }
  
      // Remember that the DOM is ready
      jQuery.isReady = true;
  
      // If a normal DOM Ready event fired, decrement, and wait if need be
      if ( wait !== true && --jQuery.readyWait > 0 ) {
        return;
      }
  
      // If there are functions bound, to execute
      readyList.resolveWith( document, [ jQuery ] );
    }
  } );
  
  jQuery.ready.then = readyList.then;
  
  // The ready event handler and self cleanup method
  function completed() {
    document.removeEventListener( "DOMContentLoaded", completed );
    window.removeEventListener( "load", completed );
    jQuery.ready();
  }
  
  // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon
  if ( document.readyState === "complete" ||
    ( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
  
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout( jQuery.ready );
  
  } else {
  
    // Use the handy event callback
    document.addEventListener( "DOMContentLoaded", completed );
  
    // A fallback to window.onload, that will always work
    window.addEventListener( "load", completed );
  }
  
  
  
  
  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
    var i = 0,
      len = elems.length,
      bulk = key == null;
  
    // Sets many values
    if ( toType( key ) === "object" ) {
      chainable = true;
      for ( i in key ) {
        access( elems, fn, i, key[ i ], true, emptyGet, raw );
      }
  
    // Sets one value
    } else if ( value !== undefined ) {
      chainable = true;
  
      if ( !isFunction( value ) ) {
        raw = true;
      }
  
      if ( bulk ) {
  
        // Bulk operations run against the entire set
        if ( raw ) {
          fn.call( elems, value );
          fn = null;
  
        // ...except when executing function values
        } else {
          bulk = fn;
          fn = function( elem, _key, value ) {
            return bulk.call( jQuery( elem ), value );
          };
        }
      }
  
      if ( fn ) {
        for ( ; i < len; i++ ) {
          fn(
            elems[ i ], key, raw ?
            value :
            value.call( elems[ i ], i, fn( elems[ i ], key ) )
          );
        }
      }
    }
  
    if ( chainable ) {
      return elems;
    }
  
    // Gets
    if ( bulk ) {
      return fn.call( elems );
    }
  
    return len ? fn( elems[ 0 ], key ) : emptyGet;
  };
  
  
  // Matches dashed string for camelizing
  var rmsPrefix = /^-ms-/,
    rdashAlpha = /-([a-z])/g;
  
  // Used by camelCase as callback to replace()
  function fcamelCase( _all, letter ) {
    return letter.toUpperCase();
  }
  
  // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)
  function camelCase( string ) {
    return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
  }
  var acceptData = function( owner ) {
  
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
  };
  
  
  
  
  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }
  
  Data.uid = 1;
  
  Data.prototype = {
  
    cache: function( owner ) {
  
      // Check if the owner object already has a cache
      var value = owner[ this.expando ];
  
      // If not, create one
      if ( !value ) {
        value = {};
  
        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.
        if ( acceptData( owner ) ) {
  
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if ( owner.nodeType ) {
            owner[ this.expando ] = value;
  
          // Otherwise secure it in a non-enumerable property
          // configurable must be true to allow the property to be
          // deleted when data is removed
          } else {
            Object.defineProperty( owner, this.expando, {
              value: value,
              configurable: true
            } );
          }
        }
      }
  
      return value;
    },
    set: function( owner, data, value ) {
      var prop,
        cache = this.cache( owner );
  
      // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)
      if ( typeof data === "string" ) {
        cache[ camelCase( data ) ] = value;
  
      // Handle: [ owner, { properties } ] args
      } else {
  
        // Copy the properties one-by-one to the cache object
        for ( prop in data ) {
          cache[ camelCase( prop ) ] = data[ prop ];
        }
      }
      return cache;
    },
    get: function( owner, key ) {
      return key === undefined ?
        this.cache( owner ) :
  
        // Always use camelCase key (gh-2257)
        owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
    },
    access: function( owner, key, value ) {
  
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if ( key === undefined ||
          ( ( key && typeof key === "string" ) && value === undefined ) ) {
  
        return this.get( owner, key );
      }
  
      // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set( owner, key, value );
  
      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function( owner, key ) {
      var i,
        cache = owner[ this.expando ];
  
      if ( cache === undefined ) {
        return;
      }
  
      if ( key !== undefined ) {
  
        // Support array or space separated string of keys
        if ( Array.isArray( key ) ) {
  
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map( camelCase );
        } else {
          key = camelCase( key );
  
          // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace
          key = key in cache ?
            [ key ] :
            ( key.match( rnothtmlwhite ) || [] );
        }
  
        i = key.length;
  
        while ( i-- ) {
          delete cache[ key[ i ] ];
        }
      }
  
      // Remove the expando if there's no more data
      if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
  
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if ( owner.nodeType ) {
          owner[ this.expando ] = undefined;
        } else {
          delete owner[ this.expando ];
        }
      }
    },
    hasData: function( owner ) {
      var cache = owner[ this.expando ];
      return cache !== undefined && !jQuery.isEmptyObject( cache );
    }
  };
  var dataPriv = new Data();
  
  var dataUser = new Data();
  
  
  
  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
  
  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /[A-Z]/g;
  
  function getData( data ) {
    if ( data === "true" ) {
      return true;
    }
  
    if ( data === "false" ) {
      return false;
    }
  
    if ( data === "null" ) {
      return null;
    }
  
    // Only convert to a number if it doesn't change the string
    if ( data === +data + "" ) {
      return +data;
    }
  
    if ( rbrace.test( data ) ) {
      return JSON.parse( data );
    }
  
    return data;
  }
  
  function dataAttr( elem, key, data ) {
    var name;
  
    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if ( data === undefined && elem.nodeType === 1 ) {
      name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
      data = elem.getAttribute( name );
  
      if ( typeof data === "string" ) {
        try {
          data = getData( data );
        } catch ( e ) {}
  
        // Make sure we set the data so it isn't changed later
        dataUser.set( elem, key, data );
      } else {
        data = undefined;
      }
    }
    return data;
  }
  
  jQuery.extend( {
    hasData: function( elem ) {
      return dataUser.hasData( elem ) || dataPriv.hasData( elem );
    },
  
    data: function( elem, name, data ) {
      return dataUser.access( elem, name, data );
    },
  
    removeData: function( elem, name ) {
      dataUser.remove( elem, name );
    },
  
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function( elem, name, data ) {
      return dataPriv.access( elem, name, data );
    },
  
    _removeData: function( elem, name ) {
      dataPriv.remove( elem, name );
    }
  } );
  
  jQuery.fn.extend( {
    data: function( key, value ) {
      var i, name, data,
        elem = this[ 0 ],
        attrs = elem && elem.attributes;
  
      // Gets all values
      if ( key === undefined ) {
        if ( this.length ) {
          data = dataUser.get( elem );
  
          if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
            i = attrs.length;
            while ( i-- ) {
  
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if ( attrs[ i ] ) {
                name = attrs[ i ].name;
                if ( name.indexOf( "data-" ) === 0 ) {
                  name = camelCase( name.slice( 5 ) );
                  dataAttr( elem, name, data[ name ] );
                }
              }
            }
            dataPriv.set( elem, "hasDataAttrs", true );
          }
        }
  
        return data;
      }
  
      // Sets multiple values
      if ( typeof key === "object" ) {
        return this.each( function() {
          dataUser.set( this, key );
        } );
      }
  
      return access( this, function( value ) {
        var data;
  
        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if ( elem && value === undefined ) {
  
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get( elem, key );
          if ( data !== undefined ) {
            return data;
          }
  
          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr( elem, key );
          if ( data !== undefined ) {
            return data;
          }
  
          // We tried really hard, but the data doesn't exist.
          return;
        }
  
        // Set the data...
        this.each( function() {
  
          // We always store the camelCased key
          dataUser.set( this, key, value );
        } );
      }, null, value, arguments.length > 1, null, true );
    },
  
    removeData: function( key ) {
      return this.each( function() {
        dataUser.remove( this, key );
      } );
    }
  } );
  
  
  jQuery.extend( {
    queue: function( elem, type, data ) {
      var queue;
  
      if ( elem ) {
        type = ( type || "fx" ) + "queue";
        queue = dataPriv.get( elem, type );
  
        // Speed up dequeue by getting out quickly if this is just a lookup
        if ( data ) {
          if ( !queue || Array.isArray( data ) ) {
            queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
          } else {
            queue.push( data );
          }
        }
        return queue || [];
      }
    },
  
    dequeue: function( elem, type ) {
      type = type || "fx";
  
      var queue = jQuery.queue( elem, type ),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = jQuery._queueHooks( elem, type ),
        next = function() {
          jQuery.dequeue( elem, type );
        };
  
      // If the fx queue is dequeued, always remove the progress sentinel
      if ( fn === "inprogress" ) {
        fn = queue.shift();
        startLength--;
      }
  
      if ( fn ) {
  
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if ( type === "fx" ) {
          queue.unshift( "inprogress" );
        }
  
        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call( elem, next, hooks );
      }
  
      if ( !startLength && hooks ) {
        hooks.empty.fire();
      }
    },
  
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function( elem, type ) {
      var key = type + "queueHooks";
      return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
        empty: jQuery.Callbacks( "once memory" ).add( function() {
          dataPriv.remove( elem, [ type + "queue", key ] );
        } )
      } );
    }
  } );
  
  jQuery.fn.extend( {
    queue: function( type, data ) {
      var setter = 2;
  
      if ( typeof type !== "string" ) {
        data = type;
        type = "fx";
        setter--;
      }
  
      if ( arguments.length < setter ) {
        return jQuery.queue( this[ 0 ], type );
      }
  
      return data === undefined ?
        this :
        this.each( function() {
          var queue = jQuery.queue( this, type, data );
  
          // Ensure a hooks for this queue
          jQuery._queueHooks( this, type );
  
          if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
            jQuery.dequeue( this, type );
          }
        } );
    },
    dequeue: function( type ) {
      return this.each( function() {
        jQuery.dequeue( this, type );
      } );
    },
    clearQueue: function( type ) {
      return this.queue( type || "fx", [] );
    },
  
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function( type, obj ) {
      var tmp,
        count = 1,
        defer = jQuery.Deferred(),
        elements = this,
        i = this.length,
        resolve = function() {
          if ( !( --count ) ) {
            defer.resolveWith( elements, [ elements ] );
          }
        };
  
      if ( typeof type !== "string" ) {
        obj = type;
        type = undefined;
      }
      type = type || "fx";
  
      while ( i-- ) {
        tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
        if ( tmp && tmp.empty ) {
          count++;
          tmp.empty.add( resolve );
        }
      }
      resolve();
      return defer.promise( obj );
    }
  } );
  var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
  
  var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
  
  
  var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
  
  var documentElement = document.documentElement;
  
  
  
    var isAttached = function( elem ) {
        return jQuery.contains( elem.ownerDocument, elem );
      },
      composed = { composed: true };
  
    // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
    // Check attachment across shadow DOM boundaries when possible (gh-3504)
    // Support: iOS 10.0-10.2 only
    // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
    // leading to errors. We need to check for `getRootNode`.
    if ( documentElement.getRootNode ) {
      isAttached = function( elem ) {
        return jQuery.contains( elem.ownerDocument, elem ) ||
          elem.getRootNode( composed ) === elem.ownerDocument;
      };
    }
  var isHiddenWithinTree = function( elem, el ) {
  
      // isHiddenWithinTree might be called from jQuery#filter function;
      // in that case, element will be second argument
      elem = el || elem;
  
      // Inline style trumps all
      return elem.style.display === "none" ||
        elem.style.display === "" &&
  
        // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached( elem ) &&
  
        jQuery.css( elem, "display" ) === "none";
    };
  
  
  
  function adjustCSS( elem, prop, valueParts, tween ) {
    var adjusted, scale,
      maxIterations = 20,
      currentValue = tween ?
        function() {
          return tween.cur();
        } :
        function() {
          return jQuery.css( elem, prop, "" );
        },
      initial = currentValue(),
      unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
  
      // Starting value computation is required for potential unit mismatches
      initialInUnit = elem.nodeType &&
        ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
        rcssNum.exec( jQuery.css( elem, prop ) );
  
    if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
  
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2;
  
      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[ 3 ];
  
      // Iteratively approximate from a nonzero starting point
      initialInUnit = +initial || 1;
  
      while ( maxIterations-- ) {
  
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style( elem, prop, initialInUnit + unit );
        if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
          maxIterations = 0;
        }
        initialInUnit = initialInUnit / scale;
  
      }
  
      initialInUnit = initialInUnit * 2;
      jQuery.style( elem, prop, initialInUnit + unit );
  
      // Make sure we update the tween properties later on
      valueParts = valueParts || [];
    }
  
    if ( valueParts ) {
      initialInUnit = +initialInUnit || +initial || 0;
  
      // Apply relative offset (+=/-=) if specified
      adjusted = valueParts[ 1 ] ?
        initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
        +valueParts[ 2 ];
      if ( tween ) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }
    return adjusted;
  }
  
  
  var defaultDisplayMap = {};
  
  function getDefaultDisplay( elem ) {
    var temp,
      doc = elem.ownerDocument,
      nodeName = elem.nodeName,
      display = defaultDisplayMap[ nodeName ];
  
    if ( display ) {
      return display;
    }
  
    temp = doc.body.appendChild( doc.createElement( nodeName ) );
    display = jQuery.css( temp, "display" );
  
    temp.parentNode.removeChild( temp );
  
    if ( display === "none" ) {
      display = "block";
    }
    defaultDisplayMap[ nodeName ] = display;
  
    return display;
  }
  
  function showHide( elements, show ) {
    var display, elem,
      values = [],
      index = 0,
      length = elements.length;
  
    // Determine new display value for elements that need to change
    for ( ; index < length; index++ ) {
      elem = elements[ index ];
      if ( !elem.style ) {
        continue;
      }
  
      display = elem.style.display;
      if ( show ) {
  
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if ( display === "none" ) {
          values[ index ] = dataPriv.get( elem, "display" ) || null;
          if ( !values[ index ] ) {
            elem.style.display = "";
          }
        }
        if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
          values[ index ] = getDefaultDisplay( elem );
        }
      } else {
        if ( display !== "none" ) {
          values[ index ] = "none";
  
          // Remember what we're overwriting
          dataPriv.set( elem, "display", display );
        }
      }
    }
  
    // Set the display of the elements in a second loop to avoid constant reflow
    for ( index = 0; index < length; index++ ) {
      if ( values[ index ] != null ) {
        elements[ index ].style.display = values[ index ];
      }
    }
  
    return elements;
  }
  
  jQuery.fn.extend( {
    show: function() {
      return showHide( this, true );
    },
    hide: function() {
      return showHide( this );
    },
    toggle: function( state ) {
      if ( typeof state === "boolean" ) {
        return state ? this.show() : this.hide();
      }
  
      return this.each( function() {
        if ( isHiddenWithinTree( this ) ) {
          jQuery( this ).show();
        } else {
          jQuery( this ).hide();
        }
      } );
    }
  } );
  var rcheckableType = ( /^(?:checkbox|radio)$/i );
  
  var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );
  
  var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );
  
  
  
  ( function() {
    var fragment = document.createDocumentFragment(),
      div = fragment.appendChild( document.createElement( "div" ) ),
      input = document.createElement( "input" );
  
    // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)
    input.setAttribute( "type", "radio" );
    input.setAttribute( "checked", "checked" );
    input.setAttribute( "name", "t" );
  
    div.appendChild( input );
  
    // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
  
    // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
  
    // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.
    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  } )();
  
  
  // We have to close these tags to support XHTML (#13200)
  var wrapMap = {
  
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [ 1, "<table>", "</table>" ],
    col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
    tr: [ 2, "<table><tbody>", "</tbody></table>" ],
    td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
  
    _default: [ 0, "", "" ]
  };
  
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  
  // Support: IE <=9 only
  if ( !support.option ) {
    wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
  }
  
  
  function getAll( context, tag ) {
  
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;
  
    if ( typeof context.getElementsByTagName !== "undefined" ) {
      ret = context.getElementsByTagName( tag || "*" );
  
    } else if ( typeof context.querySelectorAll !== "undefined" ) {
      ret = context.querySelectorAll( tag || "*" );
  
    } else {
      ret = [];
    }
  
    if ( tag === undefined || tag && nodeName( context, tag ) ) {
      return jQuery.merge( [ context ], ret );
    }
  
    return ret;
  }
  
  
  // Mark scripts as having already been evaluated
  function setGlobalEval( elems, refElements ) {
    var i = 0,
      l = elems.length;
  
    for ( ; i < l; i++ ) {
      dataPriv.set(
        elems[ i ],
        "globalEval",
        !refElements || dataPriv.get( refElements[ i ], "globalEval" )
      );
    }
  }
  
  
  var rhtml = /<|&#?\w+;/;
  
  function buildFragment( elems, context, scripts, selection, ignored ) {
    var elem, tmp, tag, wrap, attached, j,
      fragment = context.createDocumentFragment(),
      nodes = [],
      i = 0,
      l = elems.length;
  
    for ( ; i < l; i++ ) {
      elem = elems[ i ];
  
      if ( elem || elem === 0 ) {
  
        // Add nodes directly
        if ( toType( elem ) === "object" ) {
  
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
  
        // Convert non-html into a text node
        } else if ( !rhtml.test( elem ) ) {
          nodes.push( context.createTextNode( elem ) );
  
        // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
  
          // Deserialize a standard representation
          tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
          wrap = wrapMap[ tag ] || wrapMap._default;
          tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
  
          // Descend through wrappers to the right content
          j = wrap[ 0 ];
          while ( j-- ) {
            tmp = tmp.lastChild;
          }
  
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge( nodes, tmp.childNodes );
  
          // Remember the top-level container
          tmp = fragment.firstChild;
  
          // Ensure the created nodes are orphaned (#12392)
          tmp.textContent = "";
        }
      }
    }
  
    // Remove wrapper from fragment
    fragment.textContent = "";
  
    i = 0;
    while ( ( elem = nodes[ i++ ] ) ) {
  
      // Skip elements already in the context collection (trac-4087)
      if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
        if ( ignored ) {
          ignored.push( elem );
        }
        continue;
      }
  
      attached = isAttached( elem );
  
      // Append to fragment
      tmp = getAll( fragment.appendChild( elem ), "script" );
  
      // Preserve script evaluation history
      if ( attached ) {
        setGlobalEval( tmp );
      }
  
      // Capture executables
      if ( scripts ) {
        j = 0;
        while ( ( elem = tmp[ j++ ] ) ) {
          if ( rscriptType.test( elem.type || "" ) ) {
            scripts.push( elem );
          }
        }
      }
    }
  
    return fragment;
  }
  
  
  var
    rkeyEvent = /^key/,
    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
  
  function returnTrue() {
    return true;
  }
  
  function returnFalse() {
    return false;
  }
  
  // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).
  function expectSync( elem, type ) {
    return ( elem === safeActiveElement() ) === ( type === "focus" );
  }
  
  // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch ( err ) { }
  }
  
  function on( elem, types, selector, data, fn, one ) {
    var origFn, type;
  
    // Types can be a map of types/handlers
    if ( typeof types === "object" ) {
  
      // ( types-Object, selector, data )
      if ( typeof selector !== "string" ) {
  
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for ( type in types ) {
        on( elem, type, selector, data, types[ type ], one );
      }
      return elem;
    }
  
    if ( data == null && fn == null ) {
  
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if ( fn == null ) {
      if ( typeof selector === "string" ) {
  
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
  
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if ( fn === false ) {
      fn = returnFalse;
    } else if ( !fn ) {
      return elem;
    }
  
    if ( one === 1 ) {
      origFn = fn;
      fn = function( event ) {
  
        // Can use an empty set, since event contains the info
        jQuery().off( event );
        return origFn.apply( this, arguments );
      };
  
      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
    }
    return elem.each( function() {
      jQuery.event.add( this, types, fn, data, selector );
    } );
  }
  
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {
  
    global: {},
  
    add: function( elem, types, handler, data, selector ) {
  
      var handleObjIn, eventHandle, tmp,
        events, t, handleObj,
        special, handlers, type, namespaces, origType,
        elemData = dataPriv.get( elem );
  
      // Only attach events to objects that accept data
      if ( !acceptData( elem ) ) {
        return;
      }
  
      // Caller can pass in an object of custom data in lieu of the handler
      if ( handler.handler ) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }
  
      // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)
      if ( selector ) {
        jQuery.find.matchesSelector( documentElement, selector );
      }
  
      // Make sure that the handler has a unique ID, used to find/remove it later
      if ( !handler.guid ) {
        handler.guid = jQuery.guid++;
      }
  
      // Init the element's event structure and main handler, if this is the first
      if ( !( events = elemData.events ) ) {
        events = elemData.events = Object.create( null );
      }
      if ( !( eventHandle = elemData.handle ) ) {
        eventHandle = elemData.handle = function( e ) {
  
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
            jQuery.event.dispatch.apply( elem, arguments ) : undefined;
        };
      }
  
      // Handle multiple events separated by a space
      types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
      t = types.length;
      while ( t-- ) {
        tmp = rtypenamespace.exec( types[ t ] ) || [];
        type = origType = tmp[ 1 ];
        namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
  
        // There *must* be a type, no attaching namespace-only handlers
        if ( !type ) {
          continue;
        }
  
        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[ type ] || {};
  
        // If selector defined, determine special event api type, otherwise given type
        type = ( selector ? special.delegateType : special.bindType ) || type;
  
        // Update special based on newly reset type
        special = jQuery.event.special[ type ] || {};
  
        // handleObj is passed to all event handlers
        handleObj = jQuery.extend( {
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
          namespace: namespaces.join( "." )
        }, handleObjIn );
  
        // Init the event handler queue if we're the first
        if ( !( handlers = events[ type ] ) ) {
          handlers = events[ type ] = [];
          handlers.delegateCount = 0;
  
          // Only use addEventListener if the special events handler returns false
          if ( !special.setup ||
            special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
  
            if ( elem.addEventListener ) {
              elem.addEventListener( type, eventHandle );
            }
          }
        }
  
        if ( special.add ) {
          special.add.call( elem, handleObj );
  
          if ( !handleObj.handler.guid ) {
            handleObj.handler.guid = handler.guid;
          }
        }
  
        // Add to the element's handler list, delegates in front
        if ( selector ) {
          handlers.splice( handlers.delegateCount++, 0, handleObj );
        } else {
          handlers.push( handleObj );
        }
  
        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[ type ] = true;
      }
  
    },
  
    // Detach an event or set of events from an element
    remove: function( elem, types, handler, selector, mappedTypes ) {
  
      var j, origCount, tmp,
        events, t, handleObj,
        special, handlers, type, namespaces, origType,
        elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
  
      if ( !elemData || !( events = elemData.events ) ) {
        return;
      }
  
      // Once for each type.namespace in types; type may be omitted
      types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
      t = types.length;
      while ( t-- ) {
        tmp = rtypenamespace.exec( types[ t ] ) || [];
        type = origType = tmp[ 1 ];
        namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
  
        // Unbind all events (on this namespace, if provided) for the element
        if ( !type ) {
          for ( type in events ) {
            jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
          }
          continue;
        }
  
        special = jQuery.event.special[ type ] || {};
        type = ( selector ? special.delegateType : special.bindType ) || type;
        handlers = events[ type ] || [];
        tmp = tmp[ 2 ] &&
          new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
  
        // Remove matching events
        origCount = j = handlers.length;
        while ( j-- ) {
          handleObj = handlers[ j ];
  
          if ( ( mappedTypes || origType === handleObj.origType ) &&
            ( !handler || handler.guid === handleObj.guid ) &&
            ( !tmp || tmp.test( handleObj.namespace ) ) &&
            ( !selector || selector === handleObj.selector ||
              selector === "**" && handleObj.selector ) ) {
            handlers.splice( j, 1 );
  
            if ( handleObj.selector ) {
              handlers.delegateCount--;
            }
            if ( special.remove ) {
              special.remove.call( elem, handleObj );
            }
          }
        }
  
        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if ( origCount && !handlers.length ) {
          if ( !special.teardown ||
            special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
  
            jQuery.removeEvent( elem, type, elemData.handle );
          }
  
          delete events[ type ];
        }
      }
  
      // Remove data and the expando if it's no longer used
      if ( jQuery.isEmptyObject( events ) ) {
        dataPriv.remove( elem, "handle events" );
      }
    },
  
    dispatch: function( nativeEvent ) {
  
      var i, j, ret, matched, handleObj, handlerQueue,
        args = new Array( arguments.length ),
  
        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix( nativeEvent ),
  
        handlers = (
            dataPriv.get( this, "events" ) || Object.create( null )
          )[ event.type ] || [],
        special = jQuery.event.special[ event.type ] || {};
  
      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[ 0 ] = event;
  
      for ( i = 1; i < arguments.length; i++ ) {
        args[ i ] = arguments[ i ];
      }
  
      event.delegateTarget = this;
  
      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
        return;
      }
  
      // Determine handlers
      handlerQueue = jQuery.event.handlers.call( this, event, handlers );
  
      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
        event.currentTarget = matched.elem;
  
        j = 0;
        while ( ( handleObj = matched.handlers[ j++ ] ) &&
          !event.isImmediatePropagationStopped() ) {
  
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if ( !event.rnamespace || handleObj.namespace === false ||
            event.rnamespace.test( handleObj.namespace ) ) {
  
            event.handleObj = handleObj;
            event.data = handleObj.data;
  
            ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
              handleObj.handler ).apply( matched.elem, args );
  
            if ( ret !== undefined ) {
              if ( ( event.result = ret ) === false ) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }
  
      // Call the postDispatch hook for the mapped type
      if ( special.postDispatch ) {
        special.postDispatch.call( this, event );
      }
  
      return event.result;
    },
  
    handlers: function( event, handlers ) {
      var i, handleObj, sel, matchedHandlers, matchedSelectors,
        handlerQueue = [],
        delegateCount = handlers.delegateCount,
        cur = event.target;
  
      // Find delegate handlers
      if ( delegateCount &&
  
        // Support: IE <=9
        // Black-hole SVG <use> instance trees (trac-13180)
        cur.nodeType &&
  
        // Support: Firefox <=42
        // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
        // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
        // Support: IE 11 only
        // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
        !( event.type === "click" && event.button >= 1 ) ) {
  
        for ( ; cur !== this; cur = cur.parentNode || this ) {
  
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
            matchedHandlers = [];
            matchedSelectors = {};
            for ( i = 0; i < delegateCount; i++ ) {
              handleObj = handlers[ i ];
  
              // Don't conflict with Object.prototype properties (#13203)
              sel = handleObj.selector + " ";
  
              if ( matchedSelectors[ sel ] === undefined ) {
                matchedSelectors[ sel ] = handleObj.needsContext ?
                  jQuery( sel, this ).index( cur ) > -1 :
                  jQuery.find( sel, this, null, [ cur ] ).length;
              }
              if ( matchedSelectors[ sel ] ) {
                matchedHandlers.push( handleObj );
              }
            }
            if ( matchedHandlers.length ) {
              handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
            }
          }
        }
      }
  
      // Add the remaining (directly-bound) handlers
      cur = this;
      if ( delegateCount < handlers.length ) {
        handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
      }
  
      return handlerQueue;
    },
  
    addProp: function( name, hook ) {
      Object.defineProperty( jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
  
        get: isFunction( hook ) ?
          function() {
            if ( this.originalEvent ) {
                return hook( this.originalEvent );
            }
          } :
          function() {
            if ( this.originalEvent ) {
                return this.originalEvent[ name ];
            }
          },
  
        set: function( value ) {
          Object.defineProperty( this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          } );
        }
      } );
    },
  
    fix: function( originalEvent ) {
      return originalEvent[ jQuery.expando ] ?
        originalEvent :
        new jQuery.Event( originalEvent );
    },
  
    special: {
      load: {
  
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
  
        // Utilize native event to ensure correct state for checkable inputs
        setup: function( data ) {
  
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;
  
          // Claim the first handler
          if ( rcheckableType.test( el.type ) &&
            el.click && nodeName( el, "input" ) ) {
  
            // dataPriv.set( el, "click", ... )
            leverageNative( el, "click", returnTrue );
          }
  
          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function( data ) {
  
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;
  
          // Force setup before triggering a click
          if ( rcheckableType.test( el.type ) &&
            el.click && nodeName( el, "input" ) ) {
  
            leverageNative( el, "click" );
          }
  
          // Return non-false to allow normal event-path propagation
          return true;
        },
  
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function( event ) {
          var target = event.target;
          return rcheckableType.test( target.type ) &&
            target.click && nodeName( target, "input" ) &&
            dataPriv.get( target, "click" ) ||
            nodeName( target, "a" );
        }
      },
  
      beforeunload: {
        postDispatch: function( event ) {
  
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if ( event.result !== undefined && event.originalEvent ) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  };
  
  // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.
  function leverageNative( el, type, expectSync ) {
  
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if ( !expectSync ) {
      if ( dataPriv.get( el, type ) === undefined ) {
        jQuery.event.add( el, type, returnTrue );
      }
      return;
    }
  
    // Register the controller as a special universal handler for all event namespaces
    dataPriv.set( el, type, false );
    jQuery.event.add( el, type, {
      namespace: false,
      handler: function( event ) {
        var notAsync, result,
          saved = dataPriv.get( this, type );
  
        if ( ( event.isTrigger & 1 ) && this[ type ] ) {
  
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if ( !saved.length ) {
  
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = slice.call( arguments );
            dataPriv.set( this, type, saved );
  
            // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous
            notAsync = expectSync( this, type );
            this[ type ]();
            result = dataPriv.get( this, type );
            if ( saved !== result || notAsync ) {
              dataPriv.set( this, type, false );
            } else {
              result = {};
            }
            if ( saved !== result ) {
  
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();
              return result.value;
            }
  
          // If this is an inner synthetic event for an event with a bubbling surrogate
          // (focus or blur), assume that the surrogate already propagated from triggering the
          // native event and prevent that from happening again here.
          // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
          // bubbling surrogate propagates *after* the non-bubbling base), but that seems
          // less bad than duplication.
          } else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
            event.stopPropagation();
          }
  
        // If this is a native event triggered above, everything is now in order
        // Fire an inner synthetic event with the original arguments
        } else if ( saved.length ) {
  
          // ...and capture the result
          dataPriv.set( this, type, {
            value: jQuery.event.trigger(
  
              // Support: IE <=9 - 11+
              // Extend with the prototype to reset the above stopImmediatePropagation()
              jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
              saved.slice( 1 ),
              this
            )
          } );
  
          // Abort handling of the native event
          event.stopImmediatePropagation();
        }
      }
    } );
  }
  
  jQuery.removeEvent = function( elem, type, handle ) {
  
    // This "if" is needed for plain objects
    if ( elem.removeEventListener ) {
      elem.removeEventListener( type, handle );
    }
  };
  
  jQuery.Event = function( src, props ) {
  
    // Allow instantiation without the 'new' keyword
    if ( !( this instanceof jQuery.Event ) ) {
      return new jQuery.Event( src, props );
    }
  
    // Event object
    if ( src && src.type ) {
      this.originalEvent = src;
      this.type = src.type;
  
      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented ||
          src.defaultPrevented === undefined &&
  
          // Support: Android <=2.3 only
          src.returnValue === false ?
        returnTrue :
        returnFalse;
  
      // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)
      this.target = ( src.target && src.target.nodeType === 3 ) ?
        src.target.parentNode :
        src.target;
  
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget;
  
    // Event type
    } else {
      this.type = src;
    }
  
    // Put explicitly provided properties onto the event object
    if ( props ) {
      jQuery.extend( this, props );
    }
  
    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || Date.now();
  
    // Mark it as fixed
    this[ jQuery.expando ] = true;
  };
  
  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
  
    preventDefault: function() {
      var e = this.originalEvent;
  
      this.isDefaultPrevented = returnTrue;
  
      if ( e && !this.isSimulated ) {
        e.preventDefault();
      }
    },
    stopPropagation: function() {
      var e = this.originalEvent;
  
      this.isPropagationStopped = returnTrue;
  
      if ( e && !this.isSimulated ) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function() {
      var e = this.originalEvent;
  
      this.isImmediatePropagationStopped = returnTrue;
  
      if ( e && !this.isSimulated ) {
        e.stopImmediatePropagation();
      }
  
      this.stopPropagation();
    }
  };
  
  // Includes all common event props including KeyEvent and MouseEvent specific props
  jQuery.each( {
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
  
    which: function( event ) {
      var button = event.button;
  
      // Add which for key events
      if ( event.which == null && rkeyEvent.test( event.type ) ) {
        return event.charCode != null ? event.charCode : event.keyCode;
      }
  
      // Add which for click: 1 === left; 2 === middle; 3 === right
      if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
        if ( button & 1 ) {
          return 1;
        }
  
        if ( button & 2 ) {
          return 3;
        }
  
        if ( button & 4 ) {
          return 2;
        }
  
        return 0;
      }
  
      return event.which;
    }
  }, jQuery.event.addProp );
  
  jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
    jQuery.event.special[ type ] = {
  
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function() {
  
        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative( this, type, expectSync );
  
        // Return false to allow normal processing in the caller
        return false;
      },
      trigger: function() {
  
        // Force setup before trigger
        leverageNative( this, type );
  
        // Return non-false to allow normal event-path propagation
        return true;
      },
  
      delegateType: delegateType
    };
  } );
  
  // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).
  jQuery.each( {
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function( orig, fix ) {
    jQuery.event.special[ orig ] = {
      delegateType: fix,
      bindType: fix,
  
      handle: function( event ) {
        var ret,
          target = this,
          related = event.relatedTarget,
          handleObj = event.handleObj;
  
        // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply( this, arguments );
          event.type = fix;
        }
        return ret;
      }
    };
  } );
  
  jQuery.fn.extend( {
  
    on: function( types, selector, data, fn ) {
      return on( this, types, selector, data, fn );
    },
    one: function( types, selector, data, fn ) {
      return on( this, types, selector, data, fn, 1 );
    },
    off: function( types, selector, fn ) {
      var handleObj, type;
      if ( types && types.preventDefault && types.handleObj ) {
  
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery( types.delegateTarget ).off(
          handleObj.namespace ?
            handleObj.origType + "." + handleObj.namespace :
            handleObj.origType,
          handleObj.selector,
          handleObj.handler
        );
        return this;
      }
      if ( typeof types === "object" ) {
  
        // ( types-object [, selector] )
        for ( type in types ) {
          this.off( type, selector, types[ type ] );
        }
        return this;
      }
      if ( selector === false || typeof selector === "function" ) {
  
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if ( fn === false ) {
        fn = returnFalse;
      }
      return this.each( function() {
        jQuery.event.remove( this, types, fn, selector );
      } );
    }
  } );
  
  
  var
  
    // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i,
  
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
  
  // Prefer a tbody over its parent table for containing new rows
  function manipulationTarget( elem, content ) {
    if ( nodeName( elem, "table" ) &&
      nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {
  
      return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
    }
  
    return elem;
  }
  
  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript( elem ) {
    elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
    return elem;
  }
  function restoreScript( elem ) {
    if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
      elem.type = elem.type.slice( 5 );
    } else {
      elem.removeAttribute( "type" );
    }
  
    return elem;
  }
  
  function cloneCopyEvent( src, dest ) {
    var i, l, type, pdataOld, udataOld, udataCur, events;
  
    if ( dest.nodeType !== 1 ) {
      return;
    }
  
    // 1. Copy private data: events, handlers, etc.
    if ( dataPriv.hasData( src ) ) {
      pdataOld = dataPriv.get( src );
      events = pdataOld.events;
  
      if ( events ) {
        dataPriv.remove( dest, "handle events" );
  
        for ( type in events ) {
          for ( i = 0, l = events[ type ].length; i < l; i++ ) {
            jQuery.event.add( dest, type, events[ type ][ i ] );
          }
        }
      }
    }
  
    // 2. Copy user data
    if ( dataUser.hasData( src ) ) {
      udataOld = dataUser.access( src );
      udataCur = jQuery.extend( {}, udataOld );
  
      dataUser.set( dest, udataCur );
    }
  }
  
  // Fix IE bugs, see support tests
  function fixInput( src, dest ) {
    var nodeName = dest.nodeName.toLowerCase();
  
    // Fails to persist the checked state of a cloned checkbox or radio button.
    if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
      dest.checked = src.checked;
  
    // Fails to return the selected option to the default selected state when cloning options
    } else if ( nodeName === "input" || nodeName === "textarea" ) {
      dest.defaultValue = src.defaultValue;
    }
  }
  
  function domManip( collection, args, callback, ignored ) {
  
    // Flatten any nested arrays
    args = flat( args );
  
    var fragment, first, scripts, hasScripts, node, doc,
      i = 0,
      l = collection.length,
      iNoClone = l - 1,
      value = args[ 0 ],
      valueIsFunction = isFunction( value );
  
    // We can't cloneNode fragments that contain checked, in WebKit
    if ( valueIsFunction ||
        ( l > 1 && typeof value === "string" &&
          !support.checkClone && rchecked.test( value ) ) ) {
      return collection.each( function( index ) {
        var self = collection.eq( index );
        if ( valueIsFunction ) {
          args[ 0 ] = value.call( this, index, self.html() );
        }
        domManip( self, args, callback, ignored );
      } );
    }
  
    if ( l ) {
      fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
      first = fragment.firstChild;
  
      if ( fragment.childNodes.length === 1 ) {
        fragment = first;
      }
  
      // Require either new content or an interest in ignored elements to invoke the callback
      if ( first || ignored ) {
        scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
        hasScripts = scripts.length;
  
        // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).
        for ( ; i < l; i++ ) {
          node = fragment;
  
          if ( i !== iNoClone ) {
            node = jQuery.clone( node, true, true );
  
            // Keep references to cloned scripts for later restoration
            if ( hasScripts ) {
  
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge( scripts, getAll( node, "script" ) );
            }
          }
  
          callback.call( collection[ i ], node, i );
        }
  
        if ( hasScripts ) {
          doc = scripts[ scripts.length - 1 ].ownerDocument;
  
          // Reenable scripts
          jQuery.map( scripts, restoreScript );
  
          // Evaluate executable scripts on first document insertion
          for ( i = 0; i < hasScripts; i++ ) {
            node = scripts[ i ];
            if ( rscriptType.test( node.type || "" ) &&
              !dataPriv.access( node, "globalEval" ) &&
              jQuery.contains( doc, node ) ) {
  
              if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {
  
                // Optional AJAX dependency, but won't run scripts if not present
                if ( jQuery._evalUrl && !node.noModule ) {
                  jQuery._evalUrl( node.src, {
                    nonce: node.nonce || node.getAttribute( "nonce" )
                  }, doc );
                }
              } else {
                DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
              }
            }
          }
        }
      }
    }
  
    return collection;
  }
  
  function remove( elem, selector, keepData ) {
    var node,
      nodes = selector ? jQuery.filter( selector, elem ) : elem,
      i = 0;
  
    for ( ; ( node = nodes[ i ] ) != null; i++ ) {
      if ( !keepData && node.nodeType === 1 ) {
        jQuery.cleanData( getAll( node ) );
      }
  
      if ( node.parentNode ) {
        if ( keepData && isAttached( node ) ) {
          setGlobalEval( getAll( node, "script" ) );
        }
        node.parentNode.removeChild( node );
      }
    }
  
    return elem;
  }
  
  jQuery.extend( {
    htmlPrefilter: function( html ) {
      return html;
    },
  
    clone: function( elem, dataAndEvents, deepDataAndEvents ) {
      var i, l, srcElements, destElements,
        clone = elem.cloneNode( true ),
        inPage = isAttached( elem );
  
      // Fix IE cloning issues
      if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
          !jQuery.isXMLDoc( elem ) ) {
  
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll( clone );
        srcElements = getAll( elem );
  
        for ( i = 0, l = srcElements.length; i < l; i++ ) {
          fixInput( srcElements[ i ], destElements[ i ] );
        }
      }
  
      // Copy the events from the original to the clone
      if ( dataAndEvents ) {
        if ( deepDataAndEvents ) {
          srcElements = srcElements || getAll( elem );
          destElements = destElements || getAll( clone );
  
          for ( i = 0, l = srcElements.length; i < l; i++ ) {
            cloneCopyEvent( srcElements[ i ], destElements[ i ] );
          }
        } else {
          cloneCopyEvent( elem, clone );
        }
      }
  
      // Preserve script evaluation history
      destElements = getAll( clone, "script" );
      if ( destElements.length > 0 ) {
        setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
      }
  
      // Return the cloned set
      return clone;
    },
  
    cleanData: function( elems ) {
      var data, elem, type,
        special = jQuery.event.special,
        i = 0;
  
      for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
        if ( acceptData( elem ) ) {
          if ( ( data = elem[ dataPriv.expando ] ) ) {
            if ( data.events ) {
              for ( type in data.events ) {
                if ( special[ type ] ) {
                  jQuery.event.remove( elem, type );
  
                // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent( elem, type, data.handle );
                }
              }
            }
  
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[ dataPriv.expando ] = undefined;
          }
          if ( elem[ dataUser.expando ] ) {
  
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[ dataUser.expando ] = undefined;
          }
        }
      }
    }
  } );
  
  jQuery.fn.extend( {
    detach: function( selector ) {
      return remove( this, selector, true );
    },
  
    remove: function( selector ) {
      return remove( this, selector );
    },
  
    text: function( value ) {
      return access( this, function( value ) {
        return value === undefined ?
          jQuery.text( this ) :
          this.empty().each( function() {
            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
              this.textContent = value;
            }
          } );
      }, null, value, arguments.length );
    },
  
    append: function() {
      return domManip( this, arguments, function( elem ) {
        if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
          var target = manipulationTarget( this, elem );
          target.appendChild( elem );
        }
      } );
    },
  
    prepend: function() {
      return domManip( this, arguments, function( elem ) {
        if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
          var target = manipulationTarget( this, elem );
          target.insertBefore( elem, target.firstChild );
        }
      } );
    },
  
    before: function() {
      return domManip( this, arguments, function( elem ) {
        if ( this.parentNode ) {
          this.parentNode.insertBefore( elem, this );
        }
      } );
    },
  
    after: function() {
      return domManip( this, arguments, function( elem ) {
        if ( this.parentNode ) {
          this.parentNode.insertBefore( elem, this.nextSibling );
        }
      } );
    },
  
    empty: function() {
      var elem,
        i = 0;
  
      for ( ; ( elem = this[ i ] ) != null; i++ ) {
        if ( elem.nodeType === 1 ) {
  
          // Prevent memory leaks
          jQuery.cleanData( getAll( elem, false ) );
  
          // Remove any remaining nodes
          elem.textContent = "";
        }
      }
  
      return this;
    },
  
    clone: function( dataAndEvents, deepDataAndEvents ) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
  
      return this.map( function() {
        return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
      } );
    },
  
    html: function( value ) {
      return access( this, function( value ) {
        var elem = this[ 0 ] || {},
          i = 0,
          l = this.length;
  
        if ( value === undefined && elem.nodeType === 1 ) {
          return elem.innerHTML;
        }
  
        // See if we can take a shortcut and just use innerHTML
        if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
          !wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
  
          value = jQuery.htmlPrefilter( value );
  
          try {
            for ( ; i < l; i++ ) {
              elem = this[ i ] || {};
  
              // Remove element nodes and prevent memory leaks
              if ( elem.nodeType === 1 ) {
                jQuery.cleanData( getAll( elem, false ) );
                elem.innerHTML = value;
              }
            }
  
            elem = 0;
  
          // If using innerHTML throws an exception, use the fallback method
          } catch ( e ) {}
        }
  
        if ( elem ) {
          this.empty().append( value );
        }
      }, null, value, arguments.length );
    },
  
    replaceWith: function() {
      var ignored = [];
  
      // Make the changes, replacing each non-ignored context element with the new content
      return domManip( this, arguments, function( elem ) {
        var parent = this.parentNode;
  
        if ( jQuery.inArray( this, ignored ) < 0 ) {
          jQuery.cleanData( getAll( this ) );
          if ( parent ) {
            parent.replaceChild( elem, this );
          }
        }
  
      // Force callback invocation
      }, ignored );
    }
  } );
  
  jQuery.each( {
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function( name, original ) {
    jQuery.fn[ name ] = function( selector ) {
      var elems,
        ret = [],
        insert = jQuery( selector ),
        last = insert.length - 1,
        i = 0;
  
      for ( ; i <= last; i++ ) {
        elems = i === last ? this : this.clone( true );
        jQuery( insert[ i ] )[ original ]( elems );
  
        // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit
        push.apply( ret, elems.get() );
      }
  
      return this.pushStack( ret );
    };
  } );
  var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
  
  var getStyles = function( elem ) {
  
      // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
      // IE throws on elements created in popups
      // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
      var view = elem.ownerDocument.defaultView;
  
      if ( !view || !view.opener ) {
        view = window;
      }
  
      return view.getComputedStyle( elem );
    };
  
  var swap = function( elem, options, callback ) {
    var ret, name,
      old = {};
  
    // Remember the old values, and insert the new ones
    for ( name in options ) {
      old[ name ] = elem.style[ name ];
      elem.style[ name ] = options[ name ];
    }
  
    ret = callback.call( elem );
  
    // Revert the old values
    for ( name in options ) {
      elem.style[ name ] = old[ name ];
    }
  
    return ret;
  };
  
  
  var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );
  
  
  
  ( function() {
  
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
  
      // This is a singleton, we need to execute it only once
      if ( !div ) {
        return;
      }
  
      container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
        "margin-top:1px;padding:0;border:0";
      div.style.cssText =
        "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
        "margin:auto;border:1px;padding:1px;" +
        "width:60%;top:1%";
      documentElement.appendChild( container ).appendChild( div );
  
      var divStyle = window.getComputedStyle( div );
      pixelPositionVal = divStyle.top !== "1%";
  
      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
      reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;
  
      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't
      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;
  
      // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements
      boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;
  
      // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)
      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;
  
      documentElement.removeChild( container );
  
      // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed
      div = null;
    }
  
    function roundPixelMeasures( measure ) {
      return Math.round( parseFloat( measure ) );
    }
  
    var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
      reliableTrDimensionsVal, reliableMarginLeftVal,
      container = document.createElement( "div" ),
      div = document.createElement( "div" );
  
    // Finish early in limited (non-browser) environments
    if ( !div.style ) {
      return;
    }
  
    // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)
    div.style.backgroundClip = "content-box";
    div.cloneNode( true ).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
  
    jQuery.extend( support, {
      boxSizingReliable: function() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function() {
        computeStyleTests();
        return scrollboxSizeVal;
      },
  
      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      reliableTrDimensions: function() {
        var table, tr, trChild, trStyle;
        if ( reliableTrDimensionsVal == null ) {
          table = document.createElement( "table" );
          tr = document.createElement( "tr" );
          trChild = document.createElement( "div" );
  
          table.style.cssText = "position:absolute;left:-11111px";
          tr.style.height = "1px";
          trChild.style.height = "9px";
  
          documentElement
            .appendChild( table )
            .appendChild( tr )
            .appendChild( trChild );
  
          trStyle = window.getComputedStyle( tr );
          reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;
  
          documentElement.removeChild( table );
        }
        return reliableTrDimensionsVal;
      }
    } );
  } )();
  
  
  function curCSS( elem, name, computed ) {
    var width, minWidth, maxWidth, ret,
  
      // Support: Firefox 51+
      // Retrieving style before computed somehow
      // fixes an issue with getting wrong values
      // on detached elements
      style = elem.style;
  
    computed = computed || getStyles( elem );
  
    // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)
    if ( computed ) {
      ret = computed.getPropertyValue( name ) || computed[ name ];
  
      if ( ret === "" && !isAttached( elem ) ) {
        ret = jQuery.style( elem, name );
      }
  
      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values
      if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {
  
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;
  
        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;
  
        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }
  
    return ret !== undefined ?
  
      // Support: IE <=9 - 11 only
      // IE returns zIndex value as an integer.
      ret + "" :
      ret;
  }
  
  
  function addGetHookIf( conditionFn, hookFn ) {
  
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function() {
        if ( conditionFn() ) {
  
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }
  
        // Hook needed; redefine it so that the support test is not executed again.
        return ( this.get = hookFn ).apply( this, arguments );
      }
    };
  }
  
  
  var cssPrefixes = [ "Webkit", "Moz", "ms" ],
    emptyStyle = document.createElement( "div" ).style,
    vendorProps = {};
  
  // Return a vendor-prefixed property or undefined
  function vendorPropName( name ) {
  
    // Check for vendor prefixed names
    var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
      i = cssPrefixes.length;
  
    while ( i-- ) {
      name = cssPrefixes[ i ] + capName;
      if ( name in emptyStyle ) {
        return name;
      }
    }
  }
  
  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
  function finalPropName( name ) {
    var final = jQuery.cssProps[ name ] || vendorProps[ name ];
  
    if ( final ) {
      return final;
    }
    if ( name in emptyStyle ) {
      return name;
    }
    return vendorProps[ name ] = vendorPropName( name ) || name;
  }
  
  
  var
  
    // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    rcustomProp = /^--/,
    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
    cssNormalTransform = {
      letterSpacing: "0",
      fontWeight: "400"
    };
  
  function setPositiveNumber( _elem, value, subtract ) {
  
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec( value );
    return matches ?
  
      // Guard against undefined "subtract", e.g., when used as in cssHooks
      Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
      value;
  }
  
  function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
    var i = dimension === "width" ? 1 : 0,
      extra = 0,
      delta = 0;
  
    // Adjustment may not be necessary
    if ( box === ( isBorderBox ? "border" : "content" ) ) {
      return 0;
    }
  
    for ( ; i < 4; i += 2 ) {
  
      // Both box models exclude margin
      if ( box === "margin" ) {
        delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
      }
  
      // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
      if ( !isBorderBox ) {
  
        // Add padding
        delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
  
        // For "border" or "margin", add border
        if ( box !== "padding" ) {
          delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
  
        // But still keep track of it otherwise
        } else {
          extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
        }
  
      // If we get here with a border-box (content + padding + border), we're seeking "content" or
      // "padding" or "margin"
      } else {
  
        // For "content", subtract padding
        if ( box === "content" ) {
          delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
        }
  
        // For "content" or "padding", subtract border
        if ( box !== "margin" ) {
          delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
        }
      }
    }
  
    // Account for positive content-box scroll gutter when requested by providing computedVal
    if ( !isBorderBox && computedVal >= 0 ) {
  
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max( 0, Math.ceil(
        elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
        computedVal -
        delta -
        extra -
        0.5
  
      // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      ) ) || 0;
    }
  
    return delta;
  }
  
  function getWidthOrHeight( elem, dimension, extra ) {
  
    // Start with computed style
    var styles = getStyles( elem ),
  
      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
      // Fake content-box until we know it's needed to know the true value.
      boxSizingNeeded = !support.boxSizingReliable() || extra,
      isBorderBox = boxSizingNeeded &&
        jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
      valueIsBorderBox = isBorderBox,
  
      val = curCSS( elem, dimension, styles ),
      offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );
  
    // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.
    if ( rnumnonpx.test( val ) ) {
      if ( !extra ) {
        return val;
      }
      val = "auto";
    }
  
  
    // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.
    if ( ( !support.boxSizingReliable() && isBorderBox ||
  
      // Support: IE 10 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Interestingly, in some cases IE 9 doesn't suffer from this issue.
      !support.reliableTrDimensions() && nodeName( elem, "tr" ) ||
  
      // Fall back to offsetWidth/offsetHeight when value is "auto"
      // This happens for inline elements with no explicit setting (gh-3571)
      val === "auto" ||
  
      // Support: Android <=4.1 - 4.3 only
      // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
      !parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
  
      // Make sure the element is visible & connected
      elem.getClientRects().length ) {
  
      isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
  
      // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.
      valueIsBorderBox = offsetProp in elem;
      if ( valueIsBorderBox ) {
        val = elem[ offsetProp ];
      }
    }
  
    // Normalize "" and auto
    val = parseFloat( val ) || 0;
  
    // Adjust for the element's box model
    return ( val +
      boxModelAdjustment(
        elem,
        dimension,
        extra || ( isBorderBox ? "border" : "content" ),
        valueIsBorderBox,
        styles,
  
        // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val
      )
    ) + "px";
  }
  
  jQuery.extend( {
  
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function( elem, computed ) {
          if ( computed ) {
  
            // We should always get a number back from opacity
            var ret = curCSS( elem, "opacity" );
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
  
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "gridArea": true,
      "gridColumn": true,
      "gridColumnEnd": true,
      "gridColumnStart": true,
      "gridRow": true,
      "gridRowEnd": true,
      "gridRowStart": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
  
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
  
    // Get and set the style property on a DOM Node
    style: function( elem, name, value, extra ) {
  
      // Don't set styles on text and comment nodes
      if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
        return;
      }
  
      // Make sure that we're working with the right name
      var ret, type, hooks,
        origName = camelCase( name ),
        isCustomProp = rcustomProp.test( name ),
        style = elem.style;
  
      // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.
      if ( !isCustomProp ) {
        name = finalPropName( origName );
      }
  
      // Gets hook for the prefixed version, then unprefixed version
      hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
  
      // Check if we're setting a value
      if ( value !== undefined ) {
        type = typeof value;
  
        // Convert "+=" or "-=" to relative numbers (#7345)
        if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
          value = adjustCSS( elem, name, ret );
  
          // Fixes bug #9237
          type = "number";
        }
  
        // Make sure that null and NaN values aren't set (#7116)
        if ( value == null || value !== value ) {
          return;
        }
  
        // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.
        if ( type === "number" && !isCustomProp ) {
          value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
        }
  
        // background-* props affect original clone's values
        if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
          style[ name ] = "inherit";
        }
  
        // If a hook was provided, use that value, otherwise just set the specified value
        if ( !hooks || !( "set" in hooks ) ||
          ( value = hooks.set( elem, value, extra ) ) !== undefined ) {
  
          if ( isCustomProp ) {
            style.setProperty( name, value );
          } else {
            style[ name ] = value;
          }
        }
  
      } else {
  
        // If a hook was provided get the non-computed value from there
        if ( hooks && "get" in hooks &&
          ( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
  
          return ret;
        }
  
        // Otherwise just get the value from the style object
        return style[ name ];
      }
    },
  
    css: function( elem, name, extra, styles ) {
      var val, num, hooks,
        origName = camelCase( name ),
        isCustomProp = rcustomProp.test( name );
  
      // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.
      if ( !isCustomProp ) {
        name = finalPropName( origName );
      }
  
      // Try prefixed name followed by the unprefixed name
      hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
  
      // If a hook was provided get the computed value from there
      if ( hooks && "get" in hooks ) {
        val = hooks.get( elem, true, extra );
      }
  
      // Otherwise, if a way to get the computed value exists, use that
      if ( val === undefined ) {
        val = curCSS( elem, name, styles );
      }
  
      // Convert "normal" to computed value
      if ( val === "normal" && name in cssNormalTransform ) {
        val = cssNormalTransform[ name ];
      }
  
      // Make numeric if forced or a qualifier was provided and val looks numeric
      if ( extra === "" || extra ) {
        num = parseFloat( val );
        return extra === true || isFinite( num ) ? num || 0 : val;
      }
  
      return val;
    }
  } );
  
  jQuery.each( [ "height", "width" ], function( _i, dimension ) {
    jQuery.cssHooks[ dimension ] = {
      get: function( elem, computed, extra ) {
        if ( computed ) {
  
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
  
            // Support: Safari 8+
            // Table columns in Safari have non-zero offsetWidth & zero
            // getBoundingClientRect().width unless display is changed.
            // Support: IE <=11 only
            // Running getBoundingClientRect on a disconnected node
            // in IE throws an error.
            ( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
              swap( elem, cssShow, function() {
                return getWidthOrHeight( elem, dimension, extra );
              } ) :
              getWidthOrHeight( elem, dimension, extra );
        }
      },
  
      set: function( elem, value, extra ) {
        var matches,
          styles = getStyles( elem ),
  
          // Only read styles.position if the test has a chance to fail
          // to avoid forcing a reflow.
          scrollboxSizeBuggy = !support.scrollboxSize() &&
            styles.position === "absolute",
  
          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
          boxSizingNeeded = scrollboxSizeBuggy || extra,
          isBorderBox = boxSizingNeeded &&
            jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
          subtract = extra ?
            boxModelAdjustment(
              elem,
              dimension,
              extra,
              isBorderBox,
              styles
            ) :
            0;
  
        // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)
        if ( isBorderBox && scrollboxSizeBuggy ) {
          subtract -= Math.ceil(
            elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
            parseFloat( styles[ dimension ] ) -
            boxModelAdjustment( elem, dimension, "border", false, styles ) -
            0.5
          );
        }
  
        // Convert to pixels if value adjustment is needed
        if ( subtract && ( matches = rcssNum.exec( value ) ) &&
          ( matches[ 3 ] || "px" ) !== "px" ) {
  
          elem.style[ dimension ] = value;
          value = jQuery.css( elem, dimension );
        }
  
        return setPositiveNumber( elem, value, subtract );
      }
    };
  } );
  
  jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
    function( elem, computed ) {
      if ( computed ) {
        return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
          elem.getBoundingClientRect().left -
            swap( elem, { marginLeft: 0 }, function() {
              return elem.getBoundingClientRect().left;
            } )
          ) + "px";
      }
    }
  );
  
  // These hooks are used by animate to expand properties
  jQuery.each( {
    margin: "",
    padding: "",
    border: "Width"
  }, function( prefix, suffix ) {
    jQuery.cssHooks[ prefix + suffix ] = {
      expand: function( value ) {
        var i = 0,
          expanded = {},
  
          // Assumes a single number if not a string
          parts = typeof value === "string" ? value.split( " " ) : [ value ];
  
        for ( ; i < 4; i++ ) {
          expanded[ prefix + cssExpand[ i ] + suffix ] =
            parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
        }
  
        return expanded;
      }
    };
  
    if ( prefix !== "margin" ) {
      jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
    }
  } );
  
  jQuery.fn.extend( {
    css: function( name, value ) {
      return access( this, function( elem, name, value ) {
        var styles, len,
          map = {},
          i = 0;
  
        if ( Array.isArray( name ) ) {
          styles = getStyles( elem );
          len = name.length;
  
          for ( ; i < len; i++ ) {
            map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
          }
  
          return map;
        }
  
        return value !== undefined ?
          jQuery.style( elem, name, value ) :
          jQuery.css( elem, name );
      }, name, value, arguments.length > 1 );
    }
  } );
  
  
  function Tween( elem, options, prop, end, easing ) {
    return new Tween.prototype.init( elem, options, prop, end, easing );
  }
  jQuery.Tween = Tween;
  
  Tween.prototype = {
    constructor: Tween,
    init: function( elem, options, prop, end, easing, unit ) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
    },
    cur: function() {
      var hooks = Tween.propHooks[ this.prop ];
  
      return hooks && hooks.get ?
        hooks.get( this ) :
        Tween.propHooks._default.get( this );
    },
    run: function( percent ) {
      var eased,
        hooks = Tween.propHooks[ this.prop ];
  
      if ( this.options.duration ) {
        this.pos = eased = jQuery.easing[ this.easing ](
          percent, this.options.duration * percent, 0, 1, this.options.duration
        );
      } else {
        this.pos = eased = percent;
      }
      this.now = ( this.end - this.start ) * eased + this.start;
  
      if ( this.options.step ) {
        this.options.step.call( this.elem, this.now, this );
      }
  
      if ( hooks && hooks.set ) {
        hooks.set( this );
      } else {
        Tween.propHooks._default.set( this );
      }
      return this;
    }
  };
  
  Tween.prototype.init.prototype = Tween.prototype;
  
  Tween.propHooks = {
    _default: {
      get: function( tween ) {
        var result;
  
        // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.
        if ( tween.elem.nodeType !== 1 ||
          tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
          return tween.elem[ tween.prop ];
        }
  
        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = jQuery.css( tween.elem, tween.prop, "" );
  
        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === "auto" ? 0 : result;
      },
      set: function( tween ) {
  
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if ( jQuery.fx.step[ tween.prop ] ) {
          jQuery.fx.step[ tween.prop ]( tween );
        } else if ( tween.elem.nodeType === 1 && (
            jQuery.cssHooks[ tween.prop ] ||
            tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
          jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
        } else {
          tween.elem[ tween.prop ] = tween.now;
        }
      }
    }
  };
  
  // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function( tween ) {
      if ( tween.elem.nodeType && tween.elem.parentNode ) {
        tween.elem[ tween.prop ] = tween.now;
      }
    }
  };
  
  jQuery.easing = {
    linear: function( p ) {
      return p;
    },
    swing: function( p ) {
      return 0.5 - Math.cos( p * Math.PI ) / 2;
    },
    _default: "swing"
  };
  
  jQuery.fx = Tween.prototype.init;
  
  // Back compat <1.8 extension point
  jQuery.fx.step = {};
  
  
  
  
  var
    fxNow, inProgress,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rrun = /queueHooks$/;
  
  function schedule() {
    if ( inProgress ) {
      if ( document.hidden === false && window.requestAnimationFrame ) {
        window.requestAnimationFrame( schedule );
      } else {
        window.setTimeout( schedule, jQuery.fx.interval );
      }
  
      jQuery.fx.tick();
    }
  }
  
  // Animations created synchronously will run synchronously
  function createFxNow() {
    window.setTimeout( function() {
      fxNow = undefined;
    } );
    return ( fxNow = Date.now() );
  }
  
  // Generate parameters to create a standard animation
  function genFx( type, includeWidth ) {
    var which,
      i = 0,
      attrs = { height: type };
  
    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for ( ; i < 4; i += 2 - includeWidth ) {
      which = cssExpand[ i ];
      attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
    }
  
    if ( includeWidth ) {
      attrs.opacity = attrs.width = type;
    }
  
    return attrs;
  }
  
  function createTween( value, prop, animation ) {
    var tween,
      collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
      index = 0,
      length = collection.length;
    for ( ; index < length; index++ ) {
      if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
  
        // We're done with this property
        return tween;
      }
    }
  }
  
  function defaultPrefilter( elem, props, opts ) {
    var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
      isBox = "width" in props || "height" in props,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHiddenWithinTree( elem ),
      dataShow = dataPriv.get( elem, "fxshow" );
  
    // Queue-skipping animations hijack the fx hooks
    if ( !opts.queue ) {
      hooks = jQuery._queueHooks( elem, "fx" );
      if ( hooks.unqueued == null ) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function() {
          if ( !hooks.unqueued ) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;
  
      anim.always( function() {
  
        // Ensure the complete handler is called before this completes
        anim.always( function() {
          hooks.unqueued--;
          if ( !jQuery.queue( elem, "fx" ).length ) {
            hooks.empty.fire();
          }
        } );
      } );
    }
  
    // Detect show/hide animations
    for ( prop in props ) {
      value = props[ prop ];
      if ( rfxtypes.test( value ) ) {
        delete props[ prop ];
        toggle = toggle || value === "toggle";
        if ( value === ( hidden ? "hide" : "show" ) ) {
  
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
            hidden = true;
  
          // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }
        orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
      }
    }
  
    // Bail out if this is a no-op like .hide().hide()
    propTween = !jQuery.isEmptyObject( props );
    if ( !propTween && jQuery.isEmptyObject( orig ) ) {
      return;
    }
  
    // Restrict "overflow" and "display" styles during box animations
    if ( isBox && elem.nodeType === 1 ) {
  
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
  
      // Identify a display type, preferring old show/hide data over the CSS cascade
      restoreDisplay = dataShow && dataShow.display;
      if ( restoreDisplay == null ) {
        restoreDisplay = dataPriv.get( elem, "display" );
      }
      display = jQuery.css( elem, "display" );
      if ( display === "none" ) {
        if ( restoreDisplay ) {
          display = restoreDisplay;
        } else {
  
          // Get nonempty value(s) by temporarily forcing visibility
          showHide( [ elem ], true );
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css( elem, "display" );
          showHide( [ elem ] );
        }
      }
  
      // Animate inline elements as inline-block
      if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
        if ( jQuery.css( elem, "float" ) === "none" ) {
  
          // Restore the original display value at the end of pure show/hide animations
          if ( !propTween ) {
            anim.done( function() {
              style.display = restoreDisplay;
            } );
            if ( restoreDisplay == null ) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }
          style.display = "inline-block";
        }
      }
    }
  
    if ( opts.overflow ) {
      style.overflow = "hidden";
      anim.always( function() {
        style.overflow = opts.overflow[ 0 ];
        style.overflowX = opts.overflow[ 1 ];
        style.overflowY = opts.overflow[ 2 ];
      } );
    }
  
    // Implement show/hide animations
    propTween = false;
    for ( prop in orig ) {
  
      // General show/hide setup for this element animation
      if ( !propTween ) {
        if ( dataShow ) {
          if ( "hidden" in dataShow ) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
        }
  
        // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
        if ( toggle ) {
          dataShow.hidden = !hidden;
        }
  
        // Show elements before animating them
        if ( hidden ) {
          showHide( [ elem ], true );
        }
  
        /* eslint-disable no-loop-func */
  
        anim.done( function() {
  
        /* eslint-enable no-loop-func */
  
          // The final step of a "hide" animation is actually hiding the element
          if ( !hidden ) {
            showHide( [ elem ] );
          }
          dataPriv.remove( elem, "fxshow" );
          for ( prop in orig ) {
            jQuery.style( elem, prop, orig[ prop ] );
          }
        } );
      }
  
      // Per-property setup
      propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
      if ( !( prop in dataShow ) ) {
        dataShow[ prop ] = propTween.start;
        if ( hidden ) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }
  
  function propFilter( props, specialEasing ) {
    var index, name, easing, value, hooks;
  
    // camelCase, specialEasing and expand cssHook pass
    for ( index in props ) {
      name = camelCase( index );
      easing = specialEasing[ name ];
      value = props[ index ];
      if ( Array.isArray( value ) ) {
        easing = value[ 1 ];
        value = props[ index ] = value[ 0 ];
      }
  
      if ( index !== name ) {
        props[ name ] = value;
        delete props[ index ];
      }
  
      hooks = jQuery.cssHooks[ name ];
      if ( hooks && "expand" in hooks ) {
        value = hooks.expand( value );
        delete props[ name ];
  
        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for ( index in value ) {
          if ( !( index in props ) ) {
            props[ index ] = value[ index ];
            specialEasing[ index ] = easing;
          }
        }
      } else {
        specialEasing[ name ] = easing;
      }
    }
  }
  
  function Animation( elem, properties, options ) {
    var result,
      stopped,
      index = 0,
      length = Animation.prefilters.length,
      deferred = jQuery.Deferred().always( function() {
  
        // Don't match elem in the :animated selector
        delete tick.elem;
      } ),
      tick = function() {
        if ( stopped ) {
          return false;
        }
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
  
          // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
          temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;
  
        for ( ; index < length; index++ ) {
          animation.tweens[ index ].run( percent );
        }
  
        deferred.notifyWith( elem, [ animation, percent, remaining ] );
  
        // If there's more to do, yield
        if ( percent < 1 && length ) {
          return remaining;
        }
  
        // If this was an empty animation, synthesize a final progress notification
        if ( !length ) {
          deferred.notifyWith( elem, [ animation, 1, 0 ] );
        }
  
        // Resolve the animation and report its conclusion
        deferred.resolveWith( elem, [ animation ] );
        return false;
      },
      animation = deferred.promise( {
        elem: elem,
        props: jQuery.extend( {}, properties ),
        opts: jQuery.extend( true, {
          specialEasing: {},
          easing: jQuery.easing._default
        }, options ),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function( prop, end ) {
          var tween = jQuery.Tween( elem, animation.opts, prop, end,
              animation.opts.specialEasing[ prop ] || animation.opts.easing );
          animation.tweens.push( tween );
          return tween;
        },
        stop: function( gotoEnd ) {
          var index = 0,
  
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if ( stopped ) {
            return this;
          }
          stopped = true;
          for ( ; index < length; index++ ) {
            animation.tweens[ index ].run( 1 );
          }
  
          // Resolve when we played the last frame; otherwise, reject
          if ( gotoEnd ) {
            deferred.notifyWith( elem, [ animation, 1, 0 ] );
            deferred.resolveWith( elem, [ animation, gotoEnd ] );
          } else {
            deferred.rejectWith( elem, [ animation, gotoEnd ] );
          }
          return this;
        }
      } ),
      props = animation.props;
  
    propFilter( props, animation.opts.specialEasing );
  
    for ( ; index < length; index++ ) {
      result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
      if ( result ) {
        if ( isFunction( result.stop ) ) {
          jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
            result.stop.bind( result );
        }
        return result;
      }
    }
  
    jQuery.map( props, createTween, animation );
  
    if ( isFunction( animation.opts.start ) ) {
      animation.opts.start.call( elem, animation );
    }
  
    // Attach callbacks from options
    animation
      .progress( animation.opts.progress )
      .done( animation.opts.done, animation.opts.complete )
      .fail( animation.opts.fail )
      .always( animation.opts.always );
  
    jQuery.fx.timer(
      jQuery.extend( tick, {
        elem: elem,
        anim: animation,
        queue: animation.opts.queue
      } )
    );
  
    return animation;
  }
  
  jQuery.Animation = jQuery.extend( Animation, {
  
    tweeners: {
      "*": [ function( prop, value ) {
        var tween = this.createTween( prop, value );
        adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
        return tween;
      } ]
    },
  
    tweener: function( props, callback ) {
      if ( isFunction( props ) ) {
        callback = props;
        props = [ "*" ];
      } else {
        props = props.match( rnothtmlwhite );
      }
  
      var prop,
        index = 0,
        length = props.length;
  
      for ( ; index < length; index++ ) {
        prop = props[ index ];
        Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
        Animation.tweeners[ prop ].unshift( callback );
      }
    },
  
    prefilters: [ defaultPrefilter ],
  
    prefilter: function( callback, prepend ) {
      if ( prepend ) {
        Animation.prefilters.unshift( callback );
      } else {
        Animation.prefilters.push( callback );
      }
    }
  } );
  
  jQuery.speed = function( speed, easing, fn ) {
    var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
      complete: fn || !fn && easing ||
        isFunction( speed ) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction( easing ) && easing
    };
  
    // Go to the end state if fx are off
    if ( jQuery.fx.off ) {
      opt.duration = 0;
  
    } else {
      if ( typeof opt.duration !== "number" ) {
        if ( opt.duration in jQuery.fx.speeds ) {
          opt.duration = jQuery.fx.speeds[ opt.duration ];
  
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    }
  
    // Normalize opt.queue - true/undefined/null -> "fx"
    if ( opt.queue == null || opt.queue === true ) {
      opt.queue = "fx";
    }
  
    // Queueing
    opt.old = opt.complete;
  
    opt.complete = function() {
      if ( isFunction( opt.old ) ) {
        opt.old.call( this );
      }
  
      if ( opt.queue ) {
        jQuery.dequeue( this, opt.queue );
      }
    };
  
    return opt;
  };
  
  jQuery.fn.extend( {
    fadeTo: function( speed, to, easing, callback ) {
  
      // Show any hidden elements after setting opacity to 0
      return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()
  
        // Animate to the value specified
        .end().animate( { opacity: to }, speed, easing, callback );
    },
    animate: function( prop, speed, easing, callback ) {
      var empty = jQuery.isEmptyObject( prop ),
        optall = jQuery.speed( speed, easing, callback ),
        doAnimation = function() {
  
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation( this, jQuery.extend( {}, prop ), optall );
  
          // Empty animations, or finishing resolves immediately
          if ( empty || dataPriv.get( this, "finish" ) ) {
            anim.stop( true );
          }
        };
        doAnimation.finish = doAnimation;
  
      return empty || optall.queue === false ?
        this.each( doAnimation ) :
        this.queue( optall.queue, doAnimation );
    },
    stop: function( type, clearQueue, gotoEnd ) {
      var stopQueue = function( hooks ) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop( gotoEnd );
      };
  
      if ( typeof type !== "string" ) {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if ( clearQueue ) {
        this.queue( type || "fx", [] );
      }
  
      return this.each( function() {
        var dequeue = true,
          index = type != null && type + "queueHooks",
          timers = jQuery.timers,
          data = dataPriv.get( this );
  
        if ( index ) {
          if ( data[ index ] && data[ index ].stop ) {
            stopQueue( data[ index ] );
          }
        } else {
          for ( index in data ) {
            if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
              stopQueue( data[ index ] );
            }
          }
        }
  
        for ( index = timers.length; index--; ) {
          if ( timers[ index ].elem === this &&
            ( type == null || timers[ index ].queue === type ) ) {
  
            timers[ index ].anim.stop( gotoEnd );
            dequeue = false;
            timers.splice( index, 1 );
          }
        }
  
        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if ( dequeue || !gotoEnd ) {
          jQuery.dequeue( this, type );
        }
      } );
    },
    finish: function( type ) {
      if ( type !== false ) {
        type = type || "fx";
      }
      return this.each( function() {
        var index,
          data = dataPriv.get( this ),
          queue = data[ type + "queue" ],
          hooks = data[ type + "queueHooks" ],
          timers = jQuery.timers,
          length = queue ? queue.length : 0;
  
        // Enable finishing flag on private data
        data.finish = true;
  
        // Empty the queue first
        jQuery.queue( this, type, [] );
  
        if ( hooks && hooks.stop ) {
          hooks.stop.call( this, true );
        }
  
        // Look for any active animations, and finish them
        for ( index = timers.length; index--; ) {
          if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
            timers[ index ].anim.stop( true );
            timers.splice( index, 1 );
          }
        }
  
        // Look for any animations in the old queue and finish them
        for ( index = 0; index < length; index++ ) {
          if ( queue[ index ] && queue[ index ].finish ) {
            queue[ index ].finish.call( this );
          }
        }
  
        // Turn off finishing flag
        delete data.finish;
      } );
    }
  } );
  
  jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
    var cssFn = jQuery.fn[ name ];
    jQuery.fn[ name ] = function( speed, easing, callback ) {
      return speed == null || typeof speed === "boolean" ?
        cssFn.apply( this, arguments ) :
        this.animate( genFx( name, true ), speed, easing, callback );
    };
  } );
  
  // Generate shortcuts for custom animations
  jQuery.each( {
    slideDown: genFx( "show" ),
    slideUp: genFx( "hide" ),
    slideToggle: genFx( "toggle" ),
    fadeIn: { opacity: "show" },
    fadeOut: { opacity: "hide" },
    fadeToggle: { opacity: "toggle" }
  }, function( name, props ) {
    jQuery.fn[ name ] = function( speed, easing, callback ) {
      return this.animate( props, speed, easing, callback );
    };
  } );
  
  jQuery.timers = [];
  jQuery.fx.tick = function() {
    var timer,
      i = 0,
      timers = jQuery.timers;
  
    fxNow = Date.now();
  
    for ( ; i < timers.length; i++ ) {
      timer = timers[ i ];
  
      // Run the timer and safely remove it when done (allowing for external removal)
      if ( !timer() && timers[ i ] === timer ) {
        timers.splice( i--, 1 );
      }
    }
  
    if ( !timers.length ) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };
  
  jQuery.fx.timer = function( timer ) {
    jQuery.timers.push( timer );
    jQuery.fx.start();
  };
  
  jQuery.fx.interval = 13;
  jQuery.fx.start = function() {
    if ( inProgress ) {
      return;
    }
  
    inProgress = true;
    schedule();
  };
  
  jQuery.fx.stop = function() {
    inProgress = null;
  };
  
  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
  
    // Default speed
    _default: 400
  };
  
  
  // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
  jQuery.fn.delay = function( time, type ) {
    time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
    type = type || "fx";
  
    return this.queue( type, function( next, hooks ) {
      var timeout = window.setTimeout( next, time );
      hooks.stop = function() {
        window.clearTimeout( timeout );
      };
    } );
  };
  
  
  ( function() {
    var input = document.createElement( "input" ),
      select = document.createElement( "select" ),
      opt = select.appendChild( document.createElement( "option" ) );
  
    input.type = "checkbox";
  
    // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== "";
  
    // Support: IE <=11 only
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;
  
    // Support: IE <=11 only
    // An input loses its value after becoming a radio
    input = document.createElement( "input" );
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  } )();
  
  
  var boolHook,
    attrHandle = jQuery.expr.attrHandle;
  
  jQuery.fn.extend( {
    attr: function( name, value ) {
      return access( this, jQuery.attr, name, value, arguments.length > 1 );
    },
  
    removeAttr: function( name ) {
      return this.each( function() {
        jQuery.removeAttr( this, name );
      } );
    }
  } );
  
  jQuery.extend( {
    attr: function( elem, name, value ) {
      var ret, hooks,
        nType = elem.nodeType;
  
      // Don't get/set attributes on text, comment and attribute nodes
      if ( nType === 3 || nType === 8 || nType === 2 ) {
        return;
      }
  
      // Fallback to prop when attributes are not supported
      if ( typeof elem.getAttribute === "undefined" ) {
        return jQuery.prop( elem, name, value );
      }
  
      // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined
      if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
        hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
          ( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
      }
  
      if ( value !== undefined ) {
        if ( value === null ) {
          jQuery.removeAttr( elem, name );
          return;
        }
  
        if ( hooks && "set" in hooks &&
          ( ret = hooks.set( elem, value, name ) ) !== undefined ) {
          return ret;
        }
  
        elem.setAttribute( name, value + "" );
        return value;
      }
  
      if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
        return ret;
      }
  
      ret = jQuery.find.attr( elem, name );
  
      // Non-existent attributes return null, we normalize to undefined
      return ret == null ? undefined : ret;
    },
  
    attrHooks: {
      type: {
        set: function( elem, value ) {
          if ( !support.radioValue && value === "radio" &&
            nodeName( elem, "input" ) ) {
            var val = elem.value;
            elem.setAttribute( "type", value );
            if ( val ) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    },
  
    removeAttr: function( elem, value ) {
      var name,
        i = 0,
  
        // Attribute names can contain non-HTML whitespace characters
        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
        attrNames = value && value.match( rnothtmlwhite );
  
      if ( attrNames && elem.nodeType === 1 ) {
        while ( ( name = attrNames[ i++ ] ) ) {
          elem.removeAttribute( name );
        }
      }
    }
  } );
  
  // Hooks for boolean attributes
  boolHook = {
    set: function( elem, value, name ) {
      if ( value === false ) {
  
        // Remove boolean attributes when set to false
        jQuery.removeAttr( elem, name );
      } else {
        elem.setAttribute( name, name );
      }
      return name;
    }
  };
  
  jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
    var getter = attrHandle[ name ] || jQuery.find.attr;
  
    attrHandle[ name ] = function( elem, name, isXML ) {
      var ret, handle,
        lowercaseName = name.toLowerCase();
  
      if ( !isXML ) {
  
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[ lowercaseName ];
        attrHandle[ lowercaseName ] = ret;
        ret = getter( elem, name, isXML ) != null ?
          lowercaseName :
          null;
        attrHandle[ lowercaseName ] = handle;
      }
      return ret;
    };
  } );
  
  
  
  
  var rfocusable = /^(?:input|select|textarea|button)$/i,
    rclickable = /^(?:a|area)$/i;
  
  jQuery.fn.extend( {
    prop: function( name, value ) {
      return access( this, jQuery.prop, name, value, arguments.length > 1 );
    },
  
    removeProp: function( name ) {
      return this.each( function() {
        delete this[ jQuery.propFix[ name ] || name ];
      } );
    }
  } );
  
  jQuery.extend( {
    prop: function( elem, name, value ) {
      var ret, hooks,
        nType = elem.nodeType;
  
      // Don't get/set properties on text, comment and attribute nodes
      if ( nType === 3 || nType === 8 || nType === 2 ) {
        return;
      }
  
      if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
  
        // Fix name and attach hooks
        name = jQuery.propFix[ name ] || name;
        hooks = jQuery.propHooks[ name ];
      }
  
      if ( value !== undefined ) {
        if ( hooks && "set" in hooks &&
          ( ret = hooks.set( elem, value, name ) ) !== undefined ) {
          return ret;
        }
  
        return ( elem[ name ] = value );
      }
  
      if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
        return ret;
      }
  
      return elem[ name ];
    },
  
    propHooks: {
      tabIndex: {
        get: function( elem ) {
  
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr( elem, "tabindex" );
  
          if ( tabindex ) {
            return parseInt( tabindex, 10 );
          }
  
          if (
            rfocusable.test( elem.nodeName ) ||
            rclickable.test( elem.nodeName ) &&
            elem.href
          ) {
            return 0;
          }
  
          return -1;
        }
      }
    },
  
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  } );
  
  // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop
  if ( !support.optSelected ) {
    jQuery.propHooks.selected = {
      get: function( elem ) {
  
        /* eslint no-unused-expressions: "off" */
  
        var parent = elem.parentNode;
        if ( parent && parent.parentNode ) {
          parent.parentNode.selectedIndex;
        }
        return null;
      },
      set: function( elem ) {
  
        /* eslint no-unused-expressions: "off" */
  
        var parent = elem.parentNode;
        if ( parent ) {
          parent.selectedIndex;
  
          if ( parent.parentNode ) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }
  
  jQuery.each( [
    "tabIndex",
    "readOnly",
    "maxLength",
    "cellSpacing",
    "cellPadding",
    "rowSpan",
    "colSpan",
    "useMap",
    "frameBorder",
    "contentEditable"
  ], function() {
    jQuery.propFix[ this.toLowerCase() ] = this;
  } );
  
  
  
  
    // Strip and collapse whitespace according to HTML spec
    // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
    function stripAndCollapse( value ) {
      var tokens = value.match( rnothtmlwhite ) || [];
      return tokens.join( " " );
    }
  
  
  function getClass( elem ) {
    return elem.getAttribute && elem.getAttribute( "class" ) || "";
  }
  
  function classesToArray( value ) {
    if ( Array.isArray( value ) ) {
      return value;
    }
    if ( typeof value === "string" ) {
      return value.match( rnothtmlwhite ) || [];
    }
    return [];
  }
  
  jQuery.fn.extend( {
    addClass: function( value ) {
      var classes, elem, cur, curValue, clazz, j, finalValue,
        i = 0;
  
      if ( isFunction( value ) ) {
        return this.each( function( j ) {
          jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
        } );
      }
  
      classes = classesToArray( value );
  
      if ( classes.length ) {
        while ( ( elem = this[ i++ ] ) ) {
          curValue = getClass( elem );
          cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
  
          if ( cur ) {
            j = 0;
            while ( ( clazz = classes[ j++ ] ) ) {
              if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                cur += clazz + " ";
              }
            }
  
            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse( cur );
            if ( curValue !== finalValue ) {
              elem.setAttribute( "class", finalValue );
            }
          }
        }
      }
  
      return this;
    },
  
    removeClass: function( value ) {
      var classes, elem, cur, curValue, clazz, j, finalValue,
        i = 0;
  
      if ( isFunction( value ) ) {
        return this.each( function( j ) {
          jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
        } );
      }
  
      if ( !arguments.length ) {
        return this.attr( "class", "" );
      }
  
      classes = classesToArray( value );
  
      if ( classes.length ) {
        while ( ( elem = this[ i++ ] ) ) {
          curValue = getClass( elem );
  
          // This expression is here for better compressibility (see addClass)
          cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
  
          if ( cur ) {
            j = 0;
            while ( ( clazz = classes[ j++ ] ) ) {
  
              // Remove *all* instances
              while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
                cur = cur.replace( " " + clazz + " ", " " );
              }
            }
  
            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse( cur );
            if ( curValue !== finalValue ) {
              elem.setAttribute( "class", finalValue );
            }
          }
        }
      }
  
      return this;
    },
  
    toggleClass: function( value, stateVal ) {
      var type = typeof value,
        isValidValue = type === "string" || Array.isArray( value );
  
      if ( typeof stateVal === "boolean" && isValidValue ) {
        return stateVal ? this.addClass( value ) : this.removeClass( value );
      }
  
      if ( isFunction( value ) ) {
        return this.each( function( i ) {
          jQuery( this ).toggleClass(
            value.call( this, i, getClass( this ), stateVal ),
            stateVal
          );
        } );
      }
  
      return this.each( function() {
        var className, i, self, classNames;
  
        if ( isValidValue ) {
  
          // Toggle individual class names
          i = 0;
          self = jQuery( this );
          classNames = classesToArray( value );
  
          while ( ( className = classNames[ i++ ] ) ) {
  
            // Check each className given, space separated list
            if ( self.hasClass( className ) ) {
              self.removeClass( className );
            } else {
              self.addClass( className );
            }
          }
  
        // Toggle whole class name
        } else if ( value === undefined || type === "boolean" ) {
          className = getClass( this );
          if ( className ) {
  
            // Store className if set
            dataPriv.set( this, "__className__", className );
          }
  
          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          if ( this.setAttribute ) {
            this.setAttribute( "class",
              className || value === false ?
              "" :
              dataPriv.get( this, "__className__" ) || ""
            );
          }
        }
      } );
    },
  
    hasClass: function( selector ) {
      var className, elem,
        i = 0;
  
      className = " " + selector + " ";
      while ( ( elem = this[ i++ ] ) ) {
        if ( elem.nodeType === 1 &&
          ( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
            return true;
        }
      }
  
      return false;
    }
  } );
  
  
  
  
  var rreturn = /\r/g;
  
  jQuery.fn.extend( {
    val: function( value ) {
      var hooks, ret, valueIsFunction,
        elem = this[ 0 ];
  
      if ( !arguments.length ) {
        if ( elem ) {
          hooks = jQuery.valHooks[ elem.type ] ||
            jQuery.valHooks[ elem.nodeName.toLowerCase() ];
  
          if ( hooks &&
            "get" in hooks &&
            ( ret = hooks.get( elem, "value" ) ) !== undefined
          ) {
            return ret;
          }
  
          ret = elem.value;
  
          // Handle most common string cases
          if ( typeof ret === "string" ) {
            return ret.replace( rreturn, "" );
          }
  
          // Handle cases where value is null/undef or number
          return ret == null ? "" : ret;
        }
  
        return;
      }
  
      valueIsFunction = isFunction( value );
  
      return this.each( function( i ) {
        var val;
  
        if ( this.nodeType !== 1 ) {
          return;
        }
  
        if ( valueIsFunction ) {
          val = value.call( this, i, jQuery( this ).val() );
        } else {
          val = value;
        }
  
        // Treat null/undefined as ""; convert numbers to string
        if ( val == null ) {
          val = "";
  
        } else if ( typeof val === "number" ) {
          val += "";
  
        } else if ( Array.isArray( val ) ) {
          val = jQuery.map( val, function( value ) {
            return value == null ? "" : value + "";
          } );
        }
  
        hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
  
        // If set returns undefined, fall back to normal setting
        if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
          this.value = val;
        }
      } );
    }
  } );
  
  jQuery.extend( {
    valHooks: {
      option: {
        get: function( elem ) {
  
          var val = jQuery.find.attr( elem, "value" );
          return val != null ?
            val :
  
            // Support: IE <=10 - 11 only
            // option.text throws exceptions (#14686, #14858)
            // Strip and collapse whitespace
            // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
            stripAndCollapse( jQuery.text( elem ) );
        }
      },
      select: {
        get: function( elem ) {
          var value, option, i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one",
            values = one ? null : [],
            max = one ? index + 1 : options.length;
  
          if ( index < 0 ) {
            i = max;
  
          } else {
            i = one ? index : 0;
          }
  
          // Loop through all the selected options
          for ( ; i < max; i++ ) {
            option = options[ i ];
  
            // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)
            if ( ( option.selected || i === index ) &&
  
                // Don't return options that are disabled or in a disabled optgroup
                !option.disabled &&
                ( !option.parentNode.disabled ||
                  !nodeName( option.parentNode, "optgroup" ) ) ) {
  
              // Get the specific value for the option
              value = jQuery( option ).val();
  
              // We don't need an array for one selects
              if ( one ) {
                return value;
              }
  
              // Multi-Selects return an array
              values.push( value );
            }
          }
  
          return values;
        },
  
        set: function( elem, value ) {
          var optionSet, option,
            options = elem.options,
            values = jQuery.makeArray( value ),
            i = options.length;
  
          while ( i-- ) {
            option = options[ i ];
  
            /* eslint-disable no-cond-assign */
  
            if ( option.selected =
              jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
            ) {
              optionSet = true;
            }
  
            /* eslint-enable no-cond-assign */
          }
  
          // Force browsers to behave consistently when non-matching value is set
          if ( !optionSet ) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  } );
  
  // Radios and checkboxes getter/setter
  jQuery.each( [ "radio", "checkbox" ], function() {
    jQuery.valHooks[ this ] = {
      set: function( elem, value ) {
        if ( Array.isArray( value ) ) {
          return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
        }
      }
    };
    if ( !support.checkOn ) {
      jQuery.valHooks[ this ].get = function( elem ) {
        return elem.getAttribute( "value" ) === null ? "on" : elem.value;
      };
    }
  } );
  
  
  
  
  // Return jQuery for attributes-only inclusion
  
  
  support.focusin = "onfocusin" in window;
  
  
  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    stopPropagationCallback = function( e ) {
      e.stopPropagation();
    };
  
  jQuery.extend( jQuery.event, {
  
    trigger: function( event, data, elem, onlyHandlers ) {
  
      var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
        eventPath = [ elem || document ],
        type = hasOwn.call( event, "type" ) ? event.type : event,
        namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
  
      cur = lastElement = tmp = elem = elem || document;
  
      // Don't do events on text and comment nodes
      if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
        return;
      }
  
      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
        return;
      }
  
      if ( type.indexOf( "." ) > -1 ) {
  
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split( "." );
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf( ":" ) < 0 && "on" + type;
  
      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[ jQuery.expando ] ?
        event :
        new jQuery.Event( type, typeof event === "object" && event );
  
      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join( "." );
      event.rnamespace = event.namespace ?
        new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
        null;
  
      // Clean up the event in case it is being reused
      event.result = undefined;
      if ( !event.target ) {
        event.target = elem;
      }
  
      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ?
        [ event ] :
        jQuery.makeArray( data, [ event ] );
  
      // Allow special events to draw outside the lines
      special = jQuery.event.special[ type ] || {};
      if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
        return;
      }
  
      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {
  
        bubbleType = special.delegateType || type;
        if ( !rfocusMorph.test( bubbleType + type ) ) {
          cur = cur.parentNode;
        }
        for ( ; cur; cur = cur.parentNode ) {
          eventPath.push( cur );
          tmp = cur;
        }
  
        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if ( tmp === ( elem.ownerDocument || document ) ) {
          eventPath.push( tmp.defaultView || tmp.parentWindow || window );
        }
      }
  
      // Fire handlers on the event path
      i = 0;
      while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
        lastElement = cur;
        event.type = i > 1 ?
          bubbleType :
          special.bindType || type;
  
        // jQuery handler
        handle = (
            dataPriv.get( cur, "events" ) || Object.create( null )
          )[ event.type ] &&
          dataPriv.get( cur, "handle" );
        if ( handle ) {
          handle.apply( cur, data );
        }
  
        // Native handler
        handle = ontype && cur[ ontype ];
        if ( handle && handle.apply && acceptData( cur ) ) {
          event.result = handle.apply( cur, data );
          if ( event.result === false ) {
            event.preventDefault();
          }
        }
      }
      event.type = type;
  
      // If nobody prevented the default action, do it now
      if ( !onlyHandlers && !event.isDefaultPrevented() ) {
  
        if ( ( !special._default ||
          special._default.apply( eventPath.pop(), data ) === false ) &&
          acceptData( elem ) ) {
  
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {
  
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ ontype ];
  
            if ( tmp ) {
              elem[ ontype ] = null;
            }
  
            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;
  
            if ( event.isPropagationStopped() ) {
              lastElement.addEventListener( type, stopPropagationCallback );
            }
  
            elem[ type ]();
  
            if ( event.isPropagationStopped() ) {
              lastElement.removeEventListener( type, stopPropagationCallback );
            }
  
            jQuery.event.triggered = undefined;
  
            if ( tmp ) {
              elem[ ontype ] = tmp;
            }
          }
        }
      }
  
      return event.result;
    },
  
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function( type, elem, event ) {
      var e = jQuery.extend(
        new jQuery.Event(),
        event,
        {
          type: type,
          isSimulated: true
        }
      );
  
      jQuery.event.trigger( e, null, elem );
    }
  
  } );
  
  jQuery.fn.extend( {
  
    trigger: function( type, data ) {
      return this.each( function() {
        jQuery.event.trigger( type, data, this );
      } );
    },
    triggerHandler: function( type, data ) {
      var elem = this[ 0 ];
      if ( elem ) {
        return jQuery.event.trigger( type, data, elem, true );
      }
    }
  } );
  
  
  // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
  if ( !support.focusin ) {
    jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
  
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function( event ) {
        jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
      };
  
      jQuery.event.special[ fix ] = {
        setup: function() {
  
          // Handle: regular nodes (via `this.ownerDocument`), window
          // (via `this.document`) & document (via `this`).
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access( doc, fix );
  
          if ( !attaches ) {
            doc.addEventListener( orig, handler, true );
          }
          dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
        },
        teardown: function() {
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access( doc, fix ) - 1;
  
          if ( !attaches ) {
            doc.removeEventListener( orig, handler, true );
            dataPriv.remove( doc, fix );
  
          } else {
            dataPriv.access( doc, fix, attaches );
          }
        }
      };
    } );
  }
  var location = window.location;
  
  var nonce = { guid: Date.now() };
  
  var rquery = ( /\?/ );
  
  
  
  // Cross-browser xml parsing
  jQuery.parseXML = function( data ) {
    var xml;
    if ( !data || typeof data !== "string" ) {
      return null;
    }
  
    // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.
    try {
      xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
    } catch ( e ) {
      xml = undefined;
    }
  
    if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
      jQuery.error( "Invalid XML: " + data );
    }
    return xml;
  };
  
  
  var
    rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;
  
  function buildParams( prefix, obj, traditional, add ) {
    var name;
  
    if ( Array.isArray( obj ) ) {
  
      // Serialize array item.
      jQuery.each( obj, function( i, v ) {
        if ( traditional || rbracket.test( prefix ) ) {
  
          // Treat each array item as a scalar.
          add( prefix, v );
  
        } else {
  
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(
            prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
            v,
            traditional,
            add
          );
        }
      } );
  
    } else if ( !traditional && toType( obj ) === "object" ) {
  
      // Serialize object item.
      for ( name in obj ) {
        buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
      }
  
    } else {
  
      // Serialize scalar item.
      add( prefix, obj );
    }
  }
  
  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function( a, traditional ) {
    var prefix,
      s = [],
      add = function( key, valueOrFunction ) {
  
        // If value is a function, invoke it and use its return value
        var value = isFunction( valueOrFunction ) ?
          valueOrFunction() :
          valueOrFunction;
  
        s[ s.length ] = encodeURIComponent( key ) + "=" +
          encodeURIComponent( value == null ? "" : value );
      };
  
    if ( a == null ) {
      return "";
    }
  
    // If an array was passed in, assume that it is an array of form elements.
    if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
  
      // Serialize the form elements
      jQuery.each( a, function() {
        add( this.name, this.value );
      } );
  
    } else {
  
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for ( prefix in a ) {
        buildParams( prefix, a[ prefix ], traditional, add );
      }
    }
  
    // Return the resulting serialization
    return s.join( "&" );
  };
  
  jQuery.fn.extend( {
    serialize: function() {
      return jQuery.param( this.serializeArray() );
    },
    serializeArray: function() {
      return this.map( function() {
  
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop( this, "elements" );
        return elements ? jQuery.makeArray( elements ) : this;
      } )
      .filter( function() {
        var type = this.type;
  
        // Use .is( ":disabled" ) so that fieldset[disabled] works
        return this.name && !jQuery( this ).is( ":disabled" ) &&
          rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
          ( this.checked || !rcheckableType.test( type ) );
      } )
      .map( function( _i, elem ) {
        var val = jQuery( this ).val();
  
        if ( val == null ) {
          return null;
        }
  
        if ( Array.isArray( val ) ) {
          return jQuery.map( val, function( val ) {
            return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
          } );
        }
  
        return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
      } ).get();
    }
  } );
  
  
  var
    r20 = /%20/g,
    rhash = /#.*$/,
    rantiCache = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
  
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
  
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},
  
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},
  
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat( "*" ),
  
    // Anchor tag for parsing the document origin
    originAnchor = document.createElement( "a" );
    originAnchor.href = location.href;
  
  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports( structure ) {
  
    // dataTypeExpression is optional and defaults to "*"
    return function( dataTypeExpression, func ) {
  
      if ( typeof dataTypeExpression !== "string" ) {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }
  
      var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];
  
      if ( isFunction( func ) ) {
  
        // For each dataType in the dataTypeExpression
        while ( ( dataType = dataTypes[ i++ ] ) ) {
  
          // Prepend if requested
          if ( dataType[ 0 ] === "+" ) {
            dataType = dataType.slice( 1 ) || "*";
            ( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
  
          // Otherwise append
          } else {
            ( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
          }
        }
      }
    };
  }
  
  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
  
    var inspected = {},
      seekingTransport = ( structure === transports );
  
    function inspect( dataType ) {
      var selected;
      inspected[ dataType ] = true;
      jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
        var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
        if ( typeof dataTypeOrTransport === "string" &&
          !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
  
          options.dataTypes.unshift( dataTypeOrTransport );
          inspect( dataTypeOrTransport );
          return false;
        } else if ( seekingTransport ) {
          return !( selected = dataTypeOrTransport );
        }
      } );
      return selected;
    }
  
    return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
  }
  
  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887
  function ajaxExtend( target, src ) {
    var key, deep,
      flatOptions = jQuery.ajaxSettings.flatOptions || {};
  
    for ( key in src ) {
      if ( src[ key ] !== undefined ) {
        ( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
      }
    }
    if ( deep ) {
      jQuery.extend( true, target, deep );
    }
  
    return target;
  }
  
  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses( s, jqXHR, responses ) {
  
    var ct, type, finalDataType, firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes;
  
    // Remove auto dataType and get content-type in the process
    while ( dataTypes[ 0 ] === "*" ) {
      dataTypes.shift();
      if ( ct === undefined ) {
        ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
      }
    }
  
    // Check if we're dealing with a known content-type
    if ( ct ) {
      for ( type in contents ) {
        if ( contents[ type ] && contents[ type ].test( ct ) ) {
          dataTypes.unshift( type );
          break;
        }
      }
    }
  
    // Check to see if we have a response for the expected dataType
    if ( dataTypes[ 0 ] in responses ) {
      finalDataType = dataTypes[ 0 ];
    } else {
  
      // Try convertible dataTypes
      for ( type in responses ) {
        if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
          finalDataType = type;
          break;
        }
        if ( !firstDataType ) {
          firstDataType = type;
        }
      }
  
      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }
  
    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if ( finalDataType ) {
      if ( finalDataType !== dataTypes[ 0 ] ) {
        dataTypes.unshift( finalDataType );
      }
      return responses[ finalDataType ];
    }
  }
  
  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert( s, response, jqXHR, isSuccess ) {
    var conv2, current, conv, tmp, prev,
      converters = {},
  
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();
  
    // Create converters map with lowercased keys
    if ( dataTypes[ 1 ] ) {
      for ( conv in s.converters ) {
        converters[ conv.toLowerCase() ] = s.converters[ conv ];
      }
    }
  
    current = dataTypes.shift();
  
    // Convert to each sequential dataType
    while ( current ) {
  
      if ( s.responseFields[ current ] ) {
        jqXHR[ s.responseFields[ current ] ] = response;
      }
  
      // Apply the dataFilter if provided
      if ( !prev && isSuccess && s.dataFilter ) {
        response = s.dataFilter( response, s.dataType );
      }
  
      prev = current;
      current = dataTypes.shift();
  
      if ( current ) {
  
        // There's only work to do if current dataType is non-auto
        if ( current === "*" ) {
  
          current = prev;
  
        // Convert response if prev dataType is non-auto and differs from current
        } else if ( prev !== "*" && prev !== current ) {
  
          // Seek a direct converter
          conv = converters[ prev + " " + current ] || converters[ "* " + current ];
  
          // If none found, seek a pair
          if ( !conv ) {
            for ( conv2 in converters ) {
  
              // If conv2 outputs current
              tmp = conv2.split( " " );
              if ( tmp[ 1 ] === current ) {
  
                // If prev can be converted to accepted input
                conv = converters[ prev + " " + tmp[ 0 ] ] ||
                  converters[ "* " + tmp[ 0 ] ];
                if ( conv ) {
  
                  // Condense equivalence converters
                  if ( conv === true ) {
                    conv = converters[ conv2 ];
  
                  // Otherwise, insert the intermediate dataType
                  } else if ( converters[ conv2 ] !== true ) {
                    current = tmp[ 0 ];
                    dataTypes.unshift( tmp[ 1 ] );
                  }
                  break;
                }
              }
            }
          }
  
          // Apply converter (if not an equivalence)
          if ( conv !== true ) {
  
            // Unless errors are allowed to bubble, catch and return them
            if ( conv && s.throws ) {
              response = conv( response );
            } else {
              try {
                response = conv( response );
              } catch ( e ) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }
  
    return { state: "success", data: response };
  }
  
  jQuery.extend( {
  
    // Counter for holding the number of active queries
    active: 0,
  
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
  
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test( location.protocol ),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
  
      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */
  
      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
  
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
  
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
  
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
  
        // Convert anything to text
        "* text": String,
  
        // Text to html (true = no transformation)
        "text html": true,
  
        // Evaluate text as a json expression
        "text json": JSON.parse,
  
        // Parse text as xml
        "text xml": jQuery.parseXML
      },
  
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
  
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function( target, settings ) {
      return settings ?
  
        // Building a settings object
        ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
  
        // Extending ajaxSettings
        ajaxExtend( jQuery.ajaxSettings, target );
    },
  
    ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
    ajaxTransport: addToPrefiltersOrTransports( transports ),
  
    // Main method
    ajax: function( url, options ) {
  
      // If url is an object, simulate pre-1.5 signature
      if ( typeof url === "object" ) {
        options = url;
        url = undefined;
      }
  
      // Force options to be an object
      options = options || {};
  
      var transport,
  
        // URL without anti-cache param
        cacheURL,
  
        // Response headers
        responseHeadersString,
        responseHeaders,
  
        // timeout handle
        timeoutTimer,
  
        // Url cleanup var
        urlAnchor,
  
        // Request state (becomes false upon send and true upon completion)
        completed,
  
        // To know if global events are to be dispatched
        fireGlobals,
  
        // Loop variable
        i,
  
        // uncached part of the url
        uncached,
  
        // Create the final options object
        s = jQuery.ajaxSetup( {}, options ),
  
        // Callbacks context
        callbackContext = s.context || s,
  
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext = s.context &&
          ( callbackContext.nodeType || callbackContext.jquery ) ?
            jQuery( callbackContext ) :
            jQuery.event,
  
        // Deferreds
        deferred = jQuery.Deferred(),
        completeDeferred = jQuery.Callbacks( "once memory" ),
  
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
  
        // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
  
        // Default abort message
        strAbort = "canceled",
  
        // Fake xhr
        jqXHR = {
          readyState: 0,
  
          // Builds headers hashtable if needed
          getResponseHeader: function( key ) {
            var match;
            if ( completed ) {
              if ( !responseHeaders ) {
                responseHeaders = {};
                while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
                  responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
                    ( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
                      .concat( match[ 2 ] );
                }
              }
              match = responseHeaders[ key.toLowerCase() + " " ];
            }
            return match == null ? null : match.join( ", " );
          },
  
          // Raw string
          getAllResponseHeaders: function() {
            return completed ? responseHeadersString : null;
          },
  
          // Caches the header
          setRequestHeader: function( name, value ) {
            if ( completed == null ) {
              name = requestHeadersNames[ name.toLowerCase() ] =
                requestHeadersNames[ name.toLowerCase() ] || name;
              requestHeaders[ name ] = value;
            }
            return this;
          },
  
          // Overrides response content-type header
          overrideMimeType: function( type ) {
            if ( completed == null ) {
              s.mimeType = type;
            }
            return this;
          },
  
          // Status-dependent callbacks
          statusCode: function( map ) {
            var code;
            if ( map ) {
              if ( completed ) {
  
                // Execute the appropriate callbacks
                jqXHR.always( map[ jqXHR.status ] );
              } else {
  
                // Lazy-add the new callbacks in a way that preserves old ones
                for ( code in map ) {
                  statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                }
              }
            }
            return this;
          },
  
          // Cancel the request
          abort: function( statusText ) {
            var finalText = statusText || strAbort;
            if ( transport ) {
              transport.abort( finalText );
            }
            done( 0, finalText );
            return this;
          }
        };
  
      // Attach deferreds
      deferred.promise( jqXHR );
  
      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ( ( url || s.url || location.href ) + "" )
        .replace( rprotocol, location.protocol + "//" );
  
      // Alias method option to type as per ticket #12004
      s.type = options.method || options.type || s.method || s.type;
  
      // Extract dataTypes list
      s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];
  
      // A cross-domain request is in order when the origin doesn't match the current origin.
      if ( s.crossDomain == null ) {
        urlAnchor = document.createElement( "a" );
  
        // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/
        try {
          urlAnchor.href = s.url;
  
          // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative
          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
            urlAnchor.protocol + "//" + urlAnchor.host;
        } catch ( e ) {
  
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      }
  
      // Convert data if not already a string
      if ( s.data && s.processData && typeof s.data !== "string" ) {
        s.data = jQuery.param( s.data, s.traditional );
      }
  
      // Apply prefilters
      inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
  
      // If request was aborted inside a prefilter, stop there
      if ( completed ) {
        return jqXHR;
      }
  
      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
      fireGlobals = jQuery.event && s.global;
  
      // Watch for a new set of requests
      if ( fireGlobals && jQuery.active++ === 0 ) {
        jQuery.event.trigger( "ajaxStart" );
      }
  
      // Uppercase the type
      s.type = s.type.toUpperCase();
  
      // Determine if request has content
      s.hasContent = !rnoContent.test( s.type );
  
      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation
      cacheURL = s.url.replace( rhash, "" );
  
      // More options handling for requests with no content
      if ( !s.hasContent ) {
  
        // Remember the hash so we can put it back
        uncached = s.url.slice( cacheURL.length );
  
        // If data is available and should be processed, append data to url
        if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
          cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;
  
          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }
  
        // Add or update anti-cache param if needed
        if ( s.cache === false ) {
          cacheURL = cacheURL.replace( rantiCache, "$1" );
          uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
            uncached;
        }
  
        // Put hash and anti-cache on the URL that will be requested (gh-1732)
        s.url = cacheURL + uncached;
  
      // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if ( s.data && s.processData &&
        ( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
        s.data = s.data.replace( r20, "+" );
      }
  
      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if ( s.ifModified ) {
        if ( jQuery.lastModified[ cacheURL ] ) {
          jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
        }
        if ( jQuery.etag[ cacheURL ] ) {
          jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
        }
      }
  
      // Set the correct header, if data is being sent
      if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
        jqXHR.setRequestHeader( "Content-Type", s.contentType );
      }
  
      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader(
        "Accept",
        s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
          s.accepts[ s.dataTypes[ 0 ] ] +
            ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
          s.accepts[ "*" ]
      );
  
      // Check for headers option
      for ( i in s.headers ) {
        jqXHR.setRequestHeader( i, s.headers[ i ] );
      }
  
      // Allow custom headers/mimetypes and early abort
      if ( s.beforeSend &&
        ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {
  
        // Abort if not done already and return
        return jqXHR.abort();
      }
  
      // Aborting is no longer a cancellation
      strAbort = "abort";
  
      // Install callbacks on deferreds
      completeDeferred.add( s.complete );
      jqXHR.done( s.success );
      jqXHR.fail( s.error );
  
      // Get transport
      transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
  
      // If no transport, we auto-abort
      if ( !transport ) {
        done( -1, "No Transport" );
      } else {
        jqXHR.readyState = 1;
  
        // Send global event
        if ( fireGlobals ) {
          globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
        }
  
        // If request was aborted inside ajaxSend, stop there
        if ( completed ) {
          return jqXHR;
        }
  
        // Timeout
        if ( s.async && s.timeout > 0 ) {
          timeoutTimer = window.setTimeout( function() {
            jqXHR.abort( "timeout" );
          }, s.timeout );
        }
  
        try {
          completed = false;
          transport.send( requestHeaders, done );
        } catch ( e ) {
  
          // Rethrow post-completion exceptions
          if ( completed ) {
            throw e;
          }
  
          // Propagate others as results
          done( -1, e );
        }
      }
  
      // Callback for when everything is done
      function done( status, nativeStatusText, responses, headers ) {
        var isSuccess, success, error, response, modified,
          statusText = nativeStatusText;
  
        // Ignore repeat invocations
        if ( completed ) {
          return;
        }
  
        completed = true;
  
        // Clear timeout if it exists
        if ( timeoutTimer ) {
          window.clearTimeout( timeoutTimer );
        }
  
        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;
  
        // Cache response headers
        responseHeadersString = headers || "";
  
        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;
  
        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;
  
        // Get response data
        if ( responses ) {
          response = ajaxHandleResponses( s, jqXHR, responses );
        }
  
        // Use a noop converter for missing script
        if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
          s.converters[ "text script" ] = function() {};
        }
  
        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert( s, response, jqXHR, isSuccess );
  
        // If successful, handle type chaining
        if ( isSuccess ) {
  
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if ( s.ifModified ) {
            modified = jqXHR.getResponseHeader( "Last-Modified" );
            if ( modified ) {
              jQuery.lastModified[ cacheURL ] = modified;
            }
            modified = jqXHR.getResponseHeader( "etag" );
            if ( modified ) {
              jQuery.etag[ cacheURL ] = modified;
            }
          }
  
          // if no content
          if ( status === 204 || s.type === "HEAD" ) {
            statusText = "nocontent";
  
          // if not modified
          } else if ( status === 304 ) {
            statusText = "notmodified";
  
          // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
  
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if ( status || !statusText ) {
            statusText = "error";
            if ( status < 0 ) {
              status = 0;
            }
          }
        }
  
        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = ( nativeStatusText || statusText ) + "";
  
        // Success/Error
        if ( isSuccess ) {
          deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
        } else {
          deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
        }
  
        // Status-dependent callbacks
        jqXHR.statusCode( statusCode );
        statusCode = undefined;
  
        if ( fireGlobals ) {
          globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
            [ jqXHR, s, isSuccess ? success : error ] );
        }
  
        // Complete
        completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
  
        if ( fireGlobals ) {
          globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
  
          // Handle the global AJAX counter
          if ( !( --jQuery.active ) ) {
            jQuery.event.trigger( "ajaxStop" );
          }
        }
      }
  
      return jqXHR;
    },
  
    getJSON: function( url, data, callback ) {
      return jQuery.get( url, data, callback, "json" );
    },
  
    getScript: function( url, callback ) {
      return jQuery.get( url, undefined, callback, "script" );
    }
  } );
  
  jQuery.each( [ "get", "post" ], function( _i, method ) {
    jQuery[ method ] = function( url, data, callback, type ) {
  
      // Shift arguments if data argument was omitted
      if ( isFunction( data ) ) {
        type = type || callback;
        callback = data;
        data = undefined;
      }
  
      // The url can be an options object (which then must have .url)
      return jQuery.ajax( jQuery.extend( {
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject( url ) && url ) );
    };
  } );
  
  jQuery.ajaxPrefilter( function( s ) {
    var i;
    for ( i in s.headers ) {
      if ( i.toLowerCase() === "content-type" ) {
        s.contentType = s.headers[ i ] || "";
      }
    }
  } );
  
  
  jQuery._evalUrl = function( url, options, doc ) {
    return jQuery.ajax( {
      url: url,
  
      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
  
      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function() {}
      },
      dataFilter: function( response ) {
        jQuery.globalEval( response, options, doc );
      }
    } );
  };
  
  
  jQuery.fn.extend( {
    wrapAll: function( html ) {
      var wrap;
  
      if ( this[ 0 ] ) {
        if ( isFunction( html ) ) {
          html = html.call( this[ 0 ] );
        }
  
        // The elements to wrap the target around
        wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
  
        if ( this[ 0 ].parentNode ) {
          wrap.insertBefore( this[ 0 ] );
        }
  
        wrap.map( function() {
          var elem = this;
  
          while ( elem.firstElementChild ) {
            elem = elem.firstElementChild;
          }
  
          return elem;
        } ).append( this );
      }
  
      return this;
    },
  
    wrapInner: function( html ) {
      if ( isFunction( html ) ) {
        return this.each( function( i ) {
          jQuery( this ).wrapInner( html.call( this, i ) );
        } );
      }
  
      return this.each( function() {
        var self = jQuery( this ),
          contents = self.contents();
  
        if ( contents.length ) {
          contents.wrapAll( html );
  
        } else {
          self.append( html );
        }
      } );
    },
  
    wrap: function( html ) {
      var htmlIsFunction = isFunction( html );
  
      return this.each( function( i ) {
        jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
      } );
    },
  
    unwrap: function( selector ) {
      this.parent( selector ).not( "body" ).each( function() {
        jQuery( this ).replaceWith( this.childNodes );
      } );
      return this;
    }
  } );
  
  
  jQuery.expr.pseudos.hidden = function( elem ) {
    return !jQuery.expr.pseudos.visible( elem );
  };
  jQuery.expr.pseudos.visible = function( elem ) {
    return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
  };
  
  
  
  
  jQuery.ajaxSettings.xhr = function() {
    try {
      return new window.XMLHttpRequest();
    } catch ( e ) {}
  };
  
  var xhrSuccessStatus = {
  
      // File protocol always yields status code 0, assume 200
      0: 200,
  
      // Support: IE <=9 only
      // #1450: sometimes IE returns 1223 when it should be 204
      1223: 204
    },
    xhrSupported = jQuery.ajaxSettings.xhr();
  
  support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
  support.ajax = xhrSupported = !!xhrSupported;
  
  jQuery.ajaxTransport( function( options ) {
    var callback, errorCallback;
  
    // Cross domain only allowed if supported through XMLHttpRequest
    if ( support.cors || xhrSupported && !options.crossDomain ) {
      return {
        send: function( headers, complete ) {
          var i,
            xhr = options.xhr();
  
          xhr.open(
            options.type,
            options.url,
            options.async,
            options.username,
            options.password
          );
  
          // Apply custom fields if provided
          if ( options.xhrFields ) {
            for ( i in options.xhrFields ) {
              xhr[ i ] = options.xhrFields[ i ];
            }
          }
  
          // Override mime type if needed
          if ( options.mimeType && xhr.overrideMimeType ) {
            xhr.overrideMimeType( options.mimeType );
          }
  
          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
            headers[ "X-Requested-With" ] = "XMLHttpRequest";
          }
  
          // Set headers
          for ( i in headers ) {
            xhr.setRequestHeader( i, headers[ i ] );
          }
  
          // Callback
          callback = function( type ) {
            return function() {
              if ( callback ) {
                callback = errorCallback = xhr.onload =
                  xhr.onerror = xhr.onabort = xhr.ontimeout =
                    xhr.onreadystatechange = null;
  
                if ( type === "abort" ) {
                  xhr.abort();
                } else if ( type === "error" ) {
  
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if ( typeof xhr.status !== "number" ) {
                    complete( 0, "error" );
                  } else {
                    complete(
  
                      // File: protocol always yields status 0; see #8605, #14207
                      xhr.status,
                      xhr.statusText
                    );
                  }
                } else {
                  complete(
                    xhrSuccessStatus[ xhr.status ] || xhr.status,
                    xhr.statusText,
  
                    // Support: IE <=9 only
                    // IE9 has no XHR2 but throws on binary (trac-11426)
                    // For XHR2 non-text, let the caller handle it (gh-2498)
                    ( xhr.responseType || "text" ) !== "text"  ||
                    typeof xhr.responseText !== "string" ?
                      { binary: xhr.response } :
                      { text: xhr.responseText },
                    xhr.getAllResponseHeaders()
                  );
                }
              }
            };
          };
  
          // Listen to events
          xhr.onload = callback();
          errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );
  
          // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts
          if ( xhr.onabort !== undefined ) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function() {
  
              // Check readyState before timeout as it changes
              if ( xhr.readyState === 4 ) {
  
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout( function() {
                  if ( callback ) {
                    errorCallback();
                  }
                } );
              }
            };
          }
  
          // Create the abort callback
          callback = callback( "abort" );
  
          try {
  
            // Do send the request (this may raise an exception)
            xhr.send( options.hasContent && options.data || null );
          } catch ( e ) {
  
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if ( callback ) {
              throw e;
            }
          }
        },
  
        abort: function() {
          if ( callback ) {
            callback();
          }
        }
      };
    }
  } );
  
  
  
  
  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
  jQuery.ajaxPrefilter( function( s ) {
    if ( s.crossDomain ) {
      s.contents.script = false;
    }
  } );
  
  // Install script dataType
  jQuery.ajaxSetup( {
    accepts: {
      script: "text/javascript, application/javascript, " +
        "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function( text ) {
        jQuery.globalEval( text );
        return text;
      }
    }
  } );
  
  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter( "script", function( s ) {
    if ( s.cache === undefined ) {
      s.cache = false;
    }
    if ( s.crossDomain ) {
      s.type = "GET";
    }
  } );
  
  // Bind script tag hack transport
  jQuery.ajaxTransport( "script", function( s ) {
  
    // This transport only deals with cross domain or forced-by-attrs requests
    if ( s.crossDomain || s.scriptAttrs ) {
      var script, callback;
      return {
        send: function( _, complete ) {
          script = jQuery( "<script>" )
            .attr( s.scriptAttrs || {} )
            .prop( { charset: s.scriptCharset, src: s.url } )
            .on( "load error", callback = function( evt ) {
              script.remove();
              callback = null;
              if ( evt ) {
                complete( evt.type === "error" ? 404 : 200, evt.type );
              }
            } );
  
          // Use native DOM manipulation to avoid our domManip AJAX trickery
          document.head.appendChild( script[ 0 ] );
        },
        abort: function() {
          if ( callback ) {
            callback();
          }
        }
      };
    }
  } );
  
  
  
  
  var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;
  
  // Default jsonp settings
  jQuery.ajaxSetup( {
    jsonp: "callback",
    jsonpCallback: function() {
      var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
      this[ callback ] = true;
      return callback;
    }
  } );
  
  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
  
    var callbackName, overwritten, responseContainer,
      jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
        "url" :
        typeof s.data === "string" &&
          ( s.contentType || "" )
            .indexOf( "application/x-www-form-urlencoded" ) === 0 &&
          rjsonp.test( s.data ) && "data"
      );
  
    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
  
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
        s.jsonpCallback() :
        s.jsonpCallback;
  
      // Insert callback into url or form data
      if ( jsonProp ) {
        s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
      } else if ( s.jsonp !== false ) {
        s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
      }
  
      // Use data converter to retrieve json after script execution
      s.converters[ "script json" ] = function() {
        if ( !responseContainer ) {
          jQuery.error( callbackName + " was not called" );
        }
        return responseContainer[ 0 ];
      };
  
      // Force json dataType
      s.dataTypes[ 0 ] = "json";
  
      // Install callback
      overwritten = window[ callbackName ];
      window[ callbackName ] = function() {
        responseContainer = arguments;
      };
  
      // Clean-up function (fires after converters)
      jqXHR.always( function() {
  
        // If previous value didn't exist - remove it
        if ( overwritten === undefined ) {
          jQuery( window ).removeProp( callbackName );
  
        // Otherwise restore preexisting value
        } else {
          window[ callbackName ] = overwritten;
        }
  
        // Save back as free
        if ( s[ callbackName ] ) {
  
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;
  
          // Save the callback name for future use
          oldCallbacks.push( callbackName );
        }
  
        // Call if it was a function and we have a response
        if ( responseContainer && isFunction( overwritten ) ) {
          overwritten( responseContainer[ 0 ] );
        }
  
        responseContainer = overwritten = undefined;
      } );
  
      // Delegate to script
      return "script";
    }
  } );
  
  
  
  
  // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337
  support.createHTMLDocument = ( function() {
    var body = document.implementation.createHTMLDocument( "" ).body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  } )();
  
  
  // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function( data, context, keepScripts ) {
    if ( typeof data !== "string" ) {
      return [];
    }
    if ( typeof context === "boolean" ) {
      keepScripts = context;
      context = false;
    }
  
    var base, parsed, scripts;
  
    if ( !context ) {
  
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if ( support.createHTMLDocument ) {
        context = document.implementation.createHTMLDocument( "" );
  
        // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)
        base = context.createElement( "base" );
        base.href = document.location.href;
        context.head.appendChild( base );
      } else {
        context = document;
      }
    }
  
    parsed = rsingleTag.exec( data );
    scripts = !keepScripts && [];
  
    // Single tag
    if ( parsed ) {
      return [ context.createElement( parsed[ 1 ] ) ];
    }
  
    parsed = buildFragment( [ data ], context, scripts );
  
    if ( scripts && scripts.length ) {
      jQuery( scripts ).remove();
    }
  
    return jQuery.merge( [], parsed.childNodes );
  };
  
  
  /**
   * Load a url into a page
   */
  jQuery.fn.load = function( url, params, callback ) {
    var selector, type, response,
      self = this,
      off = url.indexOf( " " );
  
    if ( off > -1 ) {
      selector = stripAndCollapse( url.slice( off ) );
      url = url.slice( 0, off );
    }
  
    // If it's a function
    if ( isFunction( params ) ) {
  
      // We assume that it's the callback
      callback = params;
      params = undefined;
  
    // Otherwise, build a param string
    } else if ( params && typeof params === "object" ) {
      type = "POST";
    }
  
    // If we have elements to modify, make the request
    if ( self.length > 0 ) {
      jQuery.ajax( {
        url: url,
  
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      } ).done( function( responseText ) {
  
        // Save response for use in complete callback
        response = arguments;
  
        self.html( selector ?
  
          // If a selector was specified, locate the right elements in a dummy div
          // Exclude scripts to avoid IE 'Permission Denied' errors
          jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
  
          // Otherwise use the full result
          responseText );
  
      // If the request succeeds, this function gets "data", "status", "jqXHR"
      // but they are ignored because response was set above.
      // If it fails, this function gets "jqXHR", "status", "error"
      } ).always( callback && function( jqXHR, status ) {
        self.each( function() {
          callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
        } );
      } );
    }
  
    return this;
  };
  
  
  
  
  jQuery.expr.pseudos.animated = function( elem ) {
    return jQuery.grep( jQuery.timers, function( fn ) {
      return elem === fn.elem;
    } ).length;
  };
  
  
  
  
  jQuery.offset = {
    setOffset: function( elem, options, i ) {
      var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
        position = jQuery.css( elem, "position" ),
        curElem = jQuery( elem ),
        props = {};
  
      // Set position first, in-case top/left are set even on static elem
      if ( position === "static" ) {
        elem.style.position = "relative";
      }
  
      curOffset = curElem.offset();
      curCSSTop = jQuery.css( elem, "top" );
      curCSSLeft = jQuery.css( elem, "left" );
      calculatePosition = ( position === "absolute" || position === "fixed" ) &&
        ( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
  
      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if ( calculatePosition ) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
  
      } else {
        curTop = parseFloat( curCSSTop ) || 0;
        curLeft = parseFloat( curCSSLeft ) || 0;
      }
  
      if ( isFunction( options ) ) {
  
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
      }
  
      if ( options.top != null ) {
        props.top = ( options.top - curOffset.top ) + curTop;
      }
      if ( options.left != null ) {
        props.left = ( options.left - curOffset.left ) + curLeft;
      }
  
      if ( "using" in options ) {
        options.using.call( elem, props );
  
      } else {
        if ( typeof props.top === "number" ) {
          props.top += "px";
        }
        if ( typeof props.left === "number" ) {
          props.left += "px";
        }
        curElem.css( props );
      }
    }
  };
  
  jQuery.fn.extend( {
  
    // offset() relates an element's border box to the document origin
    offset: function( options ) {
  
      // Preserve chaining for setter
      if ( arguments.length ) {
        return options === undefined ?
          this :
          this.each( function( i ) {
            jQuery.offset.setOffset( this, options, i );
          } );
      }
  
      var rect, win,
        elem = this[ 0 ];
  
      if ( !elem ) {
        return;
      }
  
      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error
      if ( !elem.getClientRects().length ) {
        return { top: 0, left: 0 };
      }
  
      // Get document-relative position by adding viewport scroll to viewport-relative gBCR
      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
  
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function() {
      if ( !this[ 0 ] ) {
        return;
      }
  
      var offsetParent, offset, doc,
        elem = this[ 0 ],
        parentOffset = { top: 0, left: 0 };
  
      // position:fixed elements are offset from the viewport, which itself always has zero offset
      if ( jQuery.css( elem, "position" ) === "fixed" ) {
  
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
  
      } else {
        offset = this.offset();
  
        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;
        while ( offsetParent &&
          ( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
          jQuery.css( offsetParent, "position" ) === "static" ) {
  
          offsetParent = offsetParent.parentNode;
        }
        if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {
  
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery( offsetParent ).offset();
          parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
          parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
        }
      }
  
      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
        left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
      };
    },
  
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function() {
      return this.map( function() {
        var offsetParent = this.offsetParent;
  
        while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
          offsetParent = offsetParent.offsetParent;
        }
  
        return offsetParent || documentElement;
      } );
    }
  } );
  
  // Create scrollLeft and scrollTop methods
  jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
    var top = "pageYOffset" === prop;
  
    jQuery.fn[ method ] = function( val ) {
      return access( this, function( elem, method, val ) {
  
        // Coalesce documents and windows
        var win;
        if ( isWindow( elem ) ) {
          win = elem;
        } else if ( elem.nodeType === 9 ) {
          win = elem.defaultView;
        }
  
        if ( val === undefined ) {
          return win ? win[ prop ] : elem[ method ];
        }
  
        if ( win ) {
          win.scrollTo(
            !top ? val : win.pageXOffset,
            top ? val : win.pageYOffset
          );
  
        } else {
          elem[ method ] = val;
        }
      }, method, val, arguments.length );
    };
  } );
  
  // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  jQuery.each( [ "top", "left" ], function( _i, prop ) {
    jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
      function( elem, computed ) {
        if ( computed ) {
          computed = curCSS( elem, prop );
  
          // If curCSS returns percentage, fallback to offset
          return rnumnonpx.test( computed ) ?
            jQuery( elem ).position()[ prop ] + "px" :
            computed;
        }
      }
    );
  } );
  
  
  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
    jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
      function( defaultExtra, funcName ) {
  
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[ funcName ] = function( margin, value ) {
        var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
          extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
  
        return access( this, function( elem, type, value ) {
          var doc;
  
          if ( isWindow( elem ) ) {
  
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf( "outer" ) === 0 ?
              elem[ "inner" + name ] :
              elem.document.documentElement[ "client" + name ];
          }
  
          // Get document width or height
          if ( elem.nodeType === 9 ) {
            doc = elem.documentElement;
  
            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(
              elem.body[ "scroll" + name ], doc[ "scroll" + name ],
              elem.body[ "offset" + name ], doc[ "offset" + name ],
              doc[ "client" + name ]
            );
          }
  
          return value === undefined ?
  
            // Get width or height on the element, requesting but not forcing parseFloat
            jQuery.css( elem, type, extra ) :
  
            // Set width or height on the element
            jQuery.style( elem, type, value, extra );
        }, type, chainable ? margin : undefined, chainable );
      };
    } );
  } );
  
  
  jQuery.each( [
    "ajaxStart",
    "ajaxStop",
    "ajaxComplete",
    "ajaxError",
    "ajaxSuccess",
    "ajaxSend"
  ], function( _i, type ) {
    jQuery.fn[ type ] = function( fn ) {
      return this.on( type, fn );
    };
  } );
  
  
  
  
  jQuery.fn.extend( {
  
    bind: function( types, data, fn ) {
      return this.on( types, null, data, fn );
    },
    unbind: function( types, fn ) {
      return this.off( types, null, fn );
    },
  
    delegate: function( selector, types, data, fn ) {
      return this.on( types, selector, data, fn );
    },
    undelegate: function( selector, types, fn ) {
  
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ?
        this.off( selector, "**" ) :
        this.off( types, selector || "**", fn );
    },
  
    hover: function( fnOver, fnOut ) {
      return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
    }
  } );
  
  jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
    "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
    "change select submit keydown keypress keyup contextmenu" ).split( " " ),
    function( _i, name ) {
  
      // Handle event binding
      jQuery.fn[ name ] = function( data, fn ) {
        return arguments.length > 0 ?
          this.on( name, null, data, fn ) :
          this.trigger( name );
      };
    } );
  
  
  
  
  // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
  
  // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon
  jQuery.proxy = function( fn, context ) {
    var tmp, args, proxy;
  
    if ( typeof context === "string" ) {
      tmp = fn[ context ];
      context = fn;
      fn = tmp;
    }
  
    // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.
    if ( !isFunction( fn ) ) {
      return undefined;
    }
  
    // Simulated bind
    args = slice.call( arguments, 2 );
    proxy = function() {
      return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
    };
  
    // Set the guid of unique handler to the same of original handler, so it can be removed
    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
  
    return proxy;
  };
  
  jQuery.holdReady = function( hold ) {
    if ( hold ) {
      jQuery.readyWait++;
    } else {
      jQuery.ready( true );
    }
  };
  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  
  jQuery.now = Date.now;
  
  jQuery.isNumeric = function( obj ) {
  
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type( obj );
    return ( type === "number" || type === "string" ) &&
  
      // parseFloat NaNs numeric-cast false positives ("")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      !isNaN( obj - parseFloat( obj ) );
  };
  
  jQuery.trim = function( text ) {
    return text == null ?
      "" :
      ( text + "" ).replace( rtrim, "" );
  };
  
  
  
  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
  
  if ( true ) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return jQuery;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
      __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  
  
  
  
  var
  
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
  
    // Map over the $ in case of overwrite
    _$ = window.$;
  
  jQuery.noConflict = function( deep ) {
    if ( window.$ === jQuery ) {
      window.$ = _$;
    }
  
    if ( deep && window.jQuery === jQuery ) {
      window.jQuery = _jQuery;
    }
  
    return jQuery;
  };
  
  // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)
  if ( typeof noGlobal === "undefined" ) {
    window.jQuery = window.$ = jQuery;
  }
  
  
  
  
  return jQuery;
  } );
  
  
  /***/ })
  
  /******/ 	});
  /************************************************************************/
  /******/ 	// The module cache
  /******/ 	var __webpack_module_cache__ = {};
  /******/ 	
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/ 		// Check if module is in cache
  /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
  /******/ 		if (cachedModule !== undefined) {
  /******/ 			return cachedModule.exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = __webpack_module_cache__[moduleId] = {
  /******/ 			// no module.id needed
  /******/ 			// no module.loaded needed
  /******/ 			exports: {}
  /******/ 		};
  /******/ 	
  /******/ 		// Execute the module function
  /******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  /******/ 	
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/ 	
  /************************************************************************/
  /******/ 	/* webpack/runtime/make namespace object */
  /******/ 	(() => {
  /******/ 		// define __esModule on exports
  /******/ 		__webpack_require__.r = (exports) => {
  /******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
  /******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
  /******/ 			}
  /******/ 			Object.defineProperty(exports, '__esModule', { value: true });
  /******/ 		};
  /******/ 	})();
  /******/ 	
  /************************************************************************/
  var __webpack_exports__ = {};
  // This entry need to be wrapped in an IIFE because it need to be in strict mode.
  (() => {
  "use strict";
  // ESM COMPAT FLAG
  __webpack_require__.r(__webpack_exports__);
  
  ;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */
  
  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };
  
  function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  
  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      }
      return __assign.apply(this, arguments);
  }
  
  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }
  
  function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  
  function __param(paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); }
  }
  
  function __metadata(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  }
  
  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }
  
  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }
  
  var __createBinding = Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  });
  
  function __exportStar(m, o) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  }
  
  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  
  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }
  
  /** @deprecated */
  function __spread() {
      for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
      return ar;
  }
  
  /** @deprecated */
  function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }
  
  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }
  
  function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  
  function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
      function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
      function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
      function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
      function fulfill(value) { resume("next", value); }
      function reject(value) { resume("throw", value); }
      function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
  }
  
  function __asyncDelegator(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
      function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
  }
  
  function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
      function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
      function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
  }
  
  function __makeTemplateObject(cooked, raw) {
      if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
      return cooked;
  };
  
  var __setModuleDefault = Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
  }) : function(o, v) {
      o["default"] = v;
  };
  
  function __importStar(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
  }
  
  function __importDefault(mod) {
      return (mod && mod.__esModule) ? mod : { default: mod };
  }
  
  function __classPrivateFieldGet(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  }
  
  function __classPrivateFieldSet(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
  }
  
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isFunction.js
  function isFunction_isFunction(value) {
      return typeof value === 'function';
  }
  //# sourceMappingURL=isFunction.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
  function createErrorClass(createImpl) {
      var _super = function (instance) {
          Error.call(instance);
          instance.stack = new Error().stack;
      };
      var ctorFunc = createImpl(_super);
      ctorFunc.prototype = Object.create(Error.prototype);
      ctorFunc.prototype.constructor = ctorFunc;
      return ctorFunc;
  }
  //# sourceMappingURL=createErrorClass.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
  
  var UnsubscriptionError = createErrorClass(function (_super) {
      return function UnsubscriptionErrorImpl(errors) {
          _super(this);
          this.message = errors
              ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
              : '';
          this.name = 'UnsubscriptionError';
          this.errors = errors;
      };
  });
  //# sourceMappingURL=UnsubscriptionError.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
  function arrRemove(arr, item) {
      if (arr) {
          var index = arr.indexOf(item);
          0 <= index && arr.splice(index, 1);
      }
  }
  //# sourceMappingURL=arrRemove.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscription.js
  
  
  
  
  var Subscription = (function () {
      function Subscription(initialTeardown) {
          this.initialTeardown = initialTeardown;
          this.closed = false;
          this._parentage = null;
          this._finalizers = null;
      }
      Subscription.prototype.unsubscribe = function () {
          var e_1, _a, e_2, _b;
          var errors;
          if (!this.closed) {
              this.closed = true;
              var _parentage = this._parentage;
              if (_parentage) {
                  this._parentage = null;
                  if (Array.isArray(_parentage)) {
                      try {
                          for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                              var parent_1 = _parentage_1_1.value;
                              parent_1.remove(this);
                          }
                      }
                      catch (e_1_1) { e_1 = { error: e_1_1 }; }
                      finally {
                          try {
                              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                          }
                          finally { if (e_1) throw e_1.error; }
                      }
                  }
                  else {
                      _parentage.remove(this);
                  }
              }
              var initialFinalizer = this.initialTeardown;
              if (isFunction_isFunction(initialFinalizer)) {
                  try {
                      initialFinalizer();
                  }
                  catch (e) {
                      errors = e instanceof UnsubscriptionError ? e.errors : [e];
                  }
              }
              var _finalizers = this._finalizers;
              if (_finalizers) {
                  this._finalizers = null;
                  try {
                      for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                          var finalizer = _finalizers_1_1.value;
                          try {
                              execFinalizer(finalizer);
                          }
                          catch (err) {
                              errors = errors !== null && errors !== void 0 ? errors : [];
                              if (err instanceof UnsubscriptionError) {
                                  errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                              }
                              else {
                                  errors.push(err);
                              }
                          }
                      }
                  }
                  catch (e_2_1) { e_2 = { error: e_2_1 }; }
                  finally {
                      try {
                          if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                      }
                      finally { if (e_2) throw e_2.error; }
                  }
              }
              if (errors) {
                  throw new UnsubscriptionError(errors);
              }
          }
      };
      Subscription.prototype.add = function (teardown) {
          var _a;
          if (teardown && teardown !== this) {
              if (this.closed) {
                  execFinalizer(teardown);
              }
              else {
                  if (teardown instanceof Subscription) {
                      if (teardown.closed || teardown._hasParent(this)) {
                          return;
                      }
                      teardown._addParent(this);
                  }
                  (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
              }
          }
      };
      Subscription.prototype._hasParent = function (parent) {
          var _parentage = this._parentage;
          return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
      };
      Subscription.prototype._addParent = function (parent) {
          var _parentage = this._parentage;
          this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
      };
      Subscription.prototype._removeParent = function (parent) {
          var _parentage = this._parentage;
          if (_parentage === parent) {
              this._parentage = null;
          }
          else if (Array.isArray(_parentage)) {
              arrRemove(_parentage, parent);
          }
      };
      Subscription.prototype.remove = function (teardown) {
          var _finalizers = this._finalizers;
          _finalizers && arrRemove(_finalizers, teardown);
          if (teardown instanceof Subscription) {
              teardown._removeParent(this);
          }
      };
      Subscription.EMPTY = (function () {
          var empty = new Subscription();
          empty.closed = true;
          return empty;
      })();
      return Subscription;
  }());
  
  var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  function isSubscription(value) {
      return (value instanceof Subscription ||
          (value && 'closed' in value && isFunction_isFunction(value.remove) && isFunction_isFunction(value.add) && isFunction_isFunction(value.unsubscribe)));
  }
  function execFinalizer(finalizer) {
      if (isFunction_isFunction(finalizer)) {
          finalizer();
      }
      else {
          finalizer.unsubscribe();
      }
  }
  //# sourceMappingURL=Subscription.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/config.js
  var config = {
      onUnhandledError: null,
      onStoppedNotification: null,
      Promise: undefined,
      useDeprecatedSynchronousErrorHandling: false,
      useDeprecatedNextContext: false,
  };
  //# sourceMappingURL=config.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
  
  var timeoutProvider = {
      setTimeout: function (handler, timeout) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
              args[_i - 2] = arguments[_i];
          }
          var delegate = timeoutProvider.delegate;
          if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
              return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
          }
          return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
      },
      clearTimeout: function (handle) {
          var delegate = timeoutProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
      },
      delegate: undefined,
  };
  //# sourceMappingURL=timeoutProvider.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
  
  
  function reportUnhandledError(err) {
      timeoutProvider.setTimeout(function () {
          var onUnhandledError = config.onUnhandledError;
          if (onUnhandledError) {
              onUnhandledError(err);
          }
          else {
              throw err;
          }
      });
  }
  //# sourceMappingURL=reportUnhandledError.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/noop.js
  function noop() { }
  //# sourceMappingURL=noop.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
  var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
  function errorNotification(error) {
      return createNotification('E', undefined, error);
  }
  function nextNotification(value) {
      return createNotification('N', value, undefined);
  }
  function createNotification(kind, value, error) {
      return {
          kind: kind,
          value: value,
          error: error,
      };
  }
  //# sourceMappingURL=NotificationFactories.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/errorContext.js
  
  var context = null;
  function errorContext(cb) {
      if (config.useDeprecatedSynchronousErrorHandling) {
          var isRoot = !context;
          if (isRoot) {
              context = { errorThrown: false, error: null };
          }
          cb();
          if (isRoot) {
              var _a = context, errorThrown = _a.errorThrown, error = _a.error;
              context = null;
              if (errorThrown) {
                  throw error;
              }
          }
      }
      else {
          cb();
      }
  }
  function captureError(err) {
      if (config.useDeprecatedSynchronousErrorHandling && context) {
          context.errorThrown = true;
          context.error = err;
      }
  }
  //# sourceMappingURL=errorContext.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscriber.js
  
  
  
  
  
  
  
  
  
  var Subscriber = (function (_super) {
      __extends(Subscriber, _super);
      function Subscriber(destination) {
          var _this = _super.call(this) || this;
          _this.isStopped = false;
          if (destination) {
              _this.destination = destination;
              if (isSubscription(destination)) {
                  destination.add(_this);
              }
          }
          else {
              _this.destination = EMPTY_OBSERVER;
          }
          return _this;
      }
      Subscriber.create = function (next, error, complete) {
          return new SafeSubscriber(next, error, complete);
      };
      Subscriber.prototype.next = function (value) {
          if (this.isStopped) {
              handleStoppedNotification(nextNotification(value), this);
          }
          else {
              this._next(value);
          }
      };
      Subscriber.prototype.error = function (err) {
          if (this.isStopped) {
              handleStoppedNotification(errorNotification(err), this);
          }
          else {
              this.isStopped = true;
              this._error(err);
          }
      };
      Subscriber.prototype.complete = function () {
          if (this.isStopped) {
              handleStoppedNotification(COMPLETE_NOTIFICATION, this);
          }
          else {
              this.isStopped = true;
              this._complete();
          }
      };
      Subscriber.prototype.unsubscribe = function () {
          if (!this.closed) {
              this.isStopped = true;
              _super.prototype.unsubscribe.call(this);
              this.destination = null;
          }
      };
      Subscriber.prototype._next = function (value) {
          this.destination.next(value);
      };
      Subscriber.prototype._error = function (err) {
          try {
              this.destination.error(err);
          }
          finally {
              this.unsubscribe();
          }
      };
      Subscriber.prototype._complete = function () {
          try {
              this.destination.complete();
          }
          finally {
              this.unsubscribe();
          }
      };
      return Subscriber;
  }(Subscription));
  
  var _bind = Function.prototype.bind;
  function bind(fn, thisArg) {
      return _bind.call(fn, thisArg);
  }
  var ConsumerObserver = (function () {
      function ConsumerObserver(partialObserver) {
          this.partialObserver = partialObserver;
      }
      ConsumerObserver.prototype.next = function (value) {
          var partialObserver = this.partialObserver;
          if (partialObserver.next) {
              try {
                  partialObserver.next(value);
              }
              catch (error) {
                  handleUnhandledError(error);
              }
          }
      };
      ConsumerObserver.prototype.error = function (err) {
          var partialObserver = this.partialObserver;
          if (partialObserver.error) {
              try {
                  partialObserver.error(err);
              }
              catch (error) {
                  handleUnhandledError(error);
              }
          }
          else {
              handleUnhandledError(err);
          }
      };
      ConsumerObserver.prototype.complete = function () {
          var partialObserver = this.partialObserver;
          if (partialObserver.complete) {
              try {
                  partialObserver.complete();
              }
              catch (error) {
                  handleUnhandledError(error);
              }
          }
      };
      return ConsumerObserver;
  }());
  var SafeSubscriber = (function (_super) {
      __extends(SafeSubscriber, _super);
      function SafeSubscriber(observerOrNext, error, complete) {
          var _this = _super.call(this) || this;
          var partialObserver;
          if (isFunction_isFunction(observerOrNext) || !observerOrNext) {
              partialObserver = {
                  next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,
                  error: error !== null && error !== void 0 ? error : undefined,
                  complete: complete !== null && complete !== void 0 ? complete : undefined,
              };
          }
          else {
              var context_1;
              if (_this && config.useDeprecatedNextContext) {
                  context_1 = Object.create(observerOrNext);
                  context_1.unsubscribe = function () { return _this.unsubscribe(); };
                  partialObserver = {
                      next: observerOrNext.next && bind(observerOrNext.next, context_1),
                      error: observerOrNext.error && bind(observerOrNext.error, context_1),
                      complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                  };
              }
              else {
                  partialObserver = observerOrNext;
              }
          }
          _this.destination = new ConsumerObserver(partialObserver);
          return _this;
      }
      return SafeSubscriber;
  }(Subscriber));
  
  function handleUnhandledError(error) {
      if (config.useDeprecatedSynchronousErrorHandling) {
          captureError(error);
      }
      else {
          reportUnhandledError(error);
      }
  }
  function defaultErrorHandler(err) {
      throw err;
  }
  function handleStoppedNotification(notification, subscriber) {
      var onStoppedNotification = config.onStoppedNotification;
      onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
  }
  var EMPTY_OBSERVER = {
      closed: true,
      next: noop,
      error: defaultErrorHandler,
      complete: noop,
  };
  //# sourceMappingURL=Subscriber.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/observable.js
  var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();
  //# sourceMappingURL=observable.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/identity.js
  function identity(x) {
      return x;
  }
  //# sourceMappingURL=identity.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/pipe.js
  
  function pipe() {
      var fns = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          fns[_i] = arguments[_i];
      }
      return pipeFromArray(fns);
  }
  function pipeFromArray(fns) {
      if (fns.length === 0) {
          return identity;
      }
      if (fns.length === 1) {
          return fns[0];
      }
      return function piped(input) {
          return fns.reduce(function (prev, fn) { return fn(prev); }, input);
      };
  }
  //# sourceMappingURL=pipe.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Observable.js
  
  
  
  
  
  
  
  var Observable_Observable = (function () {
      function Observable(subscribe) {
          if (subscribe) {
              this._subscribe = subscribe;
          }
      }
      Observable.prototype.lift = function (operator) {
          var observable = new Observable();
          observable.source = this;
          observable.operator = operator;
          return observable;
      };
      Observable.prototype.subscribe = function (observerOrNext, error, complete) {
          var _this = this;
          var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
          errorContext(function () {
              var _a = _this, operator = _a.operator, source = _a.source;
              subscriber.add(operator
                  ?
                      operator.call(subscriber, source)
                  : source
                      ?
                          _this._subscribe(subscriber)
                      :
                          _this._trySubscribe(subscriber));
          });
          return subscriber;
      };
      Observable.prototype._trySubscribe = function (sink) {
          try {
              return this._subscribe(sink);
          }
          catch (err) {
              sink.error(err);
          }
      };
      Observable.prototype.forEach = function (next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var subscriber = new SafeSubscriber({
                  next: function (value) {
                      try {
                          next(value);
                      }
                      catch (err) {
                          reject(err);
                          subscriber.unsubscribe();
                      }
                  },
                  error: reject,
                  complete: resolve,
              });
              _this.subscribe(subscriber);
          });
      };
      Observable.prototype._subscribe = function (subscriber) {
          var _a;
          return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
      };
      Observable.prototype[observable] = function () {
          return this;
      };
      Observable.prototype.pipe = function () {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              operations[_i] = arguments[_i];
          }
          return pipeFromArray(operations)(this);
      };
      Observable.prototype.toPromise = function (promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var value;
              _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
          });
      };
      Observable.create = function (subscribe) {
          return new Observable(subscribe);
      };
      return Observable;
  }());
  
  function getPromiseCtor(promiseCtor) {
      var _a;
      return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
  }
  function isObserver(value) {
      return value && isFunction_isFunction(value.next) && isFunction_isFunction(value.error) && isFunction_isFunction(value.complete);
  }
  function isSubscriber(value) {
      return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
  }
  //# sourceMappingURL=Observable.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
  
  var ObjectUnsubscribedError = createErrorClass(function (_super) {
      return function ObjectUnsubscribedErrorImpl() {
          _super(this);
          this.name = 'ObjectUnsubscribedError';
          this.message = 'object unsubscribed';
      };
  });
  //# sourceMappingURL=ObjectUnsubscribedError.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subject.js
  
  
  
  
  
  
  var Subject = (function (_super) {
      __extends(Subject, _super);
      function Subject() {
          var _this = _super.call(this) || this;
          _this.closed = false;
          _this.currentObservers = null;
          _this.observers = [];
          _this.isStopped = false;
          _this.hasError = false;
          _this.thrownError = null;
          return _this;
      }
      Subject.prototype.lift = function (operator) {
          var subject = new AnonymousSubject(this, this);
          subject.operator = operator;
          return subject;
      };
      Subject.prototype._throwIfClosed = function () {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
      };
      Subject.prototype.next = function (value) {
          var _this = this;
          errorContext(function () {
              var e_1, _a;
              _this._throwIfClosed();
              if (!_this.isStopped) {
                  if (!_this.currentObservers) {
                      _this.currentObservers = Array.from(_this.observers);
                  }
                  try {
                      for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var observer = _c.value;
                          observer.next(value);
                      }
                  }
                  catch (e_1_1) { e_1 = { error: e_1_1 }; }
                  finally {
                      try {
                          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                      }
                      finally { if (e_1) throw e_1.error; }
                  }
              }
          });
      };
      Subject.prototype.error = function (err) {
          var _this = this;
          errorContext(function () {
              _this._throwIfClosed();
              if (!_this.isStopped) {
                  _this.hasError = _this.isStopped = true;
                  _this.thrownError = err;
                  var observers = _this.observers;
                  while (observers.length) {
                      observers.shift().error(err);
                  }
              }
          });
      };
      Subject.prototype.complete = function () {
          var _this = this;
          errorContext(function () {
              _this._throwIfClosed();
              if (!_this.isStopped) {
                  _this.isStopped = true;
                  var observers = _this.observers;
                  while (observers.length) {
                      observers.shift().complete();
                  }
              }
          });
      };
      Subject.prototype.unsubscribe = function () {
          this.isStopped = this.closed = true;
          this.observers = this.currentObservers = null;
      };
      Object.defineProperty(Subject.prototype, "observed", {
          get: function () {
              var _a;
              return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
          },
          enumerable: false,
          configurable: true
      });
      Subject.prototype._trySubscribe = function (subscriber) {
          this._throwIfClosed();
          return _super.prototype._trySubscribe.call(this, subscriber);
      };
      Subject.prototype._subscribe = function (subscriber) {
          this._throwIfClosed();
          this._checkFinalizedStatuses(subscriber);
          return this._innerSubscribe(subscriber);
      };
      Subject.prototype._innerSubscribe = function (subscriber) {
          var _this = this;
          var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
          if (hasError || isStopped) {
              return EMPTY_SUBSCRIPTION;
          }
          this.currentObservers = null;
          observers.push(subscriber);
          return new Subscription(function () {
              _this.currentObservers = null;
              arrRemove(observers, subscriber);
          });
      };
      Subject.prototype._checkFinalizedStatuses = function (subscriber) {
          var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
          if (hasError) {
              subscriber.error(thrownError);
          }
          else if (isStopped) {
              subscriber.complete();
          }
      };
      Subject.prototype.asObservable = function () {
          var observable = new Observable_Observable();
          observable.source = this;
          return observable;
      };
      Subject.create = function (destination, source) {
          return new AnonymousSubject(destination, source);
      };
      return Subject;
  }(Observable_Observable));
  
  var AnonymousSubject = (function (_super) {
      __extends(AnonymousSubject, _super);
      function AnonymousSubject(destination, source) {
          var _this = _super.call(this) || this;
          _this.destination = destination;
          _this.source = source;
          return _this;
      }
      AnonymousSubject.prototype.next = function (value) {
          var _a, _b;
          (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
      };
      AnonymousSubject.prototype.error = function (err) {
          var _a, _b;
          (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
      };
      AnonymousSubject.prototype.complete = function () {
          var _a, _b;
          (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
      };
      AnonymousSubject.prototype._subscribe = function (subscriber) {
          var _a, _b;
          return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
      };
      return AnonymousSubject;
  }(Subject));
  
  //# sourceMappingURL=Subject.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/lift.js
  
  function hasLift(source) {
      return isFunction_isFunction(source === null || source === void 0 ? void 0 : source.lift);
  }
  function operate(init) {
      return function (source) {
          if (hasLift(source)) {
              return source.lift(function (liftedSource) {
                  try {
                      return init(liftedSource, this);
                  }
                  catch (err) {
                      this.error(err);
                  }
              });
          }
          throw new TypeError('Unable to lift unknown Observable type');
      };
  }
  //# sourceMappingURL=lift.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
  
  
  function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
      return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
  }
  var OperatorSubscriber = (function (_super) {
      __extends(OperatorSubscriber, _super);
      function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
          var _this = _super.call(this, destination) || this;
          _this.onFinalize = onFinalize;
          _this.shouldUnsubscribe = shouldUnsubscribe;
          _this._next = onNext
              ? function (value) {
                  try {
                      onNext(value);
                  }
                  catch (err) {
                      destination.error(err);
                  }
              }
              : _super.prototype._next;
          _this._error = onError
              ? function (err) {
                  try {
                      onError(err);
                  }
                  catch (err) {
                      destination.error(err);
                  }
                  finally {
                      this.unsubscribe();
                  }
              }
              : _super.prototype._error;
          _this._complete = onComplete
              ? function () {
                  try {
                      onComplete();
                  }
                  catch (err) {
                      destination.error(err);
                  }
                  finally {
                      this.unsubscribe();
                  }
              }
              : _super.prototype._complete;
          return _this;
      }
      OperatorSubscriber.prototype.unsubscribe = function () {
          var _a;
          if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
              var closed_1 = this.closed;
              _super.prototype.unsubscribe.call(this);
              !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
          }
      };
      return OperatorSubscriber;
  }(Subscriber));
  
  //# sourceMappingURL=OperatorSubscriber.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/map.js
  
  
  function map(project, thisArg) {
      return operate(function (source, subscriber) {
          var index = 0;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              subscriber.next(project.call(thisArg, value, index++));
          }));
      });
  }
  //# sourceMappingURL=map.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
  var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
  //# sourceMappingURL=isArrayLike.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isPromise.js
  
  function isPromise(value) {
      return isFunction_isFunction(value === null || value === void 0 ? void 0 : value.then);
  }
  //# sourceMappingURL=isPromise.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
  
  
  function isInteropObservable(input) {
      return isFunction_isFunction(input[observable]);
  }
  //# sourceMappingURL=isInteropObservable.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
  
  function isAsyncIterable(obj) {
      return Symbol.asyncIterator && isFunction_isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
  }
  //# sourceMappingURL=isAsyncIterable.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
  function createInvalidObservableTypeError(input) {
      return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
  }
  //# sourceMappingURL=throwUnobservableError.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
  function getSymbolIterator() {
      if (typeof Symbol !== 'function' || !Symbol.iterator) {
          return '@@iterator';
      }
      return Symbol.iterator;
  }
  var iterator_iterator = getSymbolIterator();
  //# sourceMappingURL=iterator.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isIterable.js
  
  
  function isIterable(input) {
      return isFunction_isFunction(input === null || input === void 0 ? void 0 : input[iterator_iterator]);
  }
  //# sourceMappingURL=isIterable.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
  
  
  function readableStreamLikeToAsyncGenerator(readableStream) {
      return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
          var reader, _a, value, done;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      reader = readableStream.getReader();
                      _b.label = 1;
                  case 1:
                      _b.trys.push([1, , 9, 10]);
                      _b.label = 2;
                  case 2:
                      if (false) {}
                      return [4, __await(reader.read())];
                  case 3:
                      _a = _b.sent(), value = _a.value, done = _a.done;
                      if (!done) return [3, 5];
                      return [4, __await(void 0)];
                  case 4: return [2, _b.sent()];
                  case 5: return [4, __await(value)];
                  case 6: return [4, _b.sent()];
                  case 7:
                      _b.sent();
                      return [3, 2];
                  case 8: return [3, 10];
                  case 9:
                      reader.releaseLock();
                      return [7];
                  case 10: return [2];
              }
          });
      });
  }
  function isReadableStreamLike(obj) {
      return isFunction_isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
  }
  //# sourceMappingURL=isReadableStreamLike.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
  
  
  
  
  
  
  
  
  
  
  
  
  function innerFrom(input) {
      if (input instanceof Observable_Observable) {
          return input;
      }
      if (input != null) {
          if (isInteropObservable(input)) {
              return fromInteropObservable(input);
          }
          if (isArrayLike(input)) {
              return fromArrayLike(input);
          }
          if (isPromise(input)) {
              return fromPromise(input);
          }
          if (isAsyncIterable(input)) {
              return fromAsyncIterable(input);
          }
          if (isIterable(input)) {
              return fromIterable(input);
          }
          if (isReadableStreamLike(input)) {
              return fromReadableStreamLike(input);
          }
      }
      throw createInvalidObservableTypeError(input);
  }
  function fromInteropObservable(obj) {
      return new Observable_Observable(function (subscriber) {
          var obs = obj[observable]();
          if (isFunction_isFunction(obs.subscribe)) {
              return obs.subscribe(subscriber);
          }
          throw new TypeError('Provided object does not correctly implement Symbol.observable');
      });
  }
  function fromArrayLike(array) {
      return new Observable_Observable(function (subscriber) {
          for (var i = 0; i < array.length && !subscriber.closed; i++) {
              subscriber.next(array[i]);
          }
          subscriber.complete();
      });
  }
  function fromPromise(promise) {
      return new Observable_Observable(function (subscriber) {
          promise
              .then(function (value) {
              if (!subscriber.closed) {
                  subscriber.next(value);
                  subscriber.complete();
              }
          }, function (err) { return subscriber.error(err); })
              .then(null, reportUnhandledError);
      });
  }
  function fromIterable(iterable) {
      return new Observable_Observable(function (subscriber) {
          var e_1, _a;
          try {
              for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                  var value = iterable_1_1.value;
                  subscriber.next(value);
                  if (subscriber.closed) {
                      return;
                  }
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
              }
              finally { if (e_1) throw e_1.error; }
          }
          subscriber.complete();
      });
  }
  function fromAsyncIterable(asyncIterable) {
      return new Observable_Observable(function (subscriber) {
          process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
      });
  }
  function fromReadableStreamLike(readableStream) {
      return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
  }
  function process(asyncIterable, subscriber) {
      var asyncIterable_1, asyncIterable_1_1;
      var e_2, _a;
      return __awaiter(this, void 0, void 0, function () {
          var value, e_2_1;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      _b.trys.push([0, 5, 6, 11]);
                      asyncIterable_1 = __asyncValues(asyncIterable);
                      _b.label = 1;
                  case 1: return [4, asyncIterable_1.next()];
                  case 2:
                      if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                      value = asyncIterable_1_1.value;
                      subscriber.next(value);
                      if (subscriber.closed) {
                          return [2];
                      }
                      _b.label = 3;
                  case 3: return [3, 1];
                  case 4: return [3, 11];
                  case 5:
                      e_2_1 = _b.sent();
                      e_2 = { error: e_2_1 };
                      return [3, 11];
                  case 6:
                      _b.trys.push([6, , 9, 10]);
                      if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                      return [4, _a.call(asyncIterable_1)];
                  case 7:
                      _b.sent();
                      _b.label = 8;
                  case 8: return [3, 10];
                  case 9:
                      if (e_2) throw e_2.error;
                      return [7];
                  case 10: return [7];
                  case 11:
                      subscriber.complete();
                      return [2];
              }
          });
      });
  }
  //# sourceMappingURL=innerFrom.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
  function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
      if (delay === void 0) { delay = 0; }
      if (repeat === void 0) { repeat = false; }
      var scheduleSubscription = scheduler.schedule(function () {
          work();
          if (repeat) {
              parentSubscription.add(this.schedule(null, delay));
          }
          else {
              this.unsubscribe();
          }
      }, delay);
      parentSubscription.add(scheduleSubscription);
      if (!repeat) {
          return scheduleSubscription;
      }
  }
  //# sourceMappingURL=executeSchedule.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
  
  
  
  function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
      var buffer = [];
      var active = 0;
      var index = 0;
      var isComplete = false;
      var checkComplete = function () {
          if (isComplete && !buffer.length && !active) {
              subscriber.complete();
          }
      };
      var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
      var doInnerSub = function (value) {
          expand && subscriber.next(value);
          active++;
          var innerComplete = false;
          innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
              onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
              if (expand) {
                  outerNext(innerValue);
              }
              else {
                  subscriber.next(innerValue);
              }
          }, function () {
              innerComplete = true;
          }, undefined, function () {
              if (innerComplete) {
                  try {
                      active--;
                      var _loop_1 = function () {
                          var bufferedValue = buffer.shift();
                          if (innerSubScheduler) {
                              executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                          }
                          else {
                              doInnerSub(bufferedValue);
                          }
                      };
                      while (buffer.length && active < concurrent) {
                          _loop_1();
                      }
                      checkComplete();
                  }
                  catch (err) {
                      subscriber.error(err);
                  }
              }
          }));
      };
      source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
          isComplete = true;
          checkComplete();
      }));
      return function () {
          additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
      };
  }
  //# sourceMappingURL=mergeInternals.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
  
  
  
  
  
  function mergeMap(project, resultSelector, concurrent) {
      if (concurrent === void 0) { concurrent = Infinity; }
      if (isFunction_isFunction(resultSelector)) {
          return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
      }
      else if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
      }
      return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
  }
  //# sourceMappingURL=mergeMap.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
  
  
  function mergeAll(concurrent) {
      if (concurrent === void 0) { concurrent = Infinity; }
      return mergeMap(identity, concurrent);
  }
  //# sourceMappingURL=mergeAll.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/empty.js
  
  var EMPTY = new Observable_Observable(function (subscriber) { return subscriber.complete(); });
  function empty(scheduler) {
      return scheduler ? emptyScheduled(scheduler) : EMPTY;
  }
  function emptyScheduled(scheduler) {
      return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
  }
  //# sourceMappingURL=empty.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
  
  function isScheduler(value) {
      return value && isFunction_isFunction(value.schedule);
  }
  //# sourceMappingURL=isScheduler.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/args.js
  
  
  function last(arr) {
      return arr[arr.length - 1];
  }
  function popResultSelector(args) {
      return isFunction(last(args)) ? args.pop() : undefined;
  }
  function popScheduler(args) {
      return isScheduler(last(args)) ? args.pop() : undefined;
  }
  function popNumber(args, defaultValue) {
      return typeof last(args) === 'number' ? args.pop() : defaultValue;
  }
  //# sourceMappingURL=args.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
  
  
  
  function observeOn(scheduler, delay) {
      if (delay === void 0) { delay = 0; }
      return operate(function (source, subscriber) {
          source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
      });
  }
  //# sourceMappingURL=observeOn.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
  
  function subscribeOn(scheduler, delay) {
      if (delay === void 0) { delay = 0; }
      return operate(function (source, subscriber) {
          subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
      });
  }
  //# sourceMappingURL=subscribeOn.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
  
  
  
  function scheduleObservable(input, scheduler) {
      return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }
  //# sourceMappingURL=scheduleObservable.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
  
  
  
  function schedulePromise(input, scheduler) {
      return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }
  //# sourceMappingURL=schedulePromise.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
  
  function scheduleArray(input, scheduler) {
      return new Observable_Observable(function (subscriber) {
          var i = 0;
          return scheduler.schedule(function () {
              if (i === input.length) {
                  subscriber.complete();
              }
              else {
                  subscriber.next(input[i++]);
                  if (!subscriber.closed) {
                      this.schedule();
                  }
              }
          });
      });
  }
  //# sourceMappingURL=scheduleArray.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
  
  
  
  
  function scheduleIterable(input, scheduler) {
      return new Observable_Observable(function (subscriber) {
          var iterator;
          executeSchedule(subscriber, scheduler, function () {
              iterator = input[iterator_iterator]();
              executeSchedule(subscriber, scheduler, function () {
                  var _a;
                  var value;
                  var done;
                  try {
                      (_a = iterator.next(), value = _a.value, done = _a.done);
                  }
                  catch (err) {
                      subscriber.error(err);
                      return;
                  }
                  if (done) {
                      subscriber.complete();
                  }
                  else {
                      subscriber.next(value);
                  }
              }, 0, true);
          });
          return function () { return isFunction_isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
      });
  }
  //# sourceMappingURL=scheduleIterable.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
  
  
  function scheduleAsyncIterable(input, scheduler) {
      if (!input) {
          throw new Error('Iterable cannot be null');
      }
      return new Observable_Observable(function (subscriber) {
          executeSchedule(subscriber, scheduler, function () {
              var iterator = input[Symbol.asyncIterator]();
              executeSchedule(subscriber, scheduler, function () {
                  iterator.next().then(function (result) {
                      if (result.done) {
                          subscriber.complete();
                      }
                      else {
                          subscriber.next(result.value);
                      }
                  });
              }, 0, true);
          });
      });
  }
  //# sourceMappingURL=scheduleAsyncIterable.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
  
  
  function scheduleReadableStreamLike(input, scheduler) {
      return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
  }
  //# sourceMappingURL=scheduleReadableStreamLike.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
  
  
  
  
  
  
  
  
  
  
  
  
  
  function scheduled(input, scheduler) {
      if (input != null) {
          if (isInteropObservable(input)) {
              return scheduleObservable(input, scheduler);
          }
          if (isArrayLike(input)) {
              return scheduleArray(input, scheduler);
          }
          if (isPromise(input)) {
              return schedulePromise(input, scheduler);
          }
          if (isAsyncIterable(input)) {
              return scheduleAsyncIterable(input, scheduler);
          }
          if (isIterable(input)) {
              return scheduleIterable(input, scheduler);
          }
          if (isReadableStreamLike(input)) {
              return scheduleReadableStreamLike(input, scheduler);
          }
      }
      throw createInvalidObservableTypeError(input);
  }
  //# sourceMappingURL=scheduled.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/from.js
  
  
  function from(input, scheduler) {
      return scheduler ? scheduled(input, scheduler) : innerFrom(input);
  }
  //# sourceMappingURL=from.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/merge.js
  
  
  
  
  
  function merge() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      var scheduler = popScheduler(args);
      var concurrent = popNumber(args, Infinity);
      var sources = args;
      return !sources.length
          ?
              EMPTY
          : sources.length === 1
              ?
                  innerFrom(sources[0])
              :
                  mergeAll(concurrent)(from(sources, scheduler));
  }
  //# sourceMappingURL=merge.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/take.js
  
  
  
  function take(count) {
      return count <= 0
          ?
              function () { return EMPTY; }
          : operate(function (source, subscriber) {
              var seen = 0;
              source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                  if (++seen <= count) {
                      subscriber.next(value);
                      if (count <= seen) {
                          subscriber.complete();
                      }
                  }
              }));
          });
  }
  //# sourceMappingURL=take.js.map
  ;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/share.js
  
  
  
  
  
  
  function share(options) {
      if (options === void 0) { options = {}; }
      var _a = options.connector, connector = _a === void 0 ? function () { return new Subject(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
      return function (wrapperSource) {
          var connection = null;
          var resetConnection = null;
          var subject = null;
          var refCount = 0;
          var hasCompleted = false;
          var hasErrored = false;
          var cancelReset = function () {
              resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
              resetConnection = null;
          };
          var reset = function () {
              cancelReset();
              connection = subject = null;
              hasCompleted = hasErrored = false;
          };
          var resetAndUnsubscribe = function () {
              var conn = connection;
              reset();
              conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
          };
          return operate(function (source, subscriber) {
              refCount++;
              if (!hasErrored && !hasCompleted) {
                  cancelReset();
              }
              var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
              subscriber.add(function () {
                  refCount--;
                  if (refCount === 0 && !hasErrored && !hasCompleted) {
                      resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
                  }
              });
              dest.subscribe(subscriber);
              if (!connection) {
                  connection = new SafeSubscriber({
                      next: function (value) { return dest.next(value); },
                      error: function (err) {
                          hasErrored = true;
                          cancelReset();
                          resetConnection = handleReset(reset, resetOnError, err);
                          dest.error(err);
                      },
                      complete: function () {
                          hasCompleted = true;
                          cancelReset();
                          resetConnection = handleReset(reset, resetOnComplete);
                          dest.complete();
                      },
                  });
                  from(source).subscribe(connection);
              }
          })(wrapperSource);
      };
  }
  function handleReset(reset, on) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
      }
      if (on === true) {
          reset();
          return null;
      }
      if (on === false) {
          return null;
      }
      return on.apply(void 0, __spreadArray([], __read(args))).pipe(take(1))
          .subscribe(function () { return reset(); });
  }
  //# sourceMappingURL=share.js.map
  ;// CONCATENATED MODULE: ./node_modules/@angular/core/fesm2020/core.mjs
  /**
   * @license Angular v13.3.6
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   */
  
  
  
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function getClosureSafeProperty(objWithPropertyToExtract) {
      for (let key in objWithPropertyToExtract) {
          if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
              return key;
          }
      }
      throw Error('Could not find renamed property on target object.');
  }
  /**
   * Sets properties on a target object from a source object, but only if
   * the property doesn't already exist on the target object.
   * @param target The target to set properties on
   * @param source The source of the property keys and values to set
   */
  function fillProperties(target, source) {
      for (const key in source) {
          if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
              target[key] = source[key];
          }
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function stringify(token) {
      if (typeof token === 'string') {
          return token;
      }
      if (Array.isArray(token)) {
          return '[' + token.map(stringify).join(', ') + ']';
      }
      if (token == null) {
          return '' + token;
      }
      if (token.overriddenName) {
          return `${token.overriddenName}`;
      }
      if (token.name) {
          return `${token.name}`;
      }
      const res = token.toString();
      if (res == null) {
          return '' + res;
      }
      const newLineIndex = res.indexOf('\n');
      return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  /**
   * Concatenates two strings with separator, allocating new strings only when necessary.
   *
   * @param before before string.
   * @param separator separator string.
   * @param after after string.
   * @returns concatenated string.
   */
  function concatStringsWithSpace(before, after) {
      return (before == null || before === '') ?
          (after === null ? '' : after) :
          ((after == null || after === '') ? before : before + ' ' + after);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });
  /**
   * Allows to refer to references which are not yet defined.
   *
   * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
   * DI is declared, but not yet defined. It is also used when the `token` which we use when creating
   * a query is not yet defined.
   *
   * @usageNotes
   * ### Example
   * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
   * @publicApi
   */
  function forwardRef(forwardRefFn) {
      forwardRefFn.__forward_ref__ = forwardRef;
      forwardRefFn.toString = function () {
          return stringify(this());
      };
      return forwardRefFn;
  }
  /**
   * Lazily retrieves the reference value from a forwardRef.
   *
   * Acts as the identity function when given a non-forward-ref value.
   *
   * @usageNotes
   * ### Example
   *
   * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
   *
   * @see `forwardRef`
   * @publicApi
   */
  function resolveForwardRef(type) {
      return isForwardRef(type) ? type() : type;
  }
  /** Checks whether a function is wrapped by a `forwardRef`. */
  function isForwardRef(fn) {
      return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&
          fn.__forward_ref__ === forwardRef;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Base URL for the error details page.
   *
   * Keep the files below in full sync:
   *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts
   *  - packages/core/src/error_details_base_url.ts
   */
  const ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Class that represents a runtime error.
   * Formats and outputs the error message in a consistent way.
   *
   * Example:
   * ```
   *  throw new RuntimeError(
   *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,
   *    ngDevMode && 'Injector has already been destroyed.');
   * ```
   *
   * Note: the `message` argument contains a descriptive error message as a string in development
   * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the
   * `message` argument becomes `false`, thus we account for it in the typings and the runtime logic.
   */
  class RuntimeError extends Error {
      constructor(code, message) {
          super(formatRuntimeError(code, message));
          this.code = code;
      }
  }
  /**
   * Called to format a runtime error.
   * See additional info on the `message` argument type in the `RuntimeError` class description.
   */
  function formatRuntimeError(code, message) {
      // Error code might be a negative number, which is a special marker that instructs the logic to
      // generate a link to the error details page on angular.io.
      const fullCode = `NG0${Math.abs(code)}`;
      let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;
      if (ngDevMode && code < 0) {
          errorMessage = `${errorMessage}. Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;
      }
      return errorMessage;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Used for stringify render output in Ivy.
   * Important! This function is very performance-sensitive and we should
   * be extra careful not to introduce megamorphic reads in it.
   * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.
   */
  function renderStringify(value) {
      if (typeof value === 'string')
          return value;
      if (value == null)
          return '';
      // Use `String` so that it invokes the `toString` method of the value. Note that this
      // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).
      return String(value);
  }
  /**
   * Used to stringify a value so that it can be displayed in an error message.
   * Important! This function contains a megamorphic read and should only be
   * used for error messages.
   */
  function stringifyForError(value) {
      if (typeof value === 'function')
          return value.name || value.toString();
      if (typeof value === 'object' && value != null && typeof value.type === 'function') {
          return value.type.name || value.type.toString();
      }
      return renderStringify(value);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /** Called when directives inject each other (creating a circular dependency) */
  function throwCyclicDependencyError(token, path) {
      const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';
      throw new RuntimeError(-200 /* CYCLIC_DI_DEPENDENCY */, `Circular dependency in DI detected for ${token}${depPath}`);
  }
  function throwMixedMultiProviderError() {
      throw new Error(`Cannot mix multi providers and regular providers`);
  }
  function throwInvalidProviderError(ngModuleType, providers, provider) {
      let ngModuleDetail = '';
      if (ngModuleType && providers) {
          const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');
          ngModuleDetail =
              ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;
      }
      throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);
  }
  /** Throws an error when a token is not found in DI. */
  function throwProviderNotFoundError(token, injectorName) {
      const injectorDetails = injectorName ? ` in ${injectorName}` : '';
      throw new RuntimeError(-201 /* PROVIDER_NOT_FOUND */, `No provider for ${stringifyForError(token)} found${injectorDetails}`);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function assertNumber(actual, msg) {
      if (!(typeof actual === 'number')) {
          throwError(msg, typeof actual, 'number', '===');
      }
  }
  function assertNumberInRange(actual, minInclusive, maxInclusive) {
      assertNumber(actual, 'Expected a number');
      assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');
      assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');
  }
  function assertString(actual, msg) {
      if (!(typeof actual === 'string')) {
          throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');
      }
  }
  function assertFunction(actual, msg) {
      if (!(typeof actual === 'function')) {
          throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');
      }
  }
  function assertEqual(actual, expected, msg) {
      if (!(actual == expected)) {
          throwError(msg, actual, expected, '==');
      }
  }
  function assertNotEqual(actual, expected, msg) {
      if (!(actual != expected)) {
          throwError(msg, actual, expected, '!=');
      }
  }
  function assertSame(actual, expected, msg) {
      if (!(actual === expected)) {
          throwError(msg, actual, expected, '===');
      }
  }
  function assertNotSame(actual, expected, msg) {
      if (!(actual !== expected)) {
          throwError(msg, actual, expected, '!==');
      }
  }
  function assertLessThan(actual, expected, msg) {
      if (!(actual < expected)) {
          throwError(msg, actual, expected, '<');
      }
  }
  function assertLessThanOrEqual(actual, expected, msg) {
      if (!(actual <= expected)) {
          throwError(msg, actual, expected, '<=');
      }
  }
  function assertGreaterThan(actual, expected, msg) {
      if (!(actual > expected)) {
          throwError(msg, actual, expected, '>');
      }
  }
  function assertGreaterThanOrEqual(actual, expected, msg) {
      if (!(actual >= expected)) {
          throwError(msg, actual, expected, '>=');
      }
  }
  function assertNotDefined(actual, msg) {
      if (actual != null) {
          throwError(msg, actual, null, '==');
      }
  }
  function assertDefined(actual, msg) {
      if (actual == null) {
          throwError(msg, actual, null, '!=');
      }
  }
  function throwError(msg, actual, expected, comparison) {
      throw new Error(`ASSERTION ERROR: ${msg}` +
          (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));
  }
  function assertDomNode(node) {
      // If we're in a worker, `Node` will not be defined.
      if (!(typeof Node !== 'undefined' && node instanceof Node) &&
          !(typeof node === 'object' && node != null &&
              node.constructor.name === 'WebWorkerRenderNode')) {
          throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);
      }
  }
  function assertIndexInRange(arr, index) {
      assertDefined(arr, 'Array must be defined.');
      const maxLen = arr.length;
      if (index < 0 || index >= maxLen) {
          throwError(`Index expected to be less than ${maxLen} but got ${index}`);
      }
  }
  function assertOneOf(value, ...validValues) {
      if (validValues.indexOf(value) !== -1)
          return true;
      throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Construct an injectable definition which defines how a token will be constructed by the DI
   * system, and in which injectors (if any) it will be available.
   *
   * This should be assigned to a static `Éµprov` field on a type, which will then be an
   * `InjectableType`.
   *
   * Options:
   * * `providedIn` determines which injectors will include the injectable, by either associating it
   *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be
   *   provided in the `'root'` injector, which will be the application-level injector in most apps.
   * * `factory` gives the zero argument function which will create an instance of the injectable.
   *   The factory can call `inject` to access the `Injector` and request injection of dependencies.
   *
   * @codeGenApi
   * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.
   */
  function ÉµÉµdefineInjectable(opts) {
      return {
          token: opts.token,
          providedIn: opts.providedIn || null,
          factory: opts.factory,
          value: undefined,
      };
  }
  /**
   * @deprecated in v8, delete after v10. This API should be used only by generated code, and that
   * code should now use ÉµÉµdefineInjectable instead.
   * @publicApi
   */
  const defineInjectable = (/* unused pure expression or super */ null && (ÉµÉµdefineInjectable));
  /**
   * Construct an `InjectorDef` which configures an injector.
   *
   * This should be assigned to a static injector def (`Éµinj`) field on a type, which will then be an
   * `InjectorType`.
   *
   * Options:
   *
   * * `providers`: an optional array of providers to add to the injector. Each provider must
   *   either have a factory or point to a type which has a `Éµprov` static property (the
   *   type must be an `InjectableType`).
   * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s
   *   whose providers will also be added to the injector. Locally provided types will override
   *   providers from imports.
   *
   * @codeGenApi
   */
  function ÉµÉµdefineInjector(options) {
      return { providers: options.providers || [], imports: options.imports || [] };
  }
  /**
   * Read the injectable def (`Éµprov`) for `type` in a way which is immune to accidentally reading
   * inherited value.
   *
   * @param type A type which may have its own (non-inherited) `Éµprov`.
   */
  function getInjectableDef(type) {
      return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);
  }
  /**
   * Return definition only if it is defined directly on `type` and is not inherited from a base
   * class of `type`.
   */
  function getOwnDefinition(type, field) {
      return type.hasOwnProperty(field) ? type[field] : null;
  }
  /**
   * Read the injectable def (`Éµprov`) for `type` or read the `Éµprov` from one of its ancestors.
   *
   * @param type A type which may have `Éµprov`, via inheritance.
   *
   * @deprecated Will be removed in a future version of Angular, where an error will occur in the
   *     scenario if we find the `Éµprov` on an ancestor only.
   */
  function getInheritedInjectableDef(type) {
      const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);
      if (def) {
          const typeName = getTypeName(type);
          // TODO(FW-1307): Re-add ngDevMode when closure can handle it
          // ngDevMode &&
          console.warn(`DEPRECATED: DI is instantiating a token "${typeName}" that inherits its @Injectable decorator but does not provide one itself.\n` +
              `This will become an error in a future version of Angular. Please add @Injectable() to the "${typeName}" class.`);
          return def;
      }
      else {
          return null;
      }
  }
  /** Gets the name of a type, accounting for some cross-browser differences. */
  function getTypeName(type) {
      // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers
      // it'll always return the name of the function itself, no matter how many other functions it
      // inherits from. On IE the function doesn't have its own `name` property, but it takes it from
      // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most
      // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around
      // the issue by converting the function to a string and parsing its name out that way via a regex.
      if (type.hasOwnProperty('name')) {
          return type.name;
      }
      const match = ('' + type).match(/^function\s*([^\s(]+)/);
      return match === null ? '' : match[1];
  }
  /**
   * Read the injector def type in a way which is immune to accidentally reading inherited value.
   *
   * @param type type which may have an injector def (`Éµinj`)
   */
  function getInjectorDef(type) {
      return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?
          type[NG_INJ_DEF] :
          null;
  }
  const NG_PROV_DEF = getClosureSafeProperty({ Éµprov: getClosureSafeProperty });
  const NG_INJ_DEF = getClosureSafeProperty({ Éµinj: getClosureSafeProperty });
  // We need to keep these around so we can read off old defs if new defs are unavailable
  const NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });
  const NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Injection flags for DI.
   *
   * @publicApi
   */
  var InjectFlags;
  (function (InjectFlags) {
      // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer
      // writes exports of it into ngfactory files.
      /** Check self and check parent injector if needed */
      InjectFlags[InjectFlags["Default"] = 0] = "Default";
      /**
       * Specifies that an injector should retrieve a dependency from any injector until reaching the
       * host element of the current component. (Only used with Element Injector)
       */
      InjectFlags[InjectFlags["Host"] = 1] = "Host";
      /** Don't ascend to ancestors of the node requesting injection. */
      InjectFlags[InjectFlags["Self"] = 2] = "Self";
      /** Skip the node that is requesting injection. */
      InjectFlags[InjectFlags["SkipSelf"] = 4] = "SkipSelf";
      /** Inject `defaultValue` instead if token not found. */
      InjectFlags[InjectFlags["Optional"] = 8] = "Optional";
  })(InjectFlags || (InjectFlags = {}));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Current implementation of inject.
   *
   * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed
   * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this
   * way for two reasons:
   *  1. `Injector` should not depend on ivy logic.
   *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.
   */
  let _injectImplementation;
  function getInjectImplementation() {
      return _injectImplementation;
  }
  /**
   * Sets the current inject implementation.
   */
  function setInjectImplementation(impl) {
      const previous = _injectImplementation;
      _injectImplementation = impl;
      return previous;
  }
  /**
   * Injects `root` tokens in limp mode.
   *
   * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to
   * `"root"`. This is known as the limp mode injection. In such case the value is stored in the
   * injectable definition.
   */
  function injectRootLimpMode(token, notFoundValue, flags) {
      const injectableDef = getInjectableDef(token);
      if (injectableDef && injectableDef.providedIn == 'root') {
          return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :
              injectableDef.value;
      }
      if (flags & InjectFlags.Optional)
          return null;
      if (notFoundValue !== undefined)
          return notFoundValue;
      throwProviderNotFoundError(stringify(token), 'Injector');
  }
  /**
   * Assert that `_injectImplementation` is not `fn`.
   *
   * This is useful, to prevent infinite recursion.
   *
   * @param fn Function which it should not equal to
   */
  function assertInjectImplementationNotEqual(fn) {
      ngDevMode &&
          assertNotEqual(_injectImplementation, fn, 'Calling ÉµÉµinject would cause infinite recursion');
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Convince closure compiler that the wrapped function has no side-effects.
   *
   * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to
   * allow us to execute a function but have closure compiler mark the call as no-side-effects.
   * It is important that the return value for the `noSideEffects` function be assigned
   * to something which is retained otherwise the call to `noSideEffects` will be removed by closure
   * compiler.
   */
  function noSideEffects(fn) {
      return { toString: fn }.toString();
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * The strategy that the default change detector uses to detect changes.
   * When set, takes effect the next time change detection is triggered.
   *
   * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
   *
   * @publicApi
   */
  var ChangeDetectionStrategy;
  (function (ChangeDetectionStrategy) {
      /**
       * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated
       * until reactivated by setting the strategy to `Default` (`CheckAlways`).
       * Change detection can still be explicitly invoked.
       * This strategy applies to all child directives and cannot be overridden.
       */
      ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
      /**
       * Use the default `CheckAlways` strategy, in which change detection is automatic until
       * explicitly deactivated.
       */
      ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
  })(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
  /**
   * Defines the possible states of the default change detector.
   * @see `ChangeDetectorRef`
   */
  var ChangeDetectorStatus;
  (function (ChangeDetectorStatus) {
      /**
       * A state in which, after calling `detectChanges()`, the change detector
       * state becomes `Checked`, and must be explicitly invoked or reactivated.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
      /**
       * A state in which change detection is skipped until the change detector mode
       * becomes `CheckOnce`.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
      /**
       * A state in which change detection continues automatically until explicitly
       * deactivated.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
      /**
       * A state in which a change detector sub tree is not a part of the main tree and
       * should be skipped.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
      /**
       * Indicates that the change detector encountered an error checking a binding
       * or calling a directive lifecycle method and is now in an inconsistent state. Change
       * detectors in this state do not detect changes.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
      /**
       * Indicates that the change detector has been destroyed.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
  })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
  /**
   * Reports whether a given strategy is currently the default for change detection.
   * @param changeDetectionStrategy The strategy to check.
   * @returns True if the given strategy is the current default, false otherwise.
   * @see `ChangeDetectorStatus`
   * @see `ChangeDetectorRef`
   */
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
      return changeDetectionStrategy == null ||
          changeDetectionStrategy === ChangeDetectionStrategy.Default;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Defines the CSS styles encapsulation policies for the {@link Component} decorator's
   * `encapsulation` option.
   *
   * See {@link Component#encapsulation encapsulation}.
   *
   * @usageNotes
   * ### Example
   *
   * {@example core/ts/metadata/encapsulation.ts region='longform'}
   *
   * @publicApi
   */
  var ViewEncapsulation$1;
  (function (ViewEncapsulation) {
      // TODO: consider making `ViewEncapsulation` a `const enum` instead. See
      // https://github.com/angular/angular/issues/44119 for additional information.
      /**
       * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the
       * component's host element and applying the same attribute to all the CSS selectors provided
       * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.
       *
       * This is the default option.
       */
      ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
      // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.
      /**
       * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided
       * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable
       * to any HTML element of the application regardless of their host Component.
       */
      ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
      /**
       * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates
       * a ShadowRoot for the component's host element which is then used to encapsulate
       * all the Component's styling.
       */
      ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
  })(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const __globalThis = typeof globalThis !== 'undefined' && globalThis;
  const __window = typeof window !== 'undefined' && window;
  const __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
      self instanceof WorkerGlobalScope && self;
  const __global = typeof global !== 'undefined' && global;
  // Always use __globalThis if available, which is the spec-defined global variable across all
  // environments, then fallback to __global first, because in Node tests both __global and
  // __window may be defined and _global should be __global in that case.
  const _global = __globalThis || __global || __window || __self;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function ngDevModeResetPerfCounters() {
      const locationString = typeof location !== 'undefined' ? location.toString() : '';
      const newCounters = {
          namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,
          firstCreatePass: 0,
          tNode: 0,
          tView: 0,
          rendererCreateTextNode: 0,
          rendererSetText: 0,
          rendererCreateElement: 0,
          rendererAddEventListener: 0,
          rendererSetAttribute: 0,
          rendererRemoveAttribute: 0,
          rendererSetProperty: 0,
          rendererSetClassName: 0,
          rendererAddClass: 0,
          rendererRemoveClass: 0,
          rendererSetStyle: 0,
          rendererRemoveStyle: 0,
          rendererDestroy: 0,
          rendererDestroyNode: 0,
          rendererMoveNode: 0,
          rendererRemoveNode: 0,
          rendererAppendChild: 0,
          rendererInsertBefore: 0,
          rendererCreateComment: 0,
      };
      // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.
      const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;
      _global['ngDevMode'] = allowNgDevModeTrue && newCounters;
      return newCounters;
  }
  /**
   * This function checks to see if the `ngDevMode` has been set. If yes,
   * then we honor it, otherwise we default to dev mode with additional checks.
   *
   * The idea is that unless we are doing production build where we explicitly
   * set `ngDevMode == false` we should be helping the developer by providing
   * as much early warning and errors as possible.
   *
   * `ÉµÉµdefineComponent` is guaranteed to have been called before any component template functions
   * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode
   * is defined for the entire instruction set.
   *
   * When checking `ngDevMode` on toplevel, always init it before referencing it
   * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can
   *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.
   *
   * Details on possible values for `ngDevMode` can be found on its docstring.
   *
   * NOTE:
   * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.
   */
  function initNgDevMode() {
      // The below checks are to ensure that calling `initNgDevMode` multiple times does not
      // reset the counters.
      // If the `ngDevMode` is not an object, then it means we have not created the perf counters
      // yet.
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
          if (typeof ngDevMode !== 'object') {
              ngDevModeResetPerfCounters();
          }
          return typeof ngDevMode !== 'undefined' && !!ngDevMode;
      }
      return false;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * This file contains reuseable "empty" symbols that can be used as default return values
   * in different parts of the rendering code. Because the same symbols are returned, this
   * allows for identity checks against these values to be consistently used by the framework
   * code.
   */
  const EMPTY_OBJ = {};
  const EMPTY_ARRAY = [];
  // freezing the values prevents any code from accidentally inserting new values in
  if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {
      // These property accesses can be ignored because ngDevMode will be set to false
      // when optimizing code and the whole if statement will be dropped.
      // tslint:disable-next-line:no-toplevel-property-access
      Object.freeze(EMPTY_OBJ);
      // tslint:disable-next-line:no-toplevel-property-access
      Object.freeze(EMPTY_ARRAY);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const NG_COMP_DEF = getClosureSafeProperty({ Éµcmp: getClosureSafeProperty });
  const NG_DIR_DEF = getClosureSafeProperty({ Éµdir: getClosureSafeProperty });
  const NG_PIPE_DEF = getClosureSafeProperty({ Éµpipe: getClosureSafeProperty });
  const NG_MOD_DEF = getClosureSafeProperty({ Éµmod: getClosureSafeProperty });
  const NG_FACTORY_DEF = getClosureSafeProperty({ Éµfac: getClosureSafeProperty });
  /**
   * If a directive is diPublic, bloomAdd sets a property on the type with this constant as
   * the key and the directive's unique ID as the value. This allows us to map directives to their
   * bloom filter bit for DI.
   */
  // TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.
  const NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  let _renderCompCount = 0;
  /**
   * Create a component definition object.
   *
   *
   * # Example
   * ```
   * class MyDirective {
   *   // Generated by Angular Template Compiler
   *   // [Symbol] syntax will not be supported by TypeScript until v2.7
   *   static Éµcmp = defineComponent({
   *     ...
   *   });
   * }
   * ```
   * @codeGenApi
   */
  function ÉµÉµdefineComponent(componentDefinition) {
      return noSideEffects(() => {
          // Initialize ngDevMode. This must be the first statement in ÉµÉµdefineComponent.
          // See the `initNgDevMode` docstring for more information.
          (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
          const type = componentDefinition.type;
          const declaredInputs = {};
          const def = {
              type: type,
              providersResolver: null,
              decls: componentDefinition.decls,
              vars: componentDefinition.vars,
              factory: null,
              template: componentDefinition.template || null,
              consts: componentDefinition.consts || null,
              ngContentSelectors: componentDefinition.ngContentSelectors,
              hostBindings: componentDefinition.hostBindings || null,
              hostVars: componentDefinition.hostVars || 0,
              hostAttrs: componentDefinition.hostAttrs || null,
              contentQueries: componentDefinition.contentQueries || null,
              declaredInputs: declaredInputs,
              inputs: null,
              outputs: null,
              exportAs: componentDefinition.exportAs || null,
              onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
              directiveDefs: null,
              pipeDefs: null,
              selectors: componentDefinition.selectors || EMPTY_ARRAY,
              viewQuery: componentDefinition.viewQuery || null,
              features: componentDefinition.features || null,
              data: componentDefinition.data || {},
              encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,
              id: 'c',
              styles: componentDefinition.styles || EMPTY_ARRAY,
              _: null,
              setInput: null,
              schemas: componentDefinition.schemas || null,
              tView: null,
          };
          const directiveTypes = componentDefinition.directives;
          const feature = componentDefinition.features;
          const pipeTypes = componentDefinition.pipes;
          def.id += _renderCompCount++;
          def.inputs = invertObject(componentDefinition.inputs, declaredInputs),
              def.outputs = invertObject(componentDefinition.outputs),
              feature && feature.forEach((fn) => fn(def));
          def.directiveDefs = directiveTypes ?
              () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)
                  .map(extractDirectiveDef) :
              null;
          def.pipeDefs = pipeTypes ?
              () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) :
              null;
          return def;
      });
  }
  /**
   * Generated next to NgModules to monkey-patch directive and pipe references onto a component's
   * definition, when generating a direct reference in the component file would otherwise create an
   * import cycle.
   *
   * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.
   *
   * @codeGenApi
   */
  function ÉµÉµsetComponentScope(type, directives, pipes) {
      const def = type.Éµcmp;
      def.directiveDefs = () => directives.map(extractDirectiveDef);
      def.pipeDefs = () => pipes.map(extractPipeDef);
  }
  function extractDirectiveDef(type) {
      const def = getComponentDef(type) || getDirectiveDef(type);
      if (ngDevMode && !def) {
          throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);
      }
      return def;
  }
  function extractPipeDef(type) {
      const def = getPipeDef$1(type);
      if (ngDevMode && !def) {
          throw new Error(`'${type.name}' is not a 'PipeType'.`);
      }
      return def;
  }
  const autoRegisterModuleById = {};
  /**
   * @codeGenApi
   */
  function ÉµÉµdefineNgModule(def) {
      return noSideEffects(() => {
          const res = {
              type: def.type,
              bootstrap: def.bootstrap || EMPTY_ARRAY,
              declarations: def.declarations || EMPTY_ARRAY,
              imports: def.imports || EMPTY_ARRAY,
              exports: def.exports || EMPTY_ARRAY,
              transitiveCompileScopes: null,
              schemas: def.schemas || null,
              id: def.id || null,
          };
          if (def.id != null) {
              autoRegisterModuleById[def.id] = def.type;
          }
          return res;
      });
  }
  /**
   * Adds the module metadata that is necessary to compute the module's transitive scope to an
   * existing module definition.
   *
   * Scope metadata of modules is not used in production builds, so calls to this function can be
   * marked pure to tree-shake it from the bundle, allowing for all referenced declarations
   * to become eligible for tree-shaking as well.
   *
   * @codeGenApi
   */
  function ÉµÉµsetNgModuleScope(type, scope) {
      return noSideEffects(() => {
          const ngModuleDef = getNgModuleDef(type, true);
          ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;
          ngModuleDef.imports = scope.imports || EMPTY_ARRAY;
          ngModuleDef.exports = scope.exports || EMPTY_ARRAY;
      });
  }
  /**
   * Inverts an inputs or outputs lookup such that the keys, which were the
   * minified keys, are part of the values, and the values are parsed so that
   * the publicName of the property is the new key
   *
   * e.g. for
   *
   * ```
   * class Comp {
   *   @Input()
   *   propName1: string;
   *
   *   @Input('publicName2')
   *   declaredPropName2: number;
   * }
   * ```
   *
   * will be serialized as
   *
   * ```
   * {
   *   propName1: 'propName1',
   *   declaredPropName2: ['publicName2', 'declaredPropName2'],
   * }
   * ```
   *
   * which is than translated by the minifier as:
   *
   * ```
   * {
   *   minifiedPropName1: 'propName1',
   *   minifiedPropName2: ['publicName2', 'declaredPropName2'],
   * }
   * ```
   *
   * becomes: (public name => minifiedName)
   *
   * ```
   * {
   *  'propName1': 'minifiedPropName1',
   *  'publicName2': 'minifiedPropName2',
   * }
   * ```
   *
   * Optionally the function can take `secondary` which will result in: (public name => declared name)
   *
   * ```
   * {
   *  'propName1': 'propName1',
   *  'publicName2': 'declaredPropName2',
   * }
   * ```
   *
  
   */
  function invertObject(obj, secondary) {
      if (obj == null)
          return EMPTY_OBJ;
      const newLookup = {};
      for (const minifiedKey in obj) {
          if (obj.hasOwnProperty(minifiedKey)) {
              let publicName = obj[minifiedKey];
              let declaredName = publicName;
              if (Array.isArray(publicName)) {
                  declaredName = publicName[1];
                  publicName = publicName[0];
              }
              newLookup[publicName] = minifiedKey;
              if (secondary) {
                  (secondary[publicName] = declaredName);
              }
          }
      }
      return newLookup;
  }
  /**
   * Create a directive definition object.
   *
   * # Example
   * ```ts
   * class MyDirective {
   *   // Generated by Angular Template Compiler
   *   // [Symbol] syntax will not be supported by TypeScript until v2.7
   *   static Éµdir = ÉµÉµdefineDirective({
   *     ...
   *   });
   * }
   * ```
   *
   * @codeGenApi
   */
  const ÉµÉµdefineDirective = ÉµÉµdefineComponent;
  /**
   * Create a pipe definition object.
   *
   * # Example
   * ```
   * class MyPipe implements PipeTransform {
   *   // Generated by Angular Template Compiler
   *   static Éµpipe = definePipe({
   *     ...
   *   });
   * }
   * ```
   * @param pipeDef Pipe definition generated by the compiler
   *
   * @codeGenApi
   */
  function ÉµÉµdefinePipe(pipeDef) {
      return {
          type: pipeDef.type,
          name: pipeDef.name,
          factory: null,
          pure: pipeDef.pure !== false,
          onDestroy: pipeDef.type.prototype.ngOnDestroy || null
      };
  }
  /**
   * The following getter methods retrieve the definition from the type. Currently the retrieval
   * honors inheritance, but in the future we may change the rule to require that definitions are
   * explicit. This would require some sort of migration strategy.
   */
  function getComponentDef(type) {
      return type[NG_COMP_DEF] || null;
  }
  function getDirectiveDef(type) {
      return type[NG_DIR_DEF] || null;
  }
  function getPipeDef$1(type) {
      return type[NG_PIPE_DEF] || null;
  }
  function getNgModuleDef(type, throwNotFound) {
      const ngModuleDef = type[NG_MOD_DEF] || null;
      if (!ngModuleDef && throwNotFound === true) {
          throw new Error(`Type ${stringify(type)} does not have 'Éµmod' property.`);
      }
      return ngModuleDef;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // Below are constants for LView indices to help us look up LView members
  // without having to remember the specific indices.
  // Uglify will inline these when minifying so there shouldn't be a cost.
  const HOST = 0;
  const TVIEW = 1;
  const FLAGS = 2;
  const PARENT = 3;
  const NEXT = 4;
  const TRANSPLANTED_VIEWS_TO_REFRESH = 5;
  const T_HOST = 6;
  const CLEANUP = 7;
  const CONTEXT = 8;
  const INJECTOR$1 = 9;
  const RENDERER_FACTORY = 10;
  const RENDERER = 11;
  const SANITIZER = 12;
  const CHILD_HEAD = 13;
  const CHILD_TAIL = 14;
  // FIXME(misko): Investigate if the three declarations aren't all same thing.
  const DECLARATION_VIEW = 15;
  const DECLARATION_COMPONENT_VIEW = 16;
  const DECLARATION_LCONTAINER = 17;
  const PREORDER_HOOK_FLAGS = 18;
  const QUERIES = 19;
  /**
   * Size of LView's header. Necessary to adjust for it when setting slots.
   *
   * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ÉµÉµ*` instructions to translate
   * instruction index into `LView` index. All other indexes should be in the `LView` index space and
   * there should be no need to refer to `HEADER_OFFSET` anywhere else.
   */
  const HEADER_OFFSET = 20;
  /**
   * Converts `TViewType` into human readable text.
   * Make sure this matches with `TViewType`
   */
  const TViewTypeAsString = [
      'Root',
      'Component',
      'Embedded', // 2
  ];
  // Note: This hack is necessary so we don't erroneously get a circular dependency
  // failure based on types.
  const unusedValueExportToPlacateAjd$8 = 1;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Special location which allows easy identification of type. If we have an array which was
   * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is
   * `LContainer`.
   */
  const TYPE = 1;
  /**
   * Below are constants for LContainer indices to help us look up LContainer members
   * without having to remember the specific indices.
   * Uglify will inline these when minifying so there shouldn't be a cost.
   */
  /**
   * Flag to signify that this `LContainer` may have transplanted views which need to be change
   * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.
   *
   * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip
   * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify
   * that the `MOVED_VIEWS` are transplanted and on-push.
   */
  const HAS_TRANSPLANTED_VIEWS = 2;
  // PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5
  // As we already have these constants in LView, we don't need to re-create them.
  // T_HOST is index 6
  // We already have this constants in LView, we don't need to re-create it.
  const NATIVE = 7;
  const VIEW_REFS = 8;
  const MOVED_VIEWS = 9;
  /**
   * Size of LContainer's header. Represents the index after which all views in the
   * container will be inserted. We need to keep a record of current views so we know
   * which views are already in the DOM (and don't need to be re-added) and so we can
   * remove views from the DOM when they are no longer required.
   */
  const CONTAINER_HEADER_OFFSET = 10;
  // Note: This hack is necessary so we don't erroneously get a circular dependency
  // failure based on types.
  const unusedValueExportToPlacateAjd$7 = 1;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * True if `value` is `LView`.
   * @param value wrapped value of `RNode`, `LView`, `LContainer`
   */
  function isLView(value) {
      return Array.isArray(value) && typeof value[TYPE] === 'object';
  }
  /**
   * True if `value` is `LContainer`.
   * @param value wrapped value of `RNode`, `LView`, `LContainer`
   */
  function isLContainer(value) {
      return Array.isArray(value) && value[TYPE] === true;
  }
  function isContentQueryHost(tNode) {
      return (tNode.flags & 8 /* hasContentQuery */) !== 0;
  }
  function isComponentHost(tNode) {
      return (tNode.flags & 2 /* isComponentHost */) === 2 /* isComponentHost */;
  }
  function isDirectiveHost(tNode) {
      return (tNode.flags & 1 /* isDirectiveHost */) === 1 /* isDirectiveHost */;
  }
  function isComponentDef(def) {
      return def.template !== null;
  }
  function isRootView(target) {
      return (target[FLAGS] & 512 /* IsRoot */) !== 0;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // [Assert functions do not constraint type when they are guarded by a truthy
  // expression.](https://github.com/microsoft/TypeScript/issues/37295)
  function assertTNodeForLView(tNode, lView) {
      assertTNodeForTView(tNode, lView[TVIEW]);
  }
  function assertTNodeForTView(tNode, tView) {
      assertTNode(tNode);
      tNode.hasOwnProperty('tView_') &&
          assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');
  }
  function assertTNode(tNode) {
      assertDefined(tNode, 'TNode must be defined');
      if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {
          throwError('Not of type TNode, got: ' + tNode);
      }
  }
  function assertTIcu(tIcu) {
      assertDefined(tIcu, 'Expected TIcu to be defined');
      if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {
          throwError('Object is not of TIcu type.');
      }
  }
  function assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \'Éµcmp\' property.') {
      if (!getComponentDef(actual)) {
          throwError(msg);
      }
  }
  function assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \'Éµmod\' property.') {
      if (!getNgModuleDef(actual)) {
          throwError(msg);
      }
  }
  function assertCurrentTNodeIsParent(isParent) {
      assertEqual(isParent, true, 'currentTNode should be a parent');
  }
  function assertHasParent(tNode) {
      assertDefined(tNode, 'currentTNode should exist!');
      assertDefined(tNode.parent, 'currentTNode should have a parent');
  }
  function assertDataNext(lView, index, arr) {
      if (arr == null)
          arr = lView;
      assertEqual(arr.length, index, `index ${index} expected to be at the end of arr (length ${arr.length})`);
  }
  function assertLContainer(value) {
      assertDefined(value, 'LContainer must be defined');
      assertEqual(isLContainer(value), true, 'Expecting LContainer');
  }
  function assertLViewOrUndefined(value) {
      value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');
  }
  function assertLView(value) {
      assertDefined(value, 'LView must be defined');
      assertEqual(isLView(value), true, 'Expecting LView');
  }
  function assertFirstCreatePass(tView, errMessage) {
      assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');
  }
  function assertFirstUpdatePass(tView, errMessage) {
      assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');
  }
  /**
   * This is a basic sanity check that an object is probably a directive def. DirectiveDef is
   * an interface, so we can't do a direct instanceof check.
   */
  function assertDirectiveDef(obj) {
      if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {
          throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);
      }
  }
  function assertIndexInDeclRange(lView, index) {
      const tView = lView[1];
      assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
  }
  function assertIndexInVarsRange(lView, index) {
      const tView = lView[1];
      assertBetween(tView.bindingStartIndex, tView.expandoStartIndex, index);
  }
  function assertIndexInExpandoRange(lView, index) {
      const tView = lView[1];
      assertBetween(tView.expandoStartIndex, lView.length, index);
  }
  function assertBetween(lower, upper, index) {
      if (!(lower <= index && index < upper)) {
          throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);
      }
  }
  function assertProjectionSlots(lView, errMessage) {
      assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');
      assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage ||
          'Components with projection nodes (<ng-content>) must have projection slots defined.');
  }
  function assertParentView(lView, errMessage) {
      assertDefined(lView, errMessage || 'Component views should always have a parent view (component\'s host view)');
  }
  /**
   * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a
   * NodeInjector data structure.
   *
   * @param lView `LView` which should be checked.
   * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.
   */
  function assertNodeInjector(lView, injectorIndex) {
      assertIndexInExpandoRange(lView, injectorIndex);
      assertIndexInExpandoRange(lView, injectorIndex + 8 /* PARENT */);
      assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');
      assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');
      assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');
      assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');
      assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');
      assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');
      assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');
      assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');
      assertNumber(lView[injectorIndex + 8 /* PARENT */], 'injectorIndex should point to parent injector');
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function getFactoryDef(type, throwNotFound) {
      const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);
      if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
          throw new Error(`Type ${stringify(type)} does not have 'Éµfac' property.`);
      }
      return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Represents a basic change from a previous to a new value for a single
   * property on a directive instance. Passed as a value in a
   * {@link SimpleChanges} object to the `ngOnChanges` hook.
   *
   * @see `OnChanges`
   *
   * @publicApi
   */
  class SimpleChange {
      constructor(previousValue, currentValue, firstChange) {
          this.previousValue = previousValue;
          this.currentValue = currentValue;
          this.firstChange = firstChange;
      }
      /**
       * Check whether the new value is the first value assigned.
       */
      isFirstChange() {
          return this.firstChange;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * The NgOnChangesFeature decorates a component with support for the ngOnChanges
   * lifecycle hook, so it should be included in any component that implements
   * that hook.
   *
   * If the component or directive uses inheritance, the NgOnChangesFeature MUST
   * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise
   * inherited properties will not be propagated to the ngOnChanges lifecycle
   * hook.
   *
   * Example usage:
   *
   * ```
   * static Éµcmp = defineComponent({
   *   ...
   *   inputs: {name: 'publicName'},
   *   features: [NgOnChangesFeature]
   * });
   * ```
   *
   * @codeGenApi
   */
  function ÉµÉµNgOnChangesFeature() {
      return NgOnChangesFeatureImpl;
  }
  function NgOnChangesFeatureImpl(definition) {
      if (definition.type.prototype.ngOnChanges) {
          definition.setInput = ngOnChangesSetInput;
      }
      return rememberChangeHistoryAndInvokeOnChangesHook;
  }
  // This option ensures that the ngOnChanges lifecycle hook will be inherited
  // from superclasses (in InheritDefinitionFeature).
  /** @nocollapse */
  // tslint:disable-next-line:no-toplevel-property-access
  ÉµÉµNgOnChangesFeature.ngInherit = true;
  /**
   * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate
   * `ngOnChanges`.
   *
   * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are
   * found it invokes `ngOnChanges` on the component instance.
   *
   * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,
   *     it is guaranteed to be called with component instance.
   */
  function rememberChangeHistoryAndInvokeOnChangesHook() {
      const simpleChangesStore = getSimpleChangesStore(this);
      const current = simpleChangesStore?.current;
      if (current) {
          const previous = simpleChangesStore.previous;
          if (previous === EMPTY_OBJ) {
              simpleChangesStore.previous = current;
          }
          else {
              // New changes are copied to the previous store, so that we don't lose history for inputs
              // which were not changed this time
              for (let key in current) {
                  previous[key] = current[key];
              }
          }
          simpleChangesStore.current = null;
          this.ngOnChanges(current);
      }
  }
  function ngOnChangesSetInput(instance, value, publicName, privateName) {
      const simpleChangesStore = getSimpleChangesStore(instance) ||
          setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });
      const current = simpleChangesStore.current || (simpleChangesStore.current = {});
      const previous = simpleChangesStore.previous;
      const declaredName = this.declaredInputs[publicName];
      const previousChange = previous[declaredName];
      current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
      instance[privateName] = value;
  }
  const SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';
  function getSimpleChangesStore(instance) {
      return instance[SIMPLE_CHANGES_STORE] || null;
  }
  function setSimpleChangesStore(instance, store) {
      return instance[SIMPLE_CHANGES_STORE] = store;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  let profilerCallback = null;
  /**
   * Sets the callback function which will be invoked before and after performing certain actions at
   * runtime (for example, before and after running change detection).
   *
   * Warning: this function is *INTERNAL* and should not be relied upon in application's code.
   * The contract of the function might be changed in any release and/or the function can be removed
   * completely.
   *
   * @param profiler function provided by the caller or null value to disable profiling.
   */
  const setProfiler = (profiler) => {
      profilerCallback = profiler;
  };
  /**
   * Profiler function which wraps user code executed by the runtime.
   *
   * @param event ProfilerEvent corresponding to the execution context
   * @param instance component instance
   * @param hookOrListener lifecycle hook function or output listener. The value depends on the
   *  execution context
   * @returns
   */
  const profiler = function (event, instance, hookOrListener) {
      if (profilerCallback != null /* both `null` and `undefined` */) {
          profilerCallback(event, instance, hookOrListener);
      }
  };
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const SVG_NAMESPACE = 'svg';
  const SVG_NAMESPACE_URI = 'http://www.w3.org/2000/svg';
  const MATH_ML_NAMESPACE = 'math';
  const MATH_ML_NAMESPACE_URI = 'http://www.w3.org/1998/MathML/';
  function getNamespaceUri(namespace) {
      const name = namespace.toLowerCase();
      return name === SVG_NAMESPACE ? SVG_NAMESPACE_URI :
          (name === MATH_ML_NAMESPACE ? MATH_ML_NAMESPACE_URI : null);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Most of the use of `document` in Angular is from within the DI system so it is possible to simply
   * inject the `DOCUMENT` token and are done.
   *
   * Ivy is special because it does not rely upon the DI and must get hold of the document some other
   * way.
   *
   * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.
   * Wherever ivy needs the global document, it calls `getDocument()` instead.
   *
   * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to
   * tell ivy what the global `document` is.
   *
   * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)
   * by calling `setDocument()` when providing the `DOCUMENT` token.
   */
  let DOCUMENT = undefined;
  /**
   * Tell ivy what the `document` is for this platform.
   *
   * It is only necessary to call this if the current platform is not a browser.
   *
   * @param document The object representing the global `document` in this environment.
   */
  function setDocument(document) {
      DOCUMENT = document;
  }
  /**
   * Access the object that represents the `document` for this platform.
   *
   * Ivy calls this whenever it needs to access the `document` object.
   * For example to create the renderer or to do sanitization.
   */
  function getDocument() {
      if (DOCUMENT !== undefined) {
          return DOCUMENT;
      }
      else if (typeof document !== 'undefined') {
          return document;
      }
      // No "document" can be found. This should only happen if we are running ivy outside Angular and
      // the current platform is not a browser. Since this is not a supported scenario at the moment
      // this should not happen in Angular apps.
      // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a
      // public API. Meanwhile we just return `undefined` and let the application fail.
      return undefined;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // TODO: cleanup once the code is merged in angular/angular
  var RendererStyleFlags3;
  (function (RendererStyleFlags3) {
      RendererStyleFlags3[RendererStyleFlags3["Important"] = 1] = "Important";
      RendererStyleFlags3[RendererStyleFlags3["DashCase"] = 2] = "DashCase";
  })(RendererStyleFlags3 || (RendererStyleFlags3 = {}));
  /** Returns whether the `renderer` is a `ProceduralRenderer3` */
  function isProceduralRenderer(renderer) {
      return !!(renderer.listen);
  }
  const domRendererFactory3 = {
      createRenderer: (hostElement, rendererType) => {
          return getDocument();
      }
  };
  // Note: This hack is necessary so we don't erroneously get a circular dependency
  // failure based on types.
  const unusedValueExportToPlacateAjd$6 = 1;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)
   * in same location in `LView`. This is because we don't want to pre-allocate space for it
   * because the storage is sparse. This file contains utilities for dealing with such data types.
   *
   * How do we know what is stored at a given location in `LView`.
   * - `Array.isArray(value) === false` => `RNode` (The normal storage value)
   * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.
   *   - `typeof value[TYPE] === 'object'` => `LView`
   *      - This happens when we have a component at a given location
   *   - `typeof value[TYPE] === true` => `LContainer`
   *      - This happens when we have `LContainer` binding at a given location.
   *
   *
   * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.
   */
  /**
   * Returns `RNode`.
   * @param value wrapped value of `RNode`, `LView`, `LContainer`
   */
  function unwrapRNode(value) {
      while (Array.isArray(value)) {
          value = value[HOST];
      }
      return value;
  }
  /**
   * Returns `LView` or `null` if not found.
   * @param value wrapped value of `RNode`, `LView`, `LContainer`
   */
  function unwrapLView(value) {
      while (Array.isArray(value)) {
          // This check is same as `isLView()` but we don't call at as we don't want to call
          // `Array.isArray()` twice and give JITer more work for inlining.
          if (typeof value[TYPE] === 'object')
              return value;
          value = value[HOST];
      }
      return null;
  }
  /**
   * Returns `LContainer` or `null` if not found.
   * @param value wrapped value of `RNode`, `LView`, `LContainer`
   */
  function unwrapLContainer(value) {
      while (Array.isArray(value)) {
          // This check is same as `isLContainer()` but we don't call at as we don't want to call
          // `Array.isArray()` twice and give JITer more work for inlining.
          if (value[TYPE] === true)
              return value;
          value = value[HOST];
      }
      return null;
  }
  /**
   * Retrieves an element value from the provided `viewData`, by unwrapping
   * from any containers, component views, or style contexts.
   */
  function getNativeByIndex(index, lView) {
      ngDevMode && assertIndexInRange(lView, index);
      ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');
      return unwrapRNode(lView[index]);
  }
  /**
   * Retrieve an `RNode` for a given `TNode` and `LView`.
   *
   * This function guarantees in dev mode to retrieve a non-null `RNode`.
   *
   * @param tNode
   * @param lView
   */
  function getNativeByTNode(tNode, lView) {
      ngDevMode && assertTNodeForLView(tNode, lView);
      ngDevMode && assertIndexInRange(lView, tNode.index);
      const node = unwrapRNode(lView[tNode.index]);
      ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
      return node;
  }
  /**
   * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.
   *
   * Some `TNode`s don't have associated `RNode`s. For example `Projection`
   *
   * @param tNode
   * @param lView
   */
  function getNativeByTNodeOrNull(tNode, lView) {
      const index = tNode === null ? -1 : tNode.index;
      if (index !== -1) {
          ngDevMode && assertTNodeForLView(tNode, lView);
          const node = unwrapRNode(lView[index]);
          ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
          return node;
      }
      return null;
  }
  // fixme(misko): The return Type should be `TNode|null`
  function getTNode(tView, index) {
      ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');
      ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');
      const tNode = tView.data[index];
      ngDevMode && tNode !== null && assertTNode(tNode);
      return tNode;
  }
  /** Retrieves a value from any `LView` or `TData`. */
  function load(view, index) {
      ngDevMode && assertIndexInRange(view, index);
      return view[index];
  }
  function getComponentLViewByIndex(nodeIndex, hostView) {
      // Could be an LView or an LContainer. If LContainer, unwrap to find LView.
      ngDevMode && assertIndexInRange(hostView, nodeIndex);
      const slotValue = hostView[nodeIndex];
      const lView = isLView(slotValue) ? slotValue : slotValue[HOST];
      return lView;
  }
  /** Checks whether a given view is in creation mode */
  function isCreationMode(view) {
      return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;
  }
  /**
   * Returns a boolean for whether the view is attached to the change detection tree.
   *
   * Note: This determines whether a view should be checked, not whether it's inserted
   * into a container. For that, you'll want `viewAttachedToContainer` below.
   */
  function viewAttachedToChangeDetector(view) {
      return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;
  }
  /** Returns a boolean for whether the view is attached to a container. */
  function viewAttachedToContainer(view) {
      return isLContainer(view[PARENT]);
  }
  function getConstant(consts, index) {
      if (index === null || index === undefined)
          return null;
      ngDevMode && assertIndexInRange(consts, index);
      return consts[index];
  }
  /**
   * Resets the pre-order hook flags of the view.
   * @param lView the LView on which the flags are reset
   */
  function resetPreOrderHookFlags(lView) {
      lView[PREORDER_HOOK_FLAGS] = 0;
  }
  /**
   * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents
   * whose
   *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh
   *  or
   *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh
   */
  function updateTransplantedViewCount(lContainer, amount) {
      lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
      let viewOrContainer = lContainer;
      let parent = lContainer[PARENT];
      while (parent !== null &&
          ((amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1) ||
              (amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0))) {
          parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
          viewOrContainer = parent;
          parent = parent[PARENT];
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const instructionState = {
      lFrame: createLFrame(null),
      bindingsEnabled: true,
      isInCheckNoChangesMode: false,
  };
  /**
   * Returns true if the instruction state stack is empty.
   *
   * Intended to be called from tests only (tree shaken otherwise).
   */
  function specOnlyIsInstructionStateEmpty() {
      return instructionState.lFrame.parent === null;
  }
  function getElementDepthCount() {
      return instructionState.lFrame.elementDepthCount;
  }
  function increaseElementDepthCount() {
      instructionState.lFrame.elementDepthCount++;
  }
  function decreaseElementDepthCount() {
      instructionState.lFrame.elementDepthCount--;
  }
  function getBindingsEnabled() {
      return instructionState.bindingsEnabled;
  }
  /**
   * Enables directive matching on elements.
   *
   *  * Example:
   * ```
   * <my-comp my-directive>
   *   Should match component / directive.
   * </my-comp>
   * <div ngNonBindable>
   *   <!-- ÉµÉµdisableBindings() -->
   *   <my-comp my-directive>
   *     Should not match component / directive because we are in ngNonBindable.
   *   </my-comp>
   *   <!-- ÉµÉµenableBindings() -->
   * </div>
   * ```
   *
   * @codeGenApi
   */
  function ÉµÉµenableBindings() {
      instructionState.bindingsEnabled = true;
  }
  /**
   * Disables directive matching on element.
   *
   *  * Example:
   * ```
   * <my-comp my-directive>
   *   Should match component / directive.
   * </my-comp>
   * <div ngNonBindable>
   *   <!-- ÉµÉµdisableBindings() -->
   *   <my-comp my-directive>
   *     Should not match component / directive because we are in ngNonBindable.
   *   </my-comp>
   *   <!-- ÉµÉµenableBindings() -->
   * </div>
   * ```
   *
   * @codeGenApi
   */
  function ÉµÉµdisableBindings() {
      instructionState.bindingsEnabled = false;
  }
  /**
   * Return the current `LView`.
   */
  function getLView() {
      return instructionState.lFrame.lView;
  }
  /**
   * Return the current `TView`.
   */
  function getTView() {
      return instructionState.lFrame.tView;
  }
  /**
   * Restores `contextViewData` to the given OpaqueViewState instance.
   *
   * Used in conjunction with the getCurrentView() instruction to save a snapshot
   * of the current view and restore it when listeners are invoked. This allows
   * walking the declaration view tree in listeners to get vars from parent views.
   *
   * @param viewToRestore The OpaqueViewState instance to restore.
   * @returns Context of the restored OpaqueViewState instance.
   *
   * @codeGenApi
   */
  function ÉµÉµrestoreView(viewToRestore) {
      instructionState.lFrame.contextLView = viewToRestore;
      return viewToRestore[CONTEXT];
  }
  function getCurrentTNode() {
      let currentTNode = getCurrentTNodePlaceholderOk();
      while (currentTNode !== null && currentTNode.type === 64 /* Placeholder */) {
          currentTNode = currentTNode.parent;
      }
      return currentTNode;
  }
  function getCurrentTNodePlaceholderOk() {
      return instructionState.lFrame.currentTNode;
  }
  function getCurrentParentTNode() {
      const lFrame = instructionState.lFrame;
      const currentTNode = lFrame.currentTNode;
      return lFrame.isParent ? currentTNode : currentTNode.parent;
  }
  function setCurrentTNode(tNode, isParent) {
      ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
      const lFrame = instructionState.lFrame;
      lFrame.currentTNode = tNode;
      lFrame.isParent = isParent;
  }
  function isCurrentTNodeParent() {
      return instructionState.lFrame.isParent;
  }
  function setCurrentTNodeAsNotParent() {
      instructionState.lFrame.isParent = false;
  }
  function setCurrentTNodeAsParent() {
      instructionState.lFrame.isParent = true;
  }
  function getContextLView() {
      return instructionState.lFrame.contextLView;
  }
  function isInCheckNoChangesMode() {
      // TODO(misko): remove this from the LView since it is ngDevMode=true mode only.
      return instructionState.isInCheckNoChangesMode;
  }
  function setIsInCheckNoChangesMode(mode) {
      instructionState.isInCheckNoChangesMode = mode;
  }
  // top level variables should not be exported for performance reasons (PERF_NOTES.md)
  function getBindingRoot() {
      const lFrame = instructionState.lFrame;
      let index = lFrame.bindingRootIndex;
      if (index === -1) {
          index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
      }
      return index;
  }
  function getBindingIndex() {
      return instructionState.lFrame.bindingIndex;
  }
  function setBindingIndex(value) {
      return instructionState.lFrame.bindingIndex = value;
  }
  function nextBindingIndex() {
      return instructionState.lFrame.bindingIndex++;
  }
  function incrementBindingIndex(count) {
      const lFrame = instructionState.lFrame;
      const index = lFrame.bindingIndex;
      lFrame.bindingIndex = lFrame.bindingIndex + count;
      return index;
  }
  function isInI18nBlock() {
      return instructionState.lFrame.inI18n;
  }
  function setInI18nBlock(isInI18nBlock) {
      instructionState.lFrame.inI18n = isInI18nBlock;
  }
  /**
   * Set a new binding root index so that host template functions can execute.
   *
   * Bindings inside the host template are 0 index. But because we don't know ahead of time
   * how many host bindings we have we can't pre-compute them. For this reason they are all
   * 0 index and we just shift the root so that they match next available location in the LView.
   *
   * @param bindingRootIndex Root index for `hostBindings`
   * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive
   *        whose `hostBindings` are being processed.
   */
  function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
      const lFrame = instructionState.lFrame;
      lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
      setCurrentDirectiveIndex(currentDirectiveIndex);
  }
  /**
   * When host binding is executing this points to the directive index.
   * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`
   * `LView[getCurrentDirectiveIndex()]` is directive instance.
   */
  function getCurrentDirectiveIndex() {
      return instructionState.lFrame.currentDirectiveIndex;
  }
  /**
   * Sets an index of a directive whose `hostBindings` are being processed.
   *
   * @param currentDirectiveIndex `TData` index where current directive instance can be found.
   */
  function setCurrentDirectiveIndex(currentDirectiveIndex) {
      instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
  }
  /**
   * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being
   * executed.
   *
   * @param tData Current `TData` where the `DirectiveDef` will be looked up at.
   */
  function getCurrentDirectiveDef(tData) {
      const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
      return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
  }
  function getCurrentQueryIndex() {
      return instructionState.lFrame.currentQueryIndex;
  }
  function setCurrentQueryIndex(value) {
      instructionState.lFrame.currentQueryIndex = value;
  }
  /**
   * Returns a `TNode` of the location where the current `LView` is declared at.
   *
   * @param lView an `LView` that we want to find parent `TNode` for.
   */
  function getDeclarationTNode(lView) {
      const tView = lView[TVIEW];
      // Return the declaration parent for embedded views
      if (tView.type === 2 /* Embedded */) {
          ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
          return tView.declTNode;
      }
      // Components don't have `TView.declTNode` because each instance of component could be
      // inserted in different location, hence `TView.declTNode` is meaningless.
      // Falling back to `T_HOST` in case we cross component boundary.
      if (tView.type === 1 /* Component */) {
          return lView[T_HOST];
      }
      // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.
      return null;
  }
  /**
   * This is a light weight version of the `enterView` which is needed by the DI system.
   *
   * @param lView `LView` location of the DI context.
   * @param tNode `TNode` for DI context
   * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration
   *     tree from `tNode`  until we find parent declared `TElementNode`.
   * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared
   *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated
   *     `NodeInjector` can be found and we should instead use `ModuleInjector`.
   *     - If `true` than this call must be fallowed by `leaveDI`
   *     - If `false` than this call failed and we should NOT call `leaveDI`
   */
  function enterDI(lView, tNode, flags) {
      ngDevMode && assertLViewOrUndefined(lView);
      if (flags & InjectFlags.SkipSelf) {
          ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
          let parentTNode = tNode;
          let parentLView = lView;
          while (true) {
              ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');
              parentTNode = parentTNode.parent;
              if (parentTNode === null && !(flags & InjectFlags.Host)) {
                  parentTNode = getDeclarationTNode(parentLView);
                  if (parentTNode === null)
                      break;
                  // In this case, a parent exists and is definitely an element. So it will definitely
                  // have an existing lView as the declaration view, which is why we can assume it's defined.
                  ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');
                  parentLView = parentLView[DECLARATION_VIEW];
                  // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives
                  // We want to skip those and look only at Elements and ElementContainers to ensure
                  // we're looking at true parent nodes, and not content or other types.
                  if (parentTNode.type & (2 /* Element */ | 8 /* ElementContainer */)) {
                      break;
                  }
              }
              else {
                  break;
              }
          }
          if (parentTNode === null) {
              // If we failed to find a parent TNode this means that we should use module injector.
              return false;
          }
          else {
              tNode = parentTNode;
              lView = parentLView;
          }
      }
      ngDevMode && assertTNodeForLView(tNode, lView);
      const lFrame = instructionState.lFrame = allocLFrame();
      lFrame.currentTNode = tNode;
      lFrame.lView = lView;
      return true;
  }
  /**
   * Swap the current lView with a new lView.
   *
   * For performance reasons we store the lView in the top level of the module.
   * This way we minimize the number of properties to read. Whenever a new view
   * is entered we have to store the lView for later, and when the view is
   * exited the state has to be restored
   *
   * @param newView New lView to become active
   * @returns the previously active lView;
   */
  function enterView(newView) {
      ngDevMode && assertNotEqual(newView[0], newView[1], '????');
      ngDevMode && assertLViewOrUndefined(newView);
      const newLFrame = allocLFrame();
      if (ngDevMode) {
          assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');
          assertEqual(newLFrame.lView, null, 'Expected clean LFrame');
          assertEqual(newLFrame.tView, null, 'Expected clean LFrame');
          assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');
          assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');
          assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');
          assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');
          assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');
          assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');
      }
      const tView = newView[TVIEW];
      instructionState.lFrame = newLFrame;
      ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
      newLFrame.currentTNode = tView.firstChild;
      newLFrame.lView = newView;
      newLFrame.tView = tView;
      newLFrame.contextLView = newView;
      newLFrame.bindingIndex = tView.bindingStartIndex;
      newLFrame.inI18n = false;
  }
  /**
   * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.
   */
  function allocLFrame() {
      const currentLFrame = instructionState.lFrame;
      const childLFrame = currentLFrame === null ? null : currentLFrame.child;
      const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
      return newLFrame;
  }
  function createLFrame(parent) {
      const lFrame = {
          currentTNode: null,
          isParent: true,
          lView: null,
          tView: null,
          selectedIndex: -1,
          contextLView: null,
          elementDepthCount: 0,
          currentNamespace: null,
          currentDirectiveIndex: -1,
          bindingRootIndex: -1,
          bindingIndex: -1,
          currentQueryIndex: 0,
          parent: parent,
          child: null,
          inI18n: false,
      };
      parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.
      return lFrame;
  }
  /**
   * A lightweight version of leave which is used with DI.
   *
   * This function only resets `currentTNode` and `LView` as those are the only properties
   * used with DI (`enterDI()`).
   *
   * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where
   * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.
   */
  function leaveViewLight() {
      const oldLFrame = instructionState.lFrame;
      instructionState.lFrame = oldLFrame.parent;
      oldLFrame.currentTNode = null;
      oldLFrame.lView = null;
      return oldLFrame;
  }
  /**
   * This is a lightweight version of the `leaveView` which is needed by the DI system.
   *
   * NOTE: this function is an alias so that we can change the type of the function to have `void`
   * return type.
   */
  const leaveDI = leaveViewLight;
  /**
   * Leave the current `LView`
   *
   * This pops the `LFrame` with the associated `LView` from the stack.
   *
   * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is
   * because for performance reasons we don't release `LFrame` but rather keep it for next use.
   */
  function leaveView() {
      const oldLFrame = leaveViewLight();
      oldLFrame.isParent = true;
      oldLFrame.tView = null;
      oldLFrame.selectedIndex = -1;
      oldLFrame.contextLView = null;
      oldLFrame.elementDepthCount = 0;
      oldLFrame.currentDirectiveIndex = -1;
      oldLFrame.currentNamespace = null;
      oldLFrame.bindingRootIndex = -1;
      oldLFrame.bindingIndex = -1;
      oldLFrame.currentQueryIndex = 0;
  }
  function nextContextImpl(level) {
      const contextLView = instructionState.lFrame.contextLView =
          walkUpViews(level, instructionState.lFrame.contextLView);
      return contextLView[CONTEXT];
  }
  function walkUpViews(nestingLevel, currentView) {
      while (nestingLevel > 0) {
          ngDevMode &&
              assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');
          currentView = currentView[DECLARATION_VIEW];
          nestingLevel--;
      }
      return currentView;
  }
  /**
   * Gets the currently selected element index.
   *
   * Used with {@link property} instruction (and more in the future) to identify the index in the
   * current `LView` to act on.
   */
  function getSelectedIndex() {
      return instructionState.lFrame.selectedIndex;
  }
  /**
   * Sets the most recent index passed to {@link select}
   *
   * Used with {@link property} instruction (and more in the future) to identify the index in the
   * current `LView` to act on.
   *
   * (Note that if an "exit function" was set earlier (via `setElementExitFn()`) then that will be
   * run if and when the provided `index` value is different from the current selected index value.)
   */
  function setSelectedIndex(index) {
      ngDevMode && index !== -1 &&
          assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');
      ngDevMode &&
          assertLessThan(index, instructionState.lFrame.lView.length, 'Can\'t set index passed end of LView');
      instructionState.lFrame.selectedIndex = index;
  }
  /**
   * Gets the `tNode` that represents currently selected element.
   */
  function getSelectedTNode() {
      const lFrame = instructionState.lFrame;
      return getTNode(lFrame.tView, lFrame.selectedIndex);
  }
  /**
   * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.
   *
   * @codeGenApi
   */
  function ÉµÉµnamespaceSVG() {
      instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
  }
  /**
   * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.
   *
   * @codeGenApi
   */
  function ÉµÉµnamespaceMathML() {
      instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
  }
  /**
   * Sets the namespace used to create elements to `null`, which forces element creation to use
   * `createElement` rather than `createElementNS`.
   *
   * @codeGenApi
   */
  function ÉµÉµnamespaceHTML() {
      namespaceHTMLInternal();
  }
  /**
   * Sets the namespace used to create elements to `null`, which forces element creation to use
   * `createElement` rather than `createElementNS`.
   */
  function namespaceHTMLInternal() {
      instructionState.lFrame.currentNamespace = null;
  }
  function getNamespace$1() {
      return instructionState.lFrame.currentNamespace;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.
   *
   * Must be run *only* on the first template pass.
   *
   * Sets up the pre-order hooks on the provided `tView`,
   * see {@link HookData} for details about the data structure.
   *
   * @param directiveIndex The index of the directive in LView
   * @param directiveDef The definition containing the hooks to setup in tView
   * @param tView The current TView
   */
  function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
      ngDevMode && assertFirstCreatePass(tView);
      const { ngOnChanges, ngOnInit, ngDoCheck } = directiveDef.type.prototype;
      if (ngOnChanges) {
          const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);
          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = []))
              .push(directiveIndex, wrappedOnChanges);
      }
      if (ngOnInit) {
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);
      }
      if (ngDoCheck) {
          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);
          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);
      }
  }
  /**
   *
   * Loops through the directives on the provided `tNode` and queues hooks to be
   * run that are not initialization hooks.
   *
   * Should be executed during `elementEnd()` and similar to
   * preserve hook execution order. Content, view, and destroy hooks for projected
   * components and directives must be called *before* their hosts.
   *
   * Sets up the content, view, and destroy hooks on the provided `tView`,
   * see {@link HookData} for details about the data structure.
   *
   * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up
   * separately at `elementStart`.
   *
   * @param tView The current TView
   * @param tNode The TNode whose directives are to be searched for hooks to queue
   */
  function registerPostOrderHooks(tView, tNode) {
      ngDevMode && assertFirstCreatePass(tView);
      // It's necessary to loop through the directives at elementEnd() (rather than processing in
      // directiveCreate) so we can preserve the current hook order. Content, view, and destroy
      // hooks for projected components and directives must be called *before* their hosts.
      for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
          const directiveDef = tView.data[i];
          ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');
          const lifecycleHooks = directiveDef.type.prototype;
          const { ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy } = lifecycleHooks;
          if (ngAfterContentInit) {
              (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);
          }
          if (ngAfterContentChecked) {
              (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);
              (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);
          }
          if (ngAfterViewInit) {
              (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);
          }
          if (ngAfterViewChecked) {
              (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);
              (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);
          }
          if (ngOnDestroy != null) {
              (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);
          }
      }
  }
  /**
   * Executing hooks requires complex logic as we need to deal with 2 constraints.
   *
   * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only
   * once, across many change detection cycles. This must be true even if some hooks throw, or if
   * some recursively trigger a change detection cycle.
   * To solve that, it is required to track the state of the execution of these init hooks.
   * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},
   * and the index within that phase. They can be seen as a cursor in the following structure:
   * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]
   * They are are stored as flags in LView[FLAGS].
   *
   * 2. Pre-order hooks can be executed in batches, because of the select instruction.
   * To be able to pause and resume their execution, we also need some state about the hook's array
   * that is being processed:
   * - the index of the next hook to be executed
   * - the number of init hooks already found in the processed part of the  array
   * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].
   */
  /**
   * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were
   * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read
   * / write of the init-hooks related flags.
   * @param lView The LView where hooks are defined
   * @param hooks Hooks to be run
   * @param nodeIndex 3 cases depending on the value:
   * - undefined: all hooks from the array should be executed (post-order case)
   * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
   * flushing the remaining hooks)
   * - number: execute hooks only from the saved index until that node index exclusive (pre-order
   * case, when executing select(number))
   */
  function executeCheckHooks(lView, hooks, nodeIndex) {
      callHooks(lView, hooks, 3 /* InitPhaseCompleted */, nodeIndex);
  }
  /**
   * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,
   * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.
   * @param lView The LView where hooks are defined
   * @param hooks Hooks to be run
   * @param initPhase A phase for which hooks should be run
   * @param nodeIndex 3 cases depending on the value:
   * - undefined: all hooks from the array should be executed (post-order case)
   * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
   * flushing the remaining hooks)
   * - number: execute hooks only from the saved index until that node index exclusive (pre-order
   * case, when executing select(number))
   */
  function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
      ngDevMode &&
          assertNotEqual(initPhase, 3 /* InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');
      if ((lView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {
          callHooks(lView, hooks, initPhase, nodeIndex);
      }
  }
  function incrementInitPhaseFlags(lView, initPhase) {
      ngDevMode &&
          assertNotEqual(initPhase, 3 /* InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');
      let flags = lView[FLAGS];
      if ((flags & 3 /* InitPhaseStateMask */) === initPhase) {
          flags &= 2047 /* IndexWithinInitPhaseReset */;
          flags += 1 /* InitPhaseStateIncrementer */;
          lView[FLAGS] = flags;
      }
  }
  /**
   * Calls lifecycle hooks with their contexts, skipping init hooks if it's not
   * the first LView pass
   *
   * @param currentView The current view
   * @param arr The array in which the hooks are found
   * @param initPhaseState the current state of the init phase
   * @param currentNodeIndex 3 cases depending on the value:
   * - undefined: all hooks from the array should be executed (post-order case)
   * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
   * flushing the remaining hooks)
   * - number: execute hooks only from the saved index until that node index exclusive (pre-order
   * case, when executing select(number))
   */
  function callHooks(currentView, arr, initPhase, currentNodeIndex) {
      ngDevMode &&
          assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');
      const startIndex = currentNodeIndex !== undefined ?
          (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :
          0;
      const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
      const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1
      let lastNodeIndexFound = 0;
      for (let i = startIndex; i < max; i++) {
          const hook = arr[i + 1];
          if (typeof hook === 'number') {
              lastNodeIndexFound = arr[i];
              if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
                  break;
              }
          }
          else {
              const isInitHook = arr[i] < 0;
              if (isInitHook)
                  currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;
              if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
                  callHook(currentView, initPhase, arr, i);
                  currentView[PREORDER_HOOK_FLAGS] =
                      (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +
                          2;
              }
              i++;
          }
      }
  }
  /**
   * Execute one hook against the current `LView`.
   *
   * @param currentView The current view
   * @param initPhaseState the current state of the init phase
   * @param arr The array in which the hooks are found
   * @param i The current index within the hook data array
   */
  function callHook(currentView, initPhase, arr, i) {
      const isInitHook = arr[i] < 0;
      const hook = arr[i + 1];
      const directiveIndex = isInitHook ? -arr[i] : arr[i];
      const directive = currentView[directiveIndex];
      if (isInitHook) {
          const indexWithintInitPhase = currentView[FLAGS] >> 11 /* IndexWithinInitPhaseShift */;
          // The init phase state must be always checked here as it may have been recursively updated.
          if (indexWithintInitPhase <
              (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&
              (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {
              currentView[FLAGS] += 2048 /* IndexWithinInitPhaseIncrementer */;
              profiler(4 /* LifecycleHookStart */, directive, hook);
              try {
                  hook.call(directive);
              }
              finally {
                  profiler(5 /* LifecycleHookEnd */, directive, hook);
              }
          }
      }
      else {
          profiler(4 /* LifecycleHookStart */, directive, hook);
          try {
              hook.call(directive);
          }
          finally {
              profiler(5 /* LifecycleHookEnd */, directive, hook);
          }
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const NO_PARENT_INJECTOR = -1;
  /**
   * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in
   * `TView.data`. This allows us to store information about the current node's tokens (which
   * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be
   * shared, so they live in `LView`).
   *
   * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter
   * determines whether a directive is available on the associated node or not. This prevents us
   * from searching the directives array at this level unless it's probable the directive is in it.
   *
   * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.
   *
   * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed
   * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`
   * will differ based on where it is flattened into the main array, so it's not possible to know
   * the indices ahead of time and save their types here. The interfaces are still included here
   * for documentation purposes.
   *
   * export interface LInjector extends Array<any> {
   *
   *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
   *    [0]: number;
   *
   *    // Cumulative bloom for directive IDs 32-63
   *    [1]: number;
   *
   *    // Cumulative bloom for directive IDs 64-95
   *    [2]: number;
   *
   *    // Cumulative bloom for directive IDs 96-127
   *    [3]: number;
   *
   *    // Cumulative bloom for directive IDs 128-159
   *    [4]: number;
   *
   *    // Cumulative bloom for directive IDs 160 - 191
   *    [5]: number;
   *
   *    // Cumulative bloom for directive IDs 192 - 223
   *    [6]: number;
   *
   *    // Cumulative bloom for directive IDs 224 - 255
   *    [7]: number;
   *
   *    // We need to store a reference to the injector's parent so DI can keep looking up
   *    // the injector tree until it finds the dependency it's looking for.
   *    [PARENT_INJECTOR]: number;
   * }
   *
   * export interface TInjector extends Array<any> {
   *
   *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
   *    [0]: number;
   *
   *    // Shared node bloom for directive IDs 32-63
   *    [1]: number;
   *
   *    // Shared node bloom for directive IDs 64-95
   *    [2]: number;
   *
   *    // Shared node bloom for directive IDs 96-127
   *    [3]: number;
   *
   *    // Shared node bloom for directive IDs 128-159
   *    [4]: number;
   *
   *    // Shared node bloom for directive IDs 160 - 191
   *    [5]: number;
   *
   *    // Shared node bloom for directive IDs 192 - 223
   *    [6]: number;
   *
   *    // Shared node bloom for directive IDs 224 - 255
   *    [7]: number;
   *
   *    // Necessary to find directive indices for a particular node.
   *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;
   *  }
   */
  /**
   * Factory for creating instances of injectors in the NodeInjector.
   *
   * This factory is complicated by the fact that it can resolve `multi` factories as well.
   *
   * NOTE: Some of the fields are optional which means that this class has two hidden classes.
   * - One without `multi` support (most common)
   * - One with `multi` values, (rare).
   *
   * Since VMs can cache up to 4 inline hidden classes this is OK.
   *
   * - Single factory: Only `resolving` and `factory` is defined.
   * - `providers` factory: `componentProviders` is a number and `index = -1`.
   * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.
   */
  class NodeInjectorFactory {
      constructor(
      /**
       * Factory to invoke in order to create a new instance.
       */
      factory, 
      /**
       * Set to `true` if the token is declared in `viewProviders` (or if it is component).
       */
      isViewProvider, injectImplementation) {
          this.factory = factory;
          /**
           * Marker set to true during factory invocation to see if we get into recursive loop.
           * Recursive loop causes an error to be displayed.
           */
          this.resolving = false;
          ngDevMode && assertDefined(factory, 'Factory not specified');
          ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');
          this.canSeeViewProviders = isViewProvider;
          this.injectImpl = injectImplementation;
      }
  }
  function isFactory(obj) {
      return obj instanceof NodeInjectorFactory;
  }
  // Note: This hack is necessary so we don't erroneously get a circular dependency
  // failure based on types.
  const unusedValueExportToPlacateAjd$5 = 1;
  
  /**
   * Converts `TNodeType` into human readable text.
   * Make sure this matches with `TNodeType`
   */
  function toTNodeTypeAsString(tNodeType) {
      let text = '';
      (tNodeType & 1 /* Text */) && (text += '|Text');
      (tNodeType & 2 /* Element */) && (text += '|Element');
      (tNodeType & 4 /* Container */) && (text += '|Container');
      (tNodeType & 8 /* ElementContainer */) && (text += '|ElementContainer');
      (tNodeType & 16 /* Projection */) && (text += '|Projection');
      (tNodeType & 32 /* Icu */) && (text += '|IcuContainer');
      (tNodeType & 64 /* Placeholder */) && (text += '|Placeholder');
      return text.length > 0 ? text.substring(1) : text;
  }
  // Note: This hack is necessary so we don't erroneously get a circular dependency
  // failure based on types.
  const unusedValueExportToPlacateAjd$4 = 1;
  /**
   * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.
   *
   * ```
   * <div my-dir [class]="exp"></div>
   * ```
   * and
   * ```
   * @Directive({
   * })
   * class MyDirective {
   *   @Input()
   *   class: string;
   * }
   * ```
   *
   * In the above case it is necessary to write the reconciled styling information into the
   * directive's input.
   *
   * @param tNode
   */
  function hasClassInput(tNode) {
      return (tNode.flags & 16 /* hasClassInput */) !== 0;
  }
  /**
   * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.
   *
   * ```
   * <div my-dir [style]="exp"></div>
   * ```
   * and
   * ```
   * @Directive({
   * })
   * class MyDirective {
   *   @Input()
   *   class: string;
   * }
   * ```
   *
   * In the above case it is necessary to write the reconciled styling information into the
   * directive's input.
   *
   * @param tNode
   */
  function hasStyleInput(tNode) {
      return (tNode.flags & 32 /* hasStyleInput */) !== 0;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function assertTNodeType(tNode, expectedTypes, message) {
      assertDefined(tNode, 'should be called with a TNode');
      if ((tNode.type & expectedTypes) === 0) {
          throwError(message ||
              `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);
      }
  }
  function assertPureTNodeType(type) {
      if (!(type === 2 /* Element */ || //
          type === 1 /* Text */ || //
          type === 4 /* Container */ || //
          type === 8 /* ElementContainer */ || //
          type === 32 /* Icu */ || //
          type === 16 /* Projection */ || //
          type === 64 /* Placeholder */)) {
          throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);
      }
  }
  
  /**
   * Assigns all attribute values to the provided element via the inferred renderer.
   *
   * This function accepts two forms of attribute entries:
   *
   * default: (key, value):
   *  attrs = [key1, value1, key2, value2]
   *
   * namespaced: (NAMESPACE_MARKER, uri, name, value)
   *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]
   *
   * The `attrs` array can contain a mix of both the default and namespaced entries.
   * The "default" values are set without a marker, but if the function comes across
   * a marker value then it will attempt to set a namespaced value. If the marker is
   * not of a namespaced value then the function will quit and return the index value
   * where it stopped during the iteration of the attrs array.
   *
   * See [AttributeMarker] to understand what the namespace marker value is.
   *
   * Note that this instruction does not support assigning style and class values to
   * an element. See `elementStart` and `elementHostAttrs` to learn how styling values
   * are applied to an element.
   * @param renderer The renderer to be used
   * @param native The element that the attributes will be assigned to
   * @param attrs The attribute array of values that will be assigned to the element
   * @returns the index value that was last accessed in the attributes array
   */
  function setUpAttributes(renderer, native, attrs) {
      const isProc = isProceduralRenderer(renderer);
      let i = 0;
      while (i < attrs.length) {
          const value = attrs[i];
          if (typeof value === 'number') {
              // only namespaces are supported. Other value types (such as style/class
              // entries) are not supported in this function.
              if (value !== 0 /* NamespaceURI */) {
                  break;
              }
              // we just landed on the marker value ... therefore
              // we should skip to the next entry
              i++;
              const namespaceURI = attrs[i++];
              const attrName = attrs[i++];
              const attrVal = attrs[i++];
              ngDevMode && ngDevMode.rendererSetAttribute++;
              isProc ?
                  renderer.setAttribute(native, attrName, attrVal, namespaceURI) :
                  native.setAttributeNS(namespaceURI, attrName, attrVal);
          }
          else {
              // attrName is string;
              const attrName = value;
              const attrVal = attrs[++i];
              // Standard attributes
              ngDevMode && ngDevMode.rendererSetAttribute++;
              if (isAnimationProp(attrName)) {
                  if (isProc) {
                      renderer.setProperty(native, attrName, attrVal);
                  }
              }
              else {
                  isProc ?
                      renderer.setAttribute(native, attrName, attrVal) :
                      native.setAttribute(attrName, attrVal);
              }
              i++;
          }
      }
      // another piece of code may iterate over the same attributes array. Therefore
      // it may be helpful to return the exact spot where the attributes array exited
      // whether by running into an unsupported marker or if all the static values were
      // iterated over.
      return i;
  }
  /**
   * Test whether the given value is a marker that indicates that the following
   * attribute values in a `TAttributes` array are only the names of attributes,
   * and not name-value pairs.
   * @param marker The attribute marker to test.
   * @returns true if the marker is a "name-only" marker (e.g. `Bindings`, `Template` or `I18n`).
   */
  function isNameOnlyAttributeMarker(marker) {
      return marker === 3 /* Bindings */ || marker === 4 /* Template */ ||
          marker === 6 /* I18n */;
  }
  function isAnimationProp(name) {
      // Perf note: accessing charCodeAt to check for the first character of a string is faster as
      // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that
      // charCodeAt doesn't allocate memory to return a substring.
      return name.charCodeAt(0) === 64 /* AT_SIGN */;
  }
  /**
   * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.
   *
   * This merge function keeps the order of attrs same.
   *
   * @param dst Location of where the merged `TAttributes` should end up.
   * @param src `TAttributes` which should be appended to `dst`
   */
  function mergeHostAttrs(dst, src) {
      if (src === null || src.length === 0) {
          // do nothing
      }
      else if (dst === null || dst.length === 0) {
          // We have source, but dst is empty, just make a copy.
          dst = src.slice();
      }
      else {
          let srcMarker = -1 /* ImplicitAttributes */;
          for (let i = 0; i < src.length; i++) {
              const item = src[i];
              if (typeof item === 'number') {
                  srcMarker = item;
              }
              else {
                  if (srcMarker === 0 /* NamespaceURI */) {
                      // Case where we need to consume `key1`, `key2`, `value` items.
                  }
                  else if (srcMarker === -1 /* ImplicitAttributes */ ||
                      srcMarker === 2 /* Styles */) {
                      // Case where we have to consume `key1` and `value` only.
                      mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
                  }
                  else {
                      // Case where we have to consume `key1` only.
                      mergeHostAttribute(dst, srcMarker, item, null, null);
                  }
              }
          }
      }
      return dst;
  }
  /**
   * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.
   *
   * @param dst `TAttributes` to append to.
   * @param marker Region where the `key`/`value` should be added.
   * @param key1 Key to add to `TAttributes`
   * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)
   * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.
   */
  function mergeHostAttribute(dst, marker, key1, key2, value) {
      let i = 0;
      // Assume that new markers will be inserted at the end.
      let markerInsertPosition = dst.length;
      // scan until correct type.
      if (marker === -1 /* ImplicitAttributes */) {
          markerInsertPosition = -1;
      }
      else {
          while (i < dst.length) {
              const dstValue = dst[i++];
              if (typeof dstValue === 'number') {
                  if (dstValue === marker) {
                      markerInsertPosition = -1;
                      break;
                  }
                  else if (dstValue > marker) {
                      // We need to save this as we want the markers to be inserted in specific order.
                      markerInsertPosition = i - 1;
                      break;
                  }
              }
          }
      }
      // search until you find place of insertion
      while (i < dst.length) {
          const item = dst[i];
          if (typeof item === 'number') {
              // since `i` started as the index after the marker, we did not find it if we are at the next
              // marker
              break;
          }
          else if (item === key1) {
              // We already have same token
              if (key2 === null) {
                  if (value !== null) {
                      dst[i + 1] = value;
                  }
                  return;
              }
              else if (key2 === dst[i + 1]) {
                  dst[i + 2] = value;
                  return;
              }
          }
          // Increment counter.
          i++;
          if (key2 !== null)
              i++;
          if (value !== null)
              i++;
      }
      // insert at location.
      if (markerInsertPosition !== -1) {
          dst.splice(markerInsertPosition, 0, marker);
          i = markerInsertPosition + 1;
      }
      dst.splice(i++, 0, key1);
      if (key2 !== null) {
          dst.splice(i++, 0, key2);
      }
      if (value !== null) {
          dst.splice(i++, 0, value);
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /// Parent Injector Utils ///////////////////////////////////////////////////////////////
  function hasParentInjector(parentLocation) {
      return parentLocation !== NO_PARENT_INJECTOR;
  }
  function getParentInjectorIndex(parentLocation) {
      ngDevMode && assertNumber(parentLocation, 'Number expected');
      ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');
      const parentInjectorIndex = parentLocation & 32767 /* InjectorIndexMask */;
      ngDevMode &&
          assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');
      return parentLocation & 32767 /* InjectorIndexMask */;
  }
  function getParentInjectorViewOffset(parentLocation) {
      return parentLocation >> 16 /* ViewOffsetShift */;
  }
  /**
   * Unwraps a parent injector location number to find the view offset from the current injector,
   * then walks up the declaration view tree until the view is found that contains the parent
   * injector.
   *
   * @param location The location of the parent injector, which contains the view offset
   * @param startView The LView instance from which to start walking up the view tree
   * @returns The LView instance that contains the parent injector
   */
  function getParentInjectorView(location, startView) {
      let viewOffset = getParentInjectorViewOffset(location);
      let parentView = startView;
      // For most cases, the parent injector can be found on the host node (e.g. for component
      // or container), but we must keep the loop here to support the rarer case of deeply nested
      // <ng-template> tags or inline views, where the parent injector might live many views
      // above the child injector.
      while (viewOffset > 0) {
          parentView = parentView[DECLARATION_VIEW];
          viewOffset--;
      }
      return parentView;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Defines if the call to `inject` should include `viewProviders` in its resolution.
   *
   * This is set to true when we try to instantiate a component. This value is reset in
   * `getNodeInjectable` to a value which matches the declaration location of the token about to be
   * instantiated. This is done so that if we are injecting a token which was declared outside of
   * `viewProviders` we don't accidentally pull `viewProviders` in.
   *
   * Example:
   *
   * ```
   * @Injectable()
   * class MyService {
   *   constructor(public value: String) {}
   * }
   *
   * @Component({
   *   providers: [
   *     MyService,
   *     {provide: String, value: 'providers' }
   *   ]
   *   viewProviders: [
   *     {provide: String, value: 'viewProviders'}
   *   ]
   * })
   * class MyComponent {
   *   constructor(myService: MyService, value: String) {
   *     // We expect that Component can see into `viewProviders`.
   *     expect(value).toEqual('viewProviders');
   *     // `MyService` was not declared in `viewProviders` hence it can't see it.
   *     expect(myService.value).toEqual('providers');
   *   }
   * }
   *
   * ```
   */
  let includeViewProviders = true;
  function setIncludeViewProviders(v) {
      const oldValue = includeViewProviders;
      includeViewProviders = v;
      return oldValue;
  }
  /**
   * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
   * directives that will share slots, and thus, the fewer false positives when checking for
   * the existence of a directive.
   */
  const BLOOM_SIZE = 256;
  const BLOOM_MASK = BLOOM_SIZE - 1;
  /**
   * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,
   * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash
   * number.
   */
  const BLOOM_BUCKET_BITS = 5;
  /** Counter used to generate unique IDs for directives. */
  let nextNgElementId = 0;
  /**
   * Registers this directive as present in its node's injector by flipping the directive's
   * corresponding bit in the injector's bloom filter.
   *
   * @param injectorIndex The index of the node injector where this token should be registered
   * @param tView The TView for the injector's bloom filters
   * @param type The directive token to register
   */
  function bloomAdd(injectorIndex, tView, type) {
      ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');
      let id;
      if (typeof type === 'string') {
          id = type.charCodeAt(0) || 0;
      }
      else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
          id = type[NG_ELEMENT_ID];
      }
      // Set a unique ID on the directive type, so if something tries to inject the directive,
      // we can easily retrieve the ID and hash it into the bloom bit that should be checked.
      if (id == null) {
          id = type[NG_ELEMENT_ID] = nextNgElementId++;
      }
      // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
      // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.
      const bloomHash = id & BLOOM_MASK;
      // Create a mask that targets the specific bit associated with the directive.
      // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
      // to bit positions 0 - 31 in a 32 bit integer.
      const mask = 1 << bloomHash;
      // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.
      // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask
      // should be written to.
      tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
  }
  /**
   * Creates (or gets an existing) injector for a given element or container.
   *
   * @param tNode for which an injector should be retrieved / created.
   * @param lView View where the node is stored
   * @returns Node injector
   */
  function getOrCreateNodeInjectorForNode(tNode, lView) {
      const existingInjectorIndex = getInjectorIndex(tNode, lView);
      if (existingInjectorIndex !== -1) {
          return existingInjectorIndex;
      }
      const tView = lView[TVIEW];
      if (tView.firstCreatePass) {
          tNode.injectorIndex = lView.length;
          insertBloom(tView.data, tNode); // foundation for node bloom
          insertBloom(lView, null); // foundation for cumulative bloom
          insertBloom(tView.blueprint, null);
      }
      const parentLoc = getParentInjectorLocation(tNode, lView);
      const injectorIndex = tNode.injectorIndex;
      // If a parent injector can't be found, its location is set to -1.
      // In that case, we don't need to set up a cumulative bloom
      if (hasParentInjector(parentLoc)) {
          const parentIndex = getParentInjectorIndex(parentLoc);
          const parentLView = getParentInjectorView(parentLoc, lView);
          const parentData = parentLView[TVIEW].data;
          // Creates a cumulative bloom filter that merges the parent's bloom filter
          // and its own cumulative bloom (which contains tokens for all ancestors)
          for (let i = 0; i < 8 /* BLOOM_SIZE */; i++) {
              lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
          }
      }
      lView[injectorIndex + 8 /* PARENT */] = parentLoc;
      return injectorIndex;
  }
  function insertBloom(arr, footer) {
      arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
  }
  function getInjectorIndex(tNode, lView) {
      if (tNode.injectorIndex === -1 ||
          // If the injector index is the same as its parent's injector index, then the index has been
          // copied down from the parent node. No injector has been created yet on this node.
          (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||
          // After the first template pass, the injector index might exist but the parent values
          // might not have been calculated yet for this instance
          lView[tNode.injectorIndex + 8 /* PARENT */] === null) {
          return -1;
      }
      else {
          ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
          return tNode.injectorIndex;
      }
  }
  /**
   * Finds the index of the parent injector, with a view offset if applicable. Used to set the
   * parent injector initially.
   *
   * @returns Returns a number that is the combination of the number of LViews that we have to go up
   * to find the LView containing the parent inject AND the index of the injector within that LView.
   */
  function getParentInjectorLocation(tNode, lView) {
      if (tNode.parent && tNode.parent.injectorIndex !== -1) {
          // If we have a parent `TNode` and there is an injector associated with it we are done, because
          // the parent injector is within the current `LView`.
          return tNode.parent.injectorIndex; // ViewOffset is 0
      }
      // When parent injector location is computed it may be outside of the current view. (ie it could
      // be pointing to a declared parent location). This variable stores number of declaration parents
      // we need to walk up in order to find the parent injector location.
      let declarationViewOffset = 0;
      let parentTNode = null;
      let lViewCursor = lView;
      // The parent injector is not in the current `LView`. We will have to walk the declared parent
      // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent
      // `NodeInjector`.
      while (lViewCursor !== null) {
          // First determine the `parentTNode` location. The parent pointer differs based on `TView.type`.
          const tView = lViewCursor[TVIEW];
          const tViewType = tView.type;
          if (tViewType === 2 /* Embedded */) {
              ngDevMode &&
                  assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');
              parentTNode = tView.declTNode;
          }
          else if (tViewType === 1 /* Component */) {
              // Components don't have `TView.declTNode` because each instance of component could be
              // inserted in different location, hence `TView.declTNode` is meaningless.
              parentTNode = lViewCursor[T_HOST];
          }
          else {
              ngDevMode && assertEqual(tView.type, 0 /* Root */, 'Root type expected');
              parentTNode = null;
          }
          if (parentTNode === null) {
              // If we have no parent, than we are done.
              return NO_PARENT_INJECTOR;
          }
          ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);
          // Every iteration of the loop requires that we go to the declared parent.
          declarationViewOffset++;
          lViewCursor = lViewCursor[DECLARATION_VIEW];
          if (parentTNode.injectorIndex !== -1) {
              // We found a NodeInjector which points to something.
              return (parentTNode.injectorIndex |
                  (declarationViewOffset << 16 /* ViewOffsetShift */));
          }
      }
      return NO_PARENT_INJECTOR;
  }
  /**
   * Makes a type or an injection token public to the DI system by adding it to an
   * injector's bloom filter.
   *
   * @param di The node injector in which a directive will be added
   * @param token The type or the injection token to be made public
   */
  function diPublicInInjector(injectorIndex, tView, token) {
      bloomAdd(injectorIndex, tView, token);
  }
  /**
   * Inject static attribute value into directive constructor.
   *
   * This method is used with `factory` functions which are generated as part of
   * `defineDirective` or `defineComponent`. The method retrieves the static value
   * of an attribute. (Dynamic attributes are not supported since they are not resolved
   *  at the time of injection and can change over time.)
   *
   * # Example
   * Given:
   * ```
   * @Component(...)
   * class MyComponent {
   *   constructor(@Attribute('title') title: string) { ... }
   * }
   * ```
   * When instantiated with
   * ```
   * <my-component title="Hello"></my-component>
   * ```
   *
   * Then factory method generated is:
   * ```
   * MyComponent.Éµcmp = defineComponent({
   *   factory: () => new MyComponent(injectAttribute('title'))
   *   ...
   * })
   * ```
   *
   * @publicApi
   */
  function injectAttributeImpl(tNode, attrNameToInject) {
      ngDevMode && assertTNodeType(tNode, 12 /* AnyContainer */ | 3 /* AnyRNode */);
      ngDevMode && assertDefined(tNode, 'expecting tNode');
      if (attrNameToInject === 'class') {
          return tNode.classes;
      }
      if (attrNameToInject === 'style') {
          return tNode.styles;
      }
      const attrs = tNode.attrs;
      if (attrs) {
          const attrsLength = attrs.length;
          let i = 0;
          while (i < attrsLength) {
              const value = attrs[i];
              // If we hit a `Bindings` or `Template` marker then we are done.
              if (isNameOnlyAttributeMarker(value))
                  break;
              // Skip namespaced attributes
              if (value === 0 /* NamespaceURI */) {
                  // we skip the next two values
                  // as namespaced attributes looks like
                  // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',
                  // 'existValue', ...]
                  i = i + 2;
              }
              else if (typeof value === 'number') {
                  // Skip to the first value of the marked attribute.
                  i++;
                  while (i < attrsLength && typeof attrs[i] === 'string') {
                      i++;
                  }
              }
              else if (value === attrNameToInject) {
                  return attrs[i + 1];
              }
              else {
                  i = i + 2;
              }
          }
      }
      return null;
  }
  function notFoundValueOrThrow(notFoundValue, token, flags) {
      if (flags & InjectFlags.Optional) {
          return notFoundValue;
      }
      else {
          throwProviderNotFoundError(token, 'NodeInjector');
      }
  }
  /**
   * Returns the value associated to the given token from the ModuleInjector or throws exception
   *
   * @param lView The `LView` that contains the `tNode`
   * @param token The token to look for
   * @param flags Injection flags
   * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
   * @returns the value from the injector or throws an exception
   */
  function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
      if (flags & InjectFlags.Optional && notFoundValue === undefined) {
          // This must be set or the NullInjector will throw for optional deps
          notFoundValue = null;
      }
      if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
          const moduleInjector = lView[INJECTOR$1];
          // switch to `injectInjectorOnly` implementation for module injector, since module injector
          // should not have access to Component/Directive DI scope (that may happen through
          // `directiveInject` implementation)
          const previousInjectImplementation = setInjectImplementation(undefined);
          try {
              if (moduleInjector) {
                  return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
              }
              else {
                  return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
              }
          }
          finally {
              setInjectImplementation(previousInjectImplementation);
          }
      }
      return notFoundValueOrThrow(notFoundValue, token, flags);
  }
  /**
   * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.
   *
   * Look for the injector providing the token by walking up the node injector tree and then
   * the module injector tree.
   *
   * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom
   * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)
   *
   * @param tNode The Node where the search for the injector should start
   * @param lView The `LView` that contains the `tNode`
   * @param token The token to look for
   * @param flags Injection flags
   * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
   * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided
   */
  function getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {
      if (tNode !== null) {
          const bloomHash = bloomHashBitOrFactory(token);
          // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef
          // so just call the factory function to create it.
          if (typeof bloomHash === 'function') {
              if (!enterDI(lView, tNode, flags)) {
                  // Failed to enter DI, try module injector instead. If a token is injected with the @Host
                  // flag, the module injector is not searched for that token in Ivy.
                  return (flags & InjectFlags.Host) ?
                      notFoundValueOrThrow(notFoundValue, token, flags) :
                      lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
              }
              try {
                  const value = bloomHash(flags);
                  if (value == null && !(flags & InjectFlags.Optional)) {
                      throwProviderNotFoundError(token);
                  }
                  else {
                      return value;
                  }
              }
              finally {
                  leaveDI();
              }
          }
          else if (typeof bloomHash === 'number') {
              // A reference to the previous injector TView that was found while climbing the element
              // injector tree. This is used to know if viewProviders can be accessed on the current
              // injector.
              let previousTView = null;
              let injectorIndex = getInjectorIndex(tNode, lView);
              let parentLocation = NO_PARENT_INJECTOR;
              let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;
              // If we should skip this injector, or if there is no injector on this node, start by
              // searching the parent injector.
              if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
                  parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :
                      lView[injectorIndex + 8 /* PARENT */];
                  if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
                      injectorIndex = -1;
                  }
                  else {
                      previousTView = lView[TVIEW];
                      injectorIndex = getParentInjectorIndex(parentLocation);
                      lView = getParentInjectorView(parentLocation, lView);
                  }
              }
              // Traverse up the injector tree until we find a potential match or until we know there
              // *isn't* a match.
              while (injectorIndex !== -1) {
                  ngDevMode && assertNodeInjector(lView, injectorIndex);
                  // Check the current injector. If it matches, see if it contains token.
                  const tView = lView[TVIEW];
                  ngDevMode &&
                      assertTNodeForLView(tView.data[injectorIndex + 8 /* TNODE */], lView);
                  if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
                      // At this point, we have an injector which *may* contain the token, so we step through
                      // the providers and directives associated with the injector's corresponding node to get
                      // the instance.
                      const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);
                      if (instance !== NOT_FOUND) {
                          return instance;
                      }
                  }
                  parentLocation = lView[injectorIndex + 8 /* PARENT */];
                  if (parentLocation !== NO_PARENT_INJECTOR &&
                      shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* TNODE */] === hostTElementNode) &&
                      bloomHasToken(bloomHash, injectorIndex, lView)) {
                      // The def wasn't found anywhere on this node, so it was a false positive.
                      // Traverse up the tree and continue searching.
                      previousTView = tView;
                      injectorIndex = getParentInjectorIndex(parentLocation);
                      lView = getParentInjectorView(parentLocation, lView);
                  }
                  else {
                      // If we should not search parent OR If the ancestor bloom filter value does not have the
                      // bit corresponding to the directive we can give up on traversing up to find the specific
                      // injector.
                      injectorIndex = -1;
                  }
              }
          }
      }
      return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
  }
  const NOT_FOUND = {};
  function createNodeInjector() {
      return new NodeInjector(getCurrentTNode(), getLView());
  }
  function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
      const currentTView = lView[TVIEW];
      const tNode = currentTView.data[injectorIndex + 8 /* TNODE */];
      // First, we need to determine if view providers can be accessed by the starting element.
      // There are two possibilities
      const canAccessViewProviders = previousTView == null ?
          // 1) This is the first invocation `previousTView == null` which means that we are at the
          // `TNode` of where injector is starting to look. In such a case the only time we are allowed
          // to look into the ViewProviders is if:
          // - we are on a component
          // - AND the injector set `includeViewProviders` to true (implying that the token can see
          // ViewProviders because it is the Component or a Service which itself was declared in
          // ViewProviders)
          (isComponentHost(tNode) && includeViewProviders) :
          // 2) `previousTView != null` which means that we are now walking across the parent nodes.
          // In such a case we are only allowed to look into the ViewProviders if:
          // - We just crossed from child View to Parent View `previousTView != currentTView`
          // - AND the parent TNode is an Element.
          // This means that we just came from the Component's View and therefore are allowed to see
          // into the ViewProviders.
          (previousTView != currentTView && ((tNode.type & 3 /* AnyRNode */) !== 0));
      // This special case happens when there is a @host on the inject and when we are searching
      // on the host element node.
      const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;
      const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);
      if (injectableIdx !== null) {
          return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
      }
      else {
          return NOT_FOUND;
      }
  }
  /**
   * Searches for the given token among the node's directives and providers.
   *
   * @param tNode TNode on which directives are present.
   * @param tView The tView we are currently processing
   * @param token Provider token or type of a directive to look for.
   * @param canAccessViewProviders Whether view providers should be considered.
   * @param isHostSpecialCase Whether the host special case applies.
   * @returns Index of a found directive or provider, or null when none found.
   */
  function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
      const nodeProviderIndexes = tNode.providerIndexes;
      const tInjectables = tView.data;
      const injectablesStart = nodeProviderIndexes & 1048575 /* ProvidersStartIndexMask */;
      const directivesStart = tNode.directiveStart;
      const directiveEnd = tNode.directiveEnd;
      const cptViewProvidersCount = nodeProviderIndexes >> 20 /* CptViewProvidersCountShift */;
      const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;
      // When the host special case applies, only the viewProviders and the component are visible
      const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;
      for (let i = startingIndex; i < endIndex; i++) {
          const providerTokenOrDef = tInjectables[i];
          if (i < directivesStart && token === providerTokenOrDef ||
              i >= directivesStart && providerTokenOrDef.type === token) {
              return i;
          }
      }
      if (isHostSpecialCase) {
          const dirDef = tInjectables[directivesStart];
          if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
              return directivesStart;
          }
      }
      return null;
  }
  /**
   * Retrieve or instantiate the injectable from the `LView` at particular `index`.
   *
   * This function checks to see if the value has already been instantiated and if so returns the
   * cached `injectable`. Otherwise if it detects that the value is still a factory it
   * instantiates the `injectable` and caches the value.
   */
  function getNodeInjectable(lView, tView, index, tNode) {
      let value = lView[index];
      const tData = tView.data;
      if (isFactory(value)) {
          const factory = value;
          if (factory.resolving) {
              throwCyclicDependencyError(stringifyForError(tData[index]));
          }
          const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
          factory.resolving = true;
          const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
          const success = enterDI(lView, tNode, InjectFlags.Default);
          ngDevMode &&
              assertEqual(success, true, 'Because flags do not contain \`SkipSelf\' we expect this to always succeed.');
          try {
              value = lView[index] = factory.factory(undefined, tData, lView, tNode);
              // This code path is hit for both directives and providers.
              // For perf reasons, we want to avoid searching for hooks on providers.
              // It does no harm to try (the hooks just won't exist), but the extra
              // checks are unnecessary and this is a hot path. So we check to see
              // if the index of the dependency is in the directive range for this
              // tNode. If it's not, we know it's a provider and skip hook registration.
              if (tView.firstCreatePass && index >= tNode.directiveStart) {
                  ngDevMode && assertDirectiveDef(tData[index]);
                  registerPreOrderHooks(index, tData[index], tView);
              }
          }
          finally {
              previousInjectImplementation !== null &&
                  setInjectImplementation(previousInjectImplementation);
              setIncludeViewProviders(previousIncludeViewProviders);
              factory.resolving = false;
              leaveDI();
          }
      }
      return value;
  }
  /**
   * Returns the bit in an injector's bloom filter that should be used to determine whether or not
   * the directive might be provided by the injector.
   *
   * When a directive is public, it is added to the bloom filter and given a unique ID that can be
   * retrieved on the Type. When the directive isn't public or the token is not a directive `null`
   * is returned as the node injector can not possibly provide that token.
   *
   * @param token the injection token
   * @returns the matching bit to check in the bloom filter or `null` if the token is not known.
   *   When the returned value is negative then it represents special values such as `Injector`.
   */
  function bloomHashBitOrFactory(token) {
      ngDevMode && assertDefined(token, 'token must be defined');
      if (typeof token === 'string') {
          return token.charCodeAt(0) || 0;
      }
      const tokenId = 
      // First check with `hasOwnProperty` so we don't get an inherited ID.
      token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;
      // Negative token IDs are used for special objects such as `Injector`
      if (typeof tokenId === 'number') {
          if (tokenId >= 0) {
              return tokenId & BLOOM_MASK;
          }
          else {
              ngDevMode &&
                  assertEqual(tokenId, -1 /* Injector */, 'Expecting to get Special Injector Id');
              return createNodeInjector;
          }
      }
      else {
          return tokenId;
      }
  }
  function bloomHasToken(bloomHash, injectorIndex, injectorView) {
      // Create a mask that targets the specific bit associated with the directive we're looking for.
      // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
      // to bit positions 0 - 31 in a 32 bit integer.
      const mask = 1 << bloomHash;
      // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of
      // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset
      // that should be used.
      const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];
      // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
      // this injector is a potential match.
      return !!(value & mask);
  }
  /** Returns true if flags prevent parent injector from being searched for tokens */
  function shouldSearchParent(flags, isFirstHostTNode) {
      return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
  }
  class NodeInjector {
      constructor(_tNode, _lView) {
          this._tNode = _tNode;
          this._lView = _lView;
      }
      get(token, notFoundValue, flags) {
          return getOrCreateInjectable(this._tNode, this._lView, token, flags, notFoundValue);
      }
  }
  /**
   * @codeGenApi
   */
  function ÉµÉµgetInheritedFactory(type) {
      return noSideEffects(() => {
          const ownConstructor = type.prototype.constructor;
          const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
          const objectPrototype = Object.prototype;
          let parent = Object.getPrototypeOf(type.prototype).constructor;
          // Go up the prototype until we hit `Object`.
          while (parent && parent !== objectPrototype) {
              const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);
              // If we hit something that has a factory and the factory isn't the same as the type,
              // we've found the inherited factory. Note the check that the factory isn't the type's
              // own factory is redundant in most cases, but if the user has custom decorators on the
              // class, this lookup will start one level down in the prototype chain, causing us to
              // find the own factory first and potentially triggering an infinite loop downstream.
              if (factory && factory !== ownFactory) {
                  return factory;
              }
              parent = Object.getPrototypeOf(parent);
          }
          // There is no factory defined. Either this was improper usage of inheritance
          // (no Angular decorator on the superclass) or there is no constructor at all
          // in the inheritance chain. Since the two cases cannot be distinguished, the
          // latter has to be assumed.
          return t => new t();
      });
  }
  function getFactoryOf(type) {
      if (isForwardRef(type)) {
          return () => {
              const factory = getFactoryOf(resolveForwardRef(type));
              return factory && factory();
          };
      }
      return getFactoryDef(type);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Facade for the attribute injection from DI.
   *
   * @codeGenApi
   */
  function ÉµÉµinjectAttribute(attrNameToInject) {
      return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const ANNOTATIONS = '__annotations__';
  const PARAMETERS = '__parameters__';
  const PROP_METADATA = '__prop__metadata__';
  /**
   * @suppress {globalThis}
   */
  function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
      return noSideEffects(() => {
          const metaCtor = makeMetadataCtor(props);
          function DecoratorFactory(...args) {
              if (this instanceof DecoratorFactory) {
                  metaCtor.call(this, ...args);
                  return this;
              }
              const annotationInstance = new DecoratorFactory(...args);
              return function TypeDecorator(cls) {
                  if (typeFn)
                      typeFn(cls, ...args);
                  // Use of Object.defineProperty is important since it creates non-enumerable property which
                  // prevents the property is copied during subclassing.
                  const annotations = cls.hasOwnProperty(ANNOTATIONS) ?
                      cls[ANNOTATIONS] :
                      Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
                  annotations.push(annotationInstance);
                  if (additionalProcessing)
                      additionalProcessing(cls);
                  return cls;
              };
          }
          if (parentClass) {
              DecoratorFactory.prototype = Object.create(parentClass.prototype);
          }
          DecoratorFactory.prototype.ngMetadataName = name;
          DecoratorFactory.annotationCls = DecoratorFactory;
          return DecoratorFactory;
      });
  }
  function makeMetadataCtor(props) {
      return function ctor(...args) {
          if (props) {
              const values = props(...args);
              for (const propName in values) {
                  this[propName] = values[propName];
              }
          }
      };
  }
  function makeParamDecorator(name, props, parentClass) {
      return noSideEffects(() => {
          const metaCtor = makeMetadataCtor(props);
          function ParamDecoratorFactory(...args) {
              if (this instanceof ParamDecoratorFactory) {
                  metaCtor.apply(this, args);
                  return this;
              }
              const annotationInstance = new ParamDecoratorFactory(...args);
              ParamDecorator.annotation = annotationInstance;
              return ParamDecorator;
              function ParamDecorator(cls, unusedKey, index) {
                  // Use of Object.defineProperty is important since it creates non-enumerable property which
                  // prevents the property is copied during subclassing.
                  const parameters = cls.hasOwnProperty(PARAMETERS) ?
                      cls[PARAMETERS] :
                      Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
                  // there might be gaps if some in between parameters do not have annotations.
                  // we pad with nulls.
                  while (parameters.length <= index) {
                      parameters.push(null);
                  }
                  (parameters[index] = parameters[index] || []).push(annotationInstance);
                  return cls;
              }
          }
          if (parentClass) {
              ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
          }
          ParamDecoratorFactory.prototype.ngMetadataName = name;
          ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
          return ParamDecoratorFactory;
      });
  }
  function makePropDecorator(name, props, parentClass, additionalProcessing) {
      return noSideEffects(() => {
          const metaCtor = makeMetadataCtor(props);
          function PropDecoratorFactory(...args) {
              if (this instanceof PropDecoratorFactory) {
                  metaCtor.apply(this, args);
                  return this;
              }
              const decoratorInstance = new PropDecoratorFactory(...args);
              function PropDecorator(target, name) {
                  const constructor = target.constructor;
                  // Use of Object.defineProperty is important because it creates a non-enumerable property
                  // which prevents the property from being copied during subclassing.
                  const meta = constructor.hasOwnProperty(PROP_METADATA) ?
                      constructor[PROP_METADATA] :
                      Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
                  meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
                  meta[name].unshift(decoratorInstance);
                  if (additionalProcessing)
                      additionalProcessing(target, name, ...args);
              }
              return PropDecorator;
          }
          if (parentClass) {
              PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
          }
          PropDecoratorFactory.prototype.ngMetadataName = name;
          PropDecoratorFactory.annotationCls = PropDecoratorFactory;
          return PropDecoratorFactory;
      });
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Attribute decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const Attribute = makeParamDecorator('Attribute', (attributeName) => ({ attributeName, __NG_ELEMENT_ID__: () => ÉµÉµinjectAttribute(attributeName) }));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Creates a token that can be used in a DI Provider.
   *
   * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
   * runtime representation) such as when injecting an interface, callable type, array or
   * parameterized type.
   *
   * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
   * the `Injector`. This provides an additional level of type safety.
   *
   * ```
   * interface MyInterface {...}
   * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
   * // myInterface is inferred to be MyInterface.
   * ```
   *
   * When creating an `InjectionToken`, you can optionally specify a factory function which returns
   * (possibly by creating) a default value of the parameterized type `T`. This sets up the
   * `InjectionToken` using this factory as a provider as if it was defined explicitly in the
   * application's root injector. If the factory function, which takes zero arguments, needs to inject
   * dependencies, it can do so using the `inject` function.
   * As you can see in the Tree-shakable InjectionToken example below.
   *
   * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which
   * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As
   * mentioned above, `'root'` is the default value for `providedIn`.
   *
   * @usageNotes
   * ### Basic Examples
   *
   * ### Plain InjectionToken
   *
   * {@example core/di/ts/injector_spec.ts region='InjectionToken'}
   *
   * ### Tree-shakable InjectionToken
   *
   * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
   *
   *
   * @publicApi
   */
  class InjectionToken {
      /**
       * @param _desc   Description for the token,
       *                used only for debugging purposes,
       *                it should but does not need to be unique
       * @param options Options for the token's usage, as described above
       */
      constructor(_desc, options) {
          this._desc = _desc;
          /** @internal */
          this.ngMetadataName = 'InjectionToken';
          this.Éµprov = undefined;
          if (typeof options == 'number') {
              (typeof ngDevMode === 'undefined' || ngDevMode) &&
                  assertLessThan(options, 0, 'Only negative numbers are supported here');
              // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.
              // See `InjectorMarkers`
              this.__NG_ELEMENT_ID__ = options;
          }
          else if (options !== undefined) {
              this.Éµprov = ÉµÉµdefineInjectable({
                  token: this,
                  providedIn: options.providedIn || 'root',
                  factory: options.factory,
              });
          }
      }
      toString() {
          return `InjectionToken ${this._desc}`;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A DI token that you can use to create a virtual [provider](guide/glossary#provider)
   * that will populate the `entryComponents` field of components and NgModules
   * based on its `useValue` property value.
   * All components that are referenced in the `useValue` value (either directly
   * or in a nested array or map) are added to the `entryComponents` property.
   *
   * @usageNotes
   *
   * The following example shows how the router can populate the `entryComponents`
   * field of an NgModule based on a router configuration that refers
   * to components.
   *
   * ```typescript
   * // helper function inside the router
   * function provideRoutes(routes) {
   *   return [
   *     {provide: ROUTES, useValue: routes},
   *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
   *   ];
   * }
   *
   * // user code
   * let routes = [
   *   {path: '/root', component: RootComp},
   *   {path: '/teams', component: TeamsComp}
   * ];
   *
   * @NgModule({
   *   providers: [provideRoutes(routes)]
   * })
   * class ModuleWithRoutes {}
   * ```
   *
   * @publicApi
   * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.
   */
  const ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
  // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not
  // explicitly set.
  const emitDistinctChangesOnlyDefaultValue = true;
  /**
   * Base class for query metadata.
   *
   * @see `ContentChildren`.
   * @see `ContentChild`.
   * @see `ViewChildren`.
   * @see `ViewChild`.
   *
   * @publicApi
   */
  class Query {
  }
  /**
   * ContentChildren decorator and metadata.
   *
   *
   * @Annotation
   * @publicApi
   */
  const ContentChildren = makePropDecorator('ContentChildren', (selector, data = {}) => ({
      selector,
      first: false,
      isViewQuery: false,
      descendants: false,
      emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,
      ...data
  }), Query);
  /**
   * ContentChild decorator and metadata.
   *
   *
   * @Annotation
   *
   * @publicApi
   */
  const ContentChild = makePropDecorator('ContentChild', (selector, data = {}) => ({ selector, first: true, isViewQuery: false, descendants: true, ...data }), Query);
  /**
   * ViewChildren decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const ViewChildren = makePropDecorator('ViewChildren', (selector, data = {}) => ({
      selector,
      first: false,
      isViewQuery: true,
      descendants: true,
      emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,
      ...data
  }), Query);
  /**
   * ViewChild decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const ViewChild = makePropDecorator('ViewChild', (selector, data) => ({ selector, first: true, isViewQuery: true, descendants: true, ...data }), Query);
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var FactoryTarget;
  (function (FactoryTarget) {
      FactoryTarget[FactoryTarget["Directive"] = 0] = "Directive";
      FactoryTarget[FactoryTarget["Component"] = 1] = "Component";
      FactoryTarget[FactoryTarget["Injectable"] = 2] = "Injectable";
      FactoryTarget[FactoryTarget["Pipe"] = 3] = "Pipe";
      FactoryTarget[FactoryTarget["NgModule"] = 4] = "NgModule";
  })(FactoryTarget || (FactoryTarget = {}));
  var ViewEncapsulation;
  (function (ViewEncapsulation) {
      ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
      // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.
      ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
      ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
  })(ViewEncapsulation || (ViewEncapsulation = {}));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function getCompilerFacade(request) {
      const globalNg = _global['ng'];
      if (globalNg && globalNg.ÉµcompilerFacade) {
          return globalNg.ÉµcompilerFacade;
      }
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
          // Log the type as an error so that a developer can easily navigate to the type from the
          // console.
          console.error(`JIT compilation failed for ${request.kind}`, request.type);
          let message = `The ${request.kind} '${request
              .type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\n\n`;
          if (request.usage === 1 /* PartialDeclaration */) {
              message += `The ${request.kind} is part of a library that has been partially compiled.\n`;
              message +=
                  `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\n`;
              message += '\n';
              message +=
                  `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\n`;
          }
          else {
              message +=
                  `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\n`;
          }
          message +=
              `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\n`;
          message +=
              `or manually provide the compiler with 'import "@angular/compiler";' before bootstrapping.`;
          throw new Error(message);
      }
      else {
          throw new Error('JIT compiler unavailable');
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @description
   *
   * Represents a type that a Component or other object is instances of.
   *
   * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by
   * the `MyCustomComponent` constructor function.
   *
   * @publicApi
   */
  const Type = Function;
  function isType(v) {
      return typeof v === 'function';
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Equivalent to ES6 spread, add each item to an array.
   *
   * @param items The items to add
   * @param arr The array to which you want to add the items
   */
  function addAllToArray(items, arr) {
      for (let i = 0; i < items.length; i++) {
          arr.push(items[i]);
      }
  }
  /**
   * Determines if the contents of two arrays is identical
   *
   * @param a first array
   * @param b second array
   * @param identityAccessor Optional function for extracting stable object identity from a value in
   *     the array.
   */
  function arrayEquals(a, b, identityAccessor) {
      if (a.length !== b.length)
          return false;
      for (let i = 0; i < a.length; i++) {
          let valueA = a[i];
          let valueB = b[i];
          if (identityAccessor) {
              valueA = identityAccessor(valueA);
              valueB = identityAccessor(valueB);
          }
          if (valueB !== valueA) {
              return false;
          }
      }
      return true;
  }
  /**
   * Flattens an array.
   */
  function flatten(list, dst) {
      if (dst === undefined)
          dst = list;
      for (let i = 0; i < list.length; i++) {
          let item = list[i];
          if (Array.isArray(item)) {
              // we need to inline it.
              if (dst === list) {
                  // Our assumption that the list was already flat was wrong and
                  // we need to clone flat since we need to write to it.
                  dst = list.slice(0, i);
              }
              flatten(item, dst);
          }
          else if (dst !== list) {
              dst.push(item);
          }
      }
      return dst;
  }
  function deepForEach(input, fn) {
      input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));
  }
  function addToArray(arr, index, value) {
      // perf: array.push is faster than array.splice!
      if (index >= arr.length) {
          arr.push(value);
      }
      else {
          arr.splice(index, 0, value);
      }
  }
  function removeFromArray(arr, index) {
      // perf: array.pop is faster than array.splice!
      if (index >= arr.length - 1) {
          return arr.pop();
      }
      else {
          return arr.splice(index, 1)[0];
      }
  }
  function newArray(size, value) {
      const list = [];
      for (let i = 0; i < size; i++) {
          list.push(value);
      }
      return list;
  }
  /**
   * Remove item from array (Same as `Array.splice()` but faster.)
   *
   * `Array.splice()` is not as fast because it has to allocate an array for the elements which were
   * removed. This causes memory pressure and slows down code when most of the time we don't
   * care about the deleted items array.
   *
   * https://jsperf.com/fast-array-splice (About 20x faster)
   *
   * @param array Array to splice
   * @param index Index of element in array to remove.
   * @param count Number of items to remove.
   */
  function arraySplice(array, index, count) {
      const length = array.length - count;
      while (index < length) {
          array[index] = array[index + count];
          index++;
      }
      while (count--) {
          array.pop(); // shrink the array
      }
  }
  /**
   * Same as `Array.splice(index, 0, value)` but faster.
   *
   * `Array.splice()` is not fast because it has to allocate an array for the elements which were
   * removed. This causes memory pressure and slows down code when most of the time we don't
   * care about the deleted items array.
   *
   * @param array Array to splice.
   * @param index Index in array where the `value` should be added.
   * @param value Value to add to array.
   */
  function arrayInsert(array, index, value) {
      ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
      let end = array.length;
      while (end > index) {
          const previousEnd = end - 1;
          array[end] = array[previousEnd];
          end = previousEnd;
      }
      array[index] = value;
  }
  /**
   * Same as `Array.splice2(index, 0, value1, value2)` but faster.
   *
   * `Array.splice()` is not fast because it has to allocate an array for the elements which were
   * removed. This causes memory pressure and slows down code when most of the time we don't
   * care about the deleted items array.
   *
   * @param array Array to splice.
   * @param index Index in array where the `value` should be added.
   * @param value1 Value to add to array.
   * @param value2 Value to add to array.
   */
  function arrayInsert2(array, index, value1, value2) {
      ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
      let end = array.length;
      if (end == index) {
          // inserting at the end.
          array.push(value1, value2);
      }
      else if (end === 1) {
          // corner case when we have less items in array than we have items to insert.
          array.push(value2, array[0]);
          array[0] = value1;
      }
      else {
          end--;
          array.push(array[end - 1], array[end]);
          while (end > index) {
              const previousEnd = end - 2;
              array[end] = array[previousEnd];
              end--;
          }
          array[index] = value1;
          array[index + 1] = value2;
      }
  }
  /**
   * Insert a `value` into an `array` so that the array remains sorted.
   *
   * NOTE:
   * - Duplicates are not allowed, and are ignored.
   * - This uses binary search algorithm for fast inserts.
   *
   * @param array A sorted array to insert into.
   * @param value The value to insert.
   * @returns index of the inserted value.
   */
  function arrayInsertSorted(array, value) {
      let index = arrayIndexOfSorted(array, value);
      if (index < 0) {
          // if we did not find it insert it.
          index = ~index;
          arrayInsert(array, index, value);
      }
      return index;
  }
  /**
   * Remove `value` from a sorted `array`.
   *
   * NOTE:
   * - This uses binary search algorithm for fast removals.
   *
   * @param array A sorted array to remove from.
   * @param value The value to remove.
   * @returns index of the removed value.
   *   - positive index if value found and removed.
   *   - negative index if value not found. (`~index` to get the value where it should have been
   *     inserted)
   */
  function arrayRemoveSorted(array, value) {
      const index = arrayIndexOfSorted(array, value);
      if (index >= 0) {
          arraySplice(array, index, 1);
      }
      return index;
  }
  /**
   * Get an index of an `value` in a sorted `array`.
   *
   * NOTE:
   * - This uses binary search algorithm for fast removals.
   *
   * @param array A sorted array to binary search.
   * @param value The value to look for.
   * @returns index of the value.
   *   - positive index if value found.
   *   - negative index if value not found. (`~index` to get the value where it should have been
   *     located)
   */
  function arrayIndexOfSorted(array, value) {
      return _arrayIndexOfSorted(array, value, 0);
  }
  /**
   * Set a `value` for a `key`.
   *
   * @param keyValueArray to modify.
   * @param key The key to locate or create.
   * @param value The value to set for a `key`.
   * @returns index (always even) of where the value vas set.
   */
  function keyValueArraySet(keyValueArray, key, value) {
      let index = keyValueArrayIndexOf(keyValueArray, key);
      if (index >= 0) {
          // if we found it set it.
          keyValueArray[index | 1] = value;
      }
      else {
          index = ~index;
          arrayInsert2(keyValueArray, index, key, value);
      }
      return index;
  }
  /**
   * Retrieve a `value` for a `key` (on `undefined` if not found.)
   *
   * @param keyValueArray to search.
   * @param key The key to locate.
   * @return The `value` stored at the `key` location or `undefined if not found.
   */
  function keyValueArrayGet(keyValueArray, key) {
      const index = keyValueArrayIndexOf(keyValueArray, key);
      if (index >= 0) {
          // if we found it retrieve it.
          return keyValueArray[index | 1];
      }
      return undefined;
  }
  /**
   * Retrieve a `key` index value in the array or `-1` if not found.
   *
   * @param keyValueArray to search.
   * @param key The key to locate.
   * @returns index of where the key is (or should have been.)
   *   - positive (even) index if key found.
   *   - negative index if key not found. (`~index` (even) to get the index where it should have
   *     been inserted.)
   */
  function keyValueArrayIndexOf(keyValueArray, key) {
      return _arrayIndexOfSorted(keyValueArray, key, 1);
  }
  /**
   * Delete a `key` (and `value`) from the `KeyValueArray`.
   *
   * @param keyValueArray to modify.
   * @param key The key to locate or delete (if exist).
   * @returns index of where the key was (or should have been.)
   *   - positive (even) index if key found and deleted.
   *   - negative index if key not found. (`~index` (even) to get the index where it should have
   *     been.)
   */
  function keyValueArrayDelete(keyValueArray, key) {
      const index = keyValueArrayIndexOf(keyValueArray, key);
      if (index >= 0) {
          // if we found it remove it.
          arraySplice(keyValueArray, index, 2);
      }
      return index;
  }
  /**
   * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.
   *
   * NOTE:
   * - This uses binary search algorithm for fast removals.
   *
   * @param array A sorted array to binary search.
   * @param value The value to look for.
   * @param shift grouping shift.
   *   - `0` means look at every location
   *   - `1` means only look at every other (even) location (the odd locations are to be ignored as
   *         they are values.)
   * @returns index of the value.
   *   - positive index if value found.
   *   - negative index if value not found. (`~index` to get the value where it should have been
   * inserted)
   */
  function _arrayIndexOfSorted(array, value, shift) {
      ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');
      let start = 0;
      let end = array.length >> shift;
      while (end !== start) {
          const middle = start + ((end - start) >> 1); // find the middle.
          const current = array[middle << shift];
          if (value === current) {
              return (middle << shift);
          }
          else if (current > value) {
              end = middle;
          }
          else {
              start = middle + 1; // We already searched middle so make it non-inclusive by adding 1
          }
      }
      return ~(end << shift);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /*
   * #########################
   * Attention: These Regular expressions have to hold even if the code is minified!
   * ##########################
   */
  /**
   * Regular expression that detects pass-through constructors for ES5 output. This Regex
   * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also
   * it intends to capture the pattern where existing constructors have been downleveled from
   * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.
   *
   * ```
   *   function MyClass() {
   *     var _this = _super.apply(this, arguments) || this;
   * ```
   *
   * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:
   * ```
   *   function MyClass() {
   *     var _this = _super.apply(this, __spread(arguments)) || this;
   * ```
   *
   * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:
   * ```
   *   function MyClass() {
   *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
   * ```
   *
   * More details can be found in: https://github.com/angular/angular/issues/38453.
   */
  const ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/;
  /** Regular expression that detects ES2015 classes which extend from other classes. */
  const ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
  /**
   * Regular expression that detects ES2015 classes which extend from other classes and
   * have an explicit constructor defined.
   */
  const ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
  /**
   * Regular expression that detects ES2015 classes which extend from other classes
   * and inherit a constructor.
   */
  const ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;
  /**
   * Determine whether a stringified type is a class which delegates its constructor
   * to its parent.
   *
   * This is not trivial since compiled code can actually contain a constructor function
   * even if the original source code did not. For instance, when the child class contains
   * an initialized instance property.
   */
  function isDelegateCtor(typeStr) {
      return ES5_DELEGATE_CTOR.test(typeStr) ||
          ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||
          (ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr));
  }
  class ReflectionCapabilities {
      constructor(reflect) {
          this._reflect = reflect || _global['Reflect'];
      }
      isReflectionEnabled() {
          return true;
      }
      factory(t) {
          return (...args) => new t(...args);
      }
      /** @internal */
      _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
          let result;
          if (typeof paramTypes === 'undefined') {
              result = newArray(paramAnnotations.length);
          }
          else {
              result = newArray(paramTypes.length);
          }
          for (let i = 0; i < result.length; i++) {
              // TS outputs Object for parameters without types, while Traceur omits
              // the annotations. For now we preserve the Traceur behavior to aid
              // migration, but this can be revisited.
              if (typeof paramTypes === 'undefined') {
                  result[i] = [];
              }
              else if (paramTypes[i] && paramTypes[i] != Object) {
                  result[i] = [paramTypes[i]];
              }
              else {
                  result[i] = [];
              }
              if (paramAnnotations && paramAnnotations[i] != null) {
                  result[i] = result[i].concat(paramAnnotations[i]);
              }
          }
          return result;
      }
      _ownParameters(type, parentCtor) {
          const typeStr = type.toString();
          // If we have no decorators, we only have function.length as metadata.
          // In that case, to detect whether a child class declared an own constructor or not,
          // we need to look inside of that constructor to check whether it is
          // just calling the parent.
          // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
          // that sets 'design:paramtypes' to []
          // if a class inherits from another class but has no ctor declared itself.
          if (isDelegateCtor(typeStr)) {
              return null;
          }
          // Prefer the direct API.
          if (type.parameters && type.parameters !== parentCtor.parameters) {
              return type.parameters;
          }
          // API of tsickle for lowering decorators to properties on the class.
          const tsickleCtorParams = type.ctorParameters;
          if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
              // Newer tsickle uses a function closure
              // Retain the non-function case for compatibility with older tsickle
              const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
              const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);
              const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));
              return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
          }
          // API for metadata created by invoking the decorators.
          const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];
          const paramTypes = this._reflect && this._reflect.getOwnMetadata &&
              this._reflect.getOwnMetadata('design:paramtypes', type);
          if (paramTypes || paramAnnotations) {
              return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
          }
          // If a class has no decorators, at least create metadata
          // based on function.length.
          // Note: We know that this is a real constructor as we checked
          // the content of the constructor above.
          return newArray(type.length);
      }
      parameters(type) {
          // Note: only report metadata if we have at least one class decorator
          // to stay in sync with the static reflector.
          if (!isType(type)) {
              return [];
          }
          const parentCtor = getParentCtor(type);
          let parameters = this._ownParameters(type, parentCtor);
          if (!parameters && parentCtor !== Object) {
              parameters = this.parameters(parentCtor);
          }
          return parameters || [];
      }
      _ownAnnotations(typeOrFunc, parentCtor) {
          // Prefer the direct API.
          if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
              let annotations = typeOrFunc.annotations;
              if (typeof annotations === 'function' && annotations.annotations) {
                  annotations = annotations.annotations;
              }
              return annotations;
          }
          // API of tsickle for lowering decorators to properties on the class.
          if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
              return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
          }
          // API for metadata created by invoking the decorators.
          if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
              return typeOrFunc[ANNOTATIONS];
          }
          return null;
      }
      annotations(typeOrFunc) {
          if (!isType(typeOrFunc)) {
              return [];
          }
          const parentCtor = getParentCtor(typeOrFunc);
          const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
          const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
          return parentAnnotations.concat(ownAnnotations);
      }
      _ownPropMetadata(typeOrFunc, parentCtor) {
          // Prefer the direct API.
          if (typeOrFunc.propMetadata &&
              typeOrFunc.propMetadata !== parentCtor.propMetadata) {
              let propMetadata = typeOrFunc.propMetadata;
              if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                  propMetadata = propMetadata.propMetadata;
              }
              return propMetadata;
          }
          // API of tsickle for lowering decorators to properties on the class.
          if (typeOrFunc.propDecorators &&
              typeOrFunc.propDecorators !== parentCtor.propDecorators) {
              const propDecorators = typeOrFunc.propDecorators;
              const propMetadata = {};
              Object.keys(propDecorators).forEach(prop => {
                  propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
              });
              return propMetadata;
          }
          // API for metadata created by invoking the decorators.
          if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
              return typeOrFunc[PROP_METADATA];
          }
          return null;
      }
      propMetadata(typeOrFunc) {
          if (!isType(typeOrFunc)) {
              return {};
          }
          const parentCtor = getParentCtor(typeOrFunc);
          const propMetadata = {};
          if (parentCtor !== Object) {
              const parentPropMetadata = this.propMetadata(parentCtor);
              Object.keys(parentPropMetadata).forEach((propName) => {
                  propMetadata[propName] = parentPropMetadata[propName];
              });
          }
          const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
          if (ownPropMetadata) {
              Object.keys(ownPropMetadata).forEach((propName) => {
                  const decorators = [];
                  if (propMetadata.hasOwnProperty(propName)) {
                      decorators.push(...propMetadata[propName]);
                  }
                  decorators.push(...ownPropMetadata[propName]);
                  propMetadata[propName] = decorators;
              });
          }
          return propMetadata;
      }
      ownPropMetadata(typeOrFunc) {
          if (!isType(typeOrFunc)) {
              return {};
          }
          return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
      }
      hasLifecycleHook(type, lcProperty) {
          return type instanceof Type && lcProperty in type.prototype;
      }
      guards(type) {
          return {};
      }
      getter(name) {
          return new Function('o', 'return o.' + name + ';');
      }
      setter(name) {
          return new Function('o', 'v', 'return o.' + name + ' = v;');
      }
      method(name) {
          const functionBody = `if (!o.${name}) throw new Error('"${name}" is undefined');
          return o.${name}.apply(o, args);`;
          return new Function('o', 'args', functionBody);
      }
      // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
      importUri(type) {
          // StaticSymbol
          if (typeof type === 'object' && type['filePath']) {
              return type['filePath'];
          }
          // Runtime type
          return `./${stringify(type)}`;
      }
      resourceUri(type) {
          return `./${stringify(type)}`;
      }
      resolveIdentifier(name, moduleUrl, members, runtime) {
          return runtime;
      }
      resolveEnum(enumIdentifier, name) {
          return enumIdentifier[name];
      }
  }
  function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
      if (!decoratorInvocations) {
          return [];
      }
      return decoratorInvocations.map(decoratorInvocation => {
          const decoratorType = decoratorInvocation.type;
          const annotationCls = decoratorType.annotationCls;
          const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
          return new annotationCls(...annotationArgs);
      });
  }
  function getParentCtor(ctor) {
      const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
      const parentCtor = parentProto ? parentProto.constructor : null;
      // Note: We always use `Object` as the null value
      // to simplify checking later on.
      return parentCtor || Object;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const _THROW_IF_NOT_FOUND = {};
  const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
  /*
   * Name of a property (that we patch onto DI decorator), which is used as an annotation of which
   * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators
   * in the code, thus making them tree-shakable.
   */
  const DI_DECORATOR_FLAG = '__NG_DI_FLAG__';
  const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
  const NG_TOKEN_PATH = 'ngTokenPath';
  const NEW_LINE = /\n/gm;
  const NO_NEW_LINE = 'Éµ';
  const SOURCE = '__source';
  const USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });
  /**
   * Current injector value used by `inject`.
   * - `undefined`: it is an error to call `inject`
   * - `null`: `inject` can be called but there is no injector (limp-mode).
   * - Injector instance: Use the injector for resolution.
   */
  let _currentInjector = undefined;
  function setCurrentInjector(injector) {
      const former = _currentInjector;
      _currentInjector = injector;
      return former;
  }
  function injectInjectorOnly(token, flags = InjectFlags.Default) {
      if (_currentInjector === undefined) {
          const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
              `inject() must be called from an injection context` :
              '';
          throw new RuntimeError(203 /* MISSING_INJECTION_CONTEXT */, errorMessage);
      }
      else if (_currentInjector === null) {
          return injectRootLimpMode(token, undefined, flags);
      }
      else {
          return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);
      }
  }
  function ÉµÉµinject(token, flags = InjectFlags.Default) {
      return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);
  }
  /**
   * Throws an error indicating that a factory function could not be generated by the compiler for a
   * particular class.
   *
   * This instruction allows the actual error message to be optimized away when ngDevMode is turned
   * off, saving bytes of generated code while still providing a good experience in dev mode.
   *
   * The name of the class is not mentioned here, but will be in the generated factory function name
   * and thus in the stack trace.
   *
   * @codeGenApi
   */
  function ÉµÉµinvalidFactoryDep(index) {
      const msg = ngDevMode ?
          `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.
  This can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.
  
  Please check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.` :
          'invalid';
      throw new Error(msg);
  }
  /**
   * Injects a token from the currently active injector.
   *
   * Must be used in the context of a factory function such as one defined for an
   * `InjectionToken`. Throws an error if not called from such a context.
   *
   * Within such a factory function, using this function to request injection of a dependency
   * is faster and more type-safe than providing an additional array of dependencies
   * (as has been common with `useFactory` providers).
   *
   * @param token The injection token for the dependency to be injected.
   * @param flags Optional flags that control how injection is executed.
   * The flags correspond to injection strategies that can be specified with
   * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.
   * @returns the injected value if injection is successful, `null` otherwise.
   *
   * @usageNotes
   *
   * ### Example
   *
   * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
   *
   * @publicApi
   */
  const inject = ÉµÉµinject;
  function injectArgs(types) {
      const args = [];
      for (let i = 0; i < types.length; i++) {
          const arg = resolveForwardRef(types[i]);
          if (Array.isArray(arg)) {
              if (arg.length === 0) {
                  const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                      'Arguments array must have arguments.' :
                      '';
                  throw new RuntimeError(900 /* INVALID_DIFFER_INPUT */, errorMessage);
              }
              let type = undefined;
              let flags = InjectFlags.Default;
              for (let j = 0; j < arg.length; j++) {
                  const meta = arg[j];
                  const flag = getInjectFlag(meta);
                  if (typeof flag === 'number') {
                      // Special case when we handle @Inject decorator.
                      if (flag === -1 /* Inject */) {
                          type = meta.token;
                      }
                      else {
                          flags |= flag;
                      }
                  }
                  else {
                      type = meta;
                  }
              }
              args.push(ÉµÉµinject(type, flags));
          }
          else {
              args.push(ÉµÉµinject(arg));
          }
      }
      return args;
  }
  /**
   * Attaches a given InjectFlag to a given decorator using monkey-patching.
   * Since DI decorators can be used in providers `deps` array (when provider is configured using
   * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we
   * attach the flag to make it available both as a static property and as a field on decorator
   * instance.
   *
   * @param decorator Provided DI decorator.
   * @param flag InjectFlag that should be applied.
   */
  function attachInjectFlag(decorator, flag) {
      decorator[DI_DECORATOR_FLAG] = flag;
      decorator.prototype[DI_DECORATOR_FLAG] = flag;
      return decorator;
  }
  /**
   * Reads monkey-patched property that contains InjectFlag attached to a decorator.
   *
   * @param token Token that may contain monkey-patched DI flags property.
   */
  function getInjectFlag(token) {
      return token[DI_DECORATOR_FLAG];
  }
  function catchInjectorError(e, token, injectorErrorName, source) {
      const tokenPath = e[NG_TEMP_TOKEN_PATH];
      if (token[SOURCE]) {
          tokenPath.unshift(token[SOURCE]);
      }
      e.message = formatError('\n' + e.message, tokenPath, injectorErrorName, source);
      e[NG_TOKEN_PATH] = tokenPath;
      e[NG_TEMP_TOKEN_PATH] = null;
      throw e;
  }
  function formatError(text, obj, injectorErrorName, source = null) {
      text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
      let context = stringify(obj);
      if (Array.isArray(obj)) {
          context = obj.map(stringify).join(' -> ');
      }
      else if (typeof obj === 'object') {
          let parts = [];
          for (let key in obj) {
              if (obj.hasOwnProperty(key)) {
                  let value = obj[key];
                  parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
              }
          }
          context = `{${parts.join(', ')}}`;
      }
      return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\n  ')}`;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Inject decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const Inject = attachInjectFlag(
  // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  makeParamDecorator('Inject', (token) => ({ token })), -1 /* Inject */);
  /**
   * Optional decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const Optional = 
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(makeParamDecorator('Optional'), 8 /* Optional */);
  /**
   * Self decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const Self = 
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(makeParamDecorator('Self'), 2 /* Self */);
  /**
   * `SkipSelf` decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const SkipSelf = 
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(makeParamDecorator('SkipSelf'), 4 /* SkipSelf */);
  /**
   * Host decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const Host = 
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(makeParamDecorator('Host'), 1 /* Host */);
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  let _reflect = null;
  function getReflect() {
      return (_reflect = _reflect || new ReflectionCapabilities());
  }
  function reflectDependencies(type) {
      return convertDependencies(getReflect().parameters(type));
  }
  function convertDependencies(deps) {
      return deps.map(dep => reflectDependency(dep));
  }
  function reflectDependency(dep) {
      const meta = {
          token: null,
          attribute: null,
          host: false,
          optional: false,
          self: false,
          skipSelf: false,
      };
      if (Array.isArray(dep) && dep.length > 0) {
          for (let j = 0; j < dep.length; j++) {
              const param = dep[j];
              if (param === undefined) {
                  // param may be undefined if type of dep is not set by ngtsc
                  continue;
              }
              const proto = Object.getPrototypeOf(param);
              if (param instanceof Optional || proto.ngMetadataName === 'Optional') {
                  meta.optional = true;
              }
              else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {
                  meta.skipSelf = true;
              }
              else if (param instanceof Self || proto.ngMetadataName === 'Self') {
                  meta.self = true;
              }
              else if (param instanceof Host || proto.ngMetadataName === 'Host') {
                  meta.host = true;
              }
              else if (param instanceof Inject) {
                  meta.token = param.token;
              }
              else if (param instanceof Attribute) {
                  if (param.attributeName === undefined) {
                      throw new Error(`Attribute name must be defined.`);
                  }
                  meta.attribute = param.attributeName;
              }
              else {
                  meta.token = param;
              }
          }
      }
      else if (dep === undefined || (Array.isArray(dep) && dep.length === 0)) {
          meta.token = null;
      }
      else {
          meta.token = dep;
      }
      return meta;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Used to resolve resource URLs on `@Component` when used with JIT compilation.
   *
   * Example:
   * ```
   * @Component({
   *   selector: 'my-comp',
   *   templateUrl: 'my-comp.html', // This requires asynchronous resolution
   * })
   * class MyComponent{
   * }
   *
   * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process
   * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.
   *
   * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into
   * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.
   *
   * // Use browser's `fetch()` function as the default resource resolution strategy.
   * resolveComponentResources(fetch).then(() => {
   *   // After resolution all URLs have been converted into `template` strings.
   *   renderComponent(MyComponent);
   * });
   *
   * ```
   *
   * NOTE: In AOT the resolution happens during compilation, and so there should be no need
   * to call this method outside JIT mode.
   *
   * @param resourceResolver a function which is responsible for returning a `Promise` to the
   * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.
   */
  function resolveComponentResources(resourceResolver) {
      // Store all promises which are fetching the resources.
      const componentResolved = [];
      // Cache so that we don't fetch the same resource more than once.
      const urlMap = new Map();
      function cachedResourceResolve(url) {
          let promise = urlMap.get(url);
          if (!promise) {
              const resp = resourceResolver(url);
              urlMap.set(url, promise = resp.then(unwrapResponse));
          }
          return promise;
      }
      componentResourceResolutionQueue.forEach((component, type) => {
          const promises = [];
          if (component.templateUrl) {
              promises.push(cachedResourceResolve(component.templateUrl).then((template) => {
                  component.template = template;
              }));
          }
          const styleUrls = component.styleUrls;
          const styles = component.styles || (component.styles = []);
          const styleOffset = component.styles.length;
          styleUrls && styleUrls.forEach((styleUrl, index) => {
              styles.push(''); // pre-allocate array.
              promises.push(cachedResourceResolve(styleUrl).then((style) => {
                  styles[styleOffset + index] = style;
                  styleUrls.splice(styleUrls.indexOf(styleUrl), 1);
                  if (styleUrls.length == 0) {
                      component.styleUrls = undefined;
                  }
              }));
          });
          const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));
          componentResolved.push(fullyResolved);
      });
      clearResolutionOfComponentResourcesQueue();
      return Promise.all(componentResolved).then(() => undefined);
  }
  let componentResourceResolutionQueue = new Map();
  // Track when existing Éµcmp for a Type is waiting on resources.
  const componentDefPendingResolution = new Set();
  function maybeQueueResolutionOfComponentResources(type, metadata) {
      if (componentNeedsResolution(metadata)) {
          componentResourceResolutionQueue.set(type, metadata);
          componentDefPendingResolution.add(type);
      }
  }
  function isComponentDefPendingResolution(type) {
      return componentDefPendingResolution.has(type);
  }
  function componentNeedsResolution(component) {
      return !!((component.templateUrl && !component.hasOwnProperty('template')) ||
          component.styleUrls && component.styleUrls.length);
  }
  function clearResolutionOfComponentResourcesQueue() {
      const old = componentResourceResolutionQueue;
      componentResourceResolutionQueue = new Map();
      return old;
  }
  function restoreComponentResolutionQueue(queue) {
      componentDefPendingResolution.clear();
      queue.forEach((_, type) => componentDefPendingResolution.add(type));
      componentResourceResolutionQueue = queue;
  }
  function isComponentResourceResolutionQueueEmpty() {
      return componentResourceResolutionQueue.size === 0;
  }
  function unwrapResponse(response) {
      return typeof response == 'string' ? response : response.text();
  }
  function componentDefResolved(type) {
      componentDefPendingResolution.delete(type);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * The Trusted Types policy, or null if Trusted Types are not
   * enabled/supported, or undefined if the policy has not been created yet.
   */
  let policy$1;
  /**
   * Returns the Trusted Types policy, or null if Trusted Types are not
   * enabled/supported. The first call to this function will create the policy.
   */
  function getPolicy$1() {
      if (policy$1 === undefined) {
          policy$1 = null;
          if (_global.trustedTypes) {
              try {
                  policy$1 = _global.trustedTypes.createPolicy('angular', {
                      createHTML: (s) => s,
                      createScript: (s) => s,
                      createScriptURL: (s) => s,
                  });
              }
              catch {
                  // trustedTypes.createPolicy throws if called with a name that is
                  // already registered, even in report-only mode. Until the API changes,
                  // catch the error not to break the applications functionally. In such
                  // cases, the code will fall back to using strings.
              }
          }
      }
      return policy$1;
  }
  /**
   * Unsafely promote a string to a TrustedHTML, falling back to strings when
   * Trusted Types are not available.
   * @security This is a security-sensitive function; any use of this function
   * must go through security review. In particular, it must be assured that the
   * provided string will never cause an XSS vulnerability if used in a context
   * that will be interpreted as HTML by a browser, e.g. when assigning to
   * element.innerHTML.
   */
  function trustedHTMLFromString(html) {
      return getPolicy$1()?.createHTML(html) || html;
  }
  /**
   * Unsafely promote a string to a TrustedScript, falling back to strings when
   * Trusted Types are not available.
   * @security In particular, it must be assured that the provided string will
   * never cause an XSS vulnerability if used in a context that will be
   * interpreted and executed as a script by a browser, e.g. when calling eval.
   */
  function trustedScriptFromString(script) {
      return getPolicy$1()?.createScript(script) || script;
  }
  /**
   * Unsafely promote a string to a TrustedScriptURL, falling back to strings
   * when Trusted Types are not available.
   * @security This is a security-sensitive function; any use of this function
   * must go through security review. In particular, it must be assured that the
   * provided string will never cause an XSS vulnerability if used in a context
   * that will cause a browser to load and execute a resource, e.g. when
   * assigning to script.src.
   */
  function trustedScriptURLFromString(url) {
      return getPolicy$1()?.createScriptURL(url) || url;
  }
  /**
   * Unsafely call the Function constructor with the given string arguments. It
   * is only available in development mode, and should be stripped out of
   * production code.
   * @security This is a security-sensitive function; any use of this function
   * must go through security review. In particular, it must be assured that it
   * is only called from development code, as use in production code can lead to
   * XSS vulnerabilities.
   */
  function newTrustedFunctionForDev(...args) {
      if (typeof ngDevMode === 'undefined') {
          throw new Error('newTrustedFunctionForDev should never be called in production');
      }
      if (!_global.trustedTypes) {
          // In environments that don't support Trusted Types, fall back to the most
          // straightforward implementation:
          return new Function(...args);
      }
      // Chrome currently does not support passing TrustedScript to the Function
      // constructor. The following implements the workaround proposed on the page
      // below, where the Chromium bug is also referenced:
      // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor
      const fnArgs = args.slice(0, -1).join(',');
      const fnBody = args[args.length - 1];
      const body = `(function anonymous(${fnArgs}
  ) { ${fnBody}
  })`;
      // Using eval directly confuses the compiler and prevents this module from
      // being stripped out of JS binaries even if not used. The global['eval']
      // indirection fixes that.
      const fn = _global['eval'](trustedScriptFromString(body));
      if (fn.bind === undefined) {
          // Workaround for a browser bug that only exists in Chrome 83, where passing
          // a TrustedScript to eval just returns the TrustedScript back without
          // evaluating it. In that case, fall back to the most straightforward
          // implementation:
          return new Function(...args);
      }
      // To completely mimic the behavior of calling "new Function", two more
      // things need to happen:
      // 1. Stringifying the resulting function should return its source code
      fn.toString = () => body;
      // 2. When calling the resulting function, `this` should refer to `global`
      return fn.bind(_global);
      // When Trusted Types support in Function constructors is widely available,
      // the implementation of this function can be simplified to:
      // return new Function(...args.map(a => trustedScriptFromString(a)));
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * The Trusted Types policy, or null if Trusted Types are not
   * enabled/supported, or undefined if the policy has not been created yet.
   */
  let policy;
  /**
   * Returns the Trusted Types policy, or null if Trusted Types are not
   * enabled/supported. The first call to this function will create the policy.
   */
  function getPolicy() {
      if (policy === undefined) {
          policy = null;
          if (_global.trustedTypes) {
              try {
                  policy = _global.trustedTypes
                      .createPolicy('angular#unsafe-bypass', {
                      createHTML: (s) => s,
                      createScript: (s) => s,
                      createScriptURL: (s) => s,
                  });
              }
              catch {
                  // trustedTypes.createPolicy throws if called with a name that is
                  // already registered, even in report-only mode. Until the API changes,
                  // catch the error not to break the applications functionally. In such
                  // cases, the code will fall back to using strings.
              }
          }
      }
      return policy;
  }
  /**
   * Unsafely promote a string to a TrustedHTML, falling back to strings when
   * Trusted Types are not available.
   * @security This is a security-sensitive function; any use of this function
   * must go through security review. In particular, it must be assured that it
   * is only passed strings that come directly from custom sanitizers or the
   * bypassSecurityTrust* functions.
   */
  function trustedHTMLFromStringBypass(html) {
      return getPolicy()?.createHTML(html) || html;
  }
  /**
   * Unsafely promote a string to a TrustedScript, falling back to strings when
   * Trusted Types are not available.
   * @security This is a security-sensitive function; any use of this function
   * must go through security review. In particular, it must be assured that it
   * is only passed strings that come directly from custom sanitizers or the
   * bypassSecurityTrust* functions.
   */
  function trustedScriptFromStringBypass(script) {
      return getPolicy()?.createScript(script) || script;
  }
  /**
   * Unsafely promote a string to a TrustedScriptURL, falling back to strings
   * when Trusted Types are not available.
   * @security This is a security-sensitive function; any use of this function
   * must go through security review. In particular, it must be assured that it
   * is only passed strings that come directly from custom sanitizers or the
   * bypassSecurityTrust* functions.
   */
  function trustedScriptURLFromStringBypass(url) {
      return getPolicy()?.createScriptURL(url) || url;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class SafeValueImpl {
      constructor(changingThisBreaksApplicationSecurity) {
          this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
      }
      toString() {
          return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +
              ` (see https://g.co/ng/security#xss)`;
      }
  }
  class SafeHtmlImpl extends (/* unused pure expression or super */ null && (SafeValueImpl)) {
      getTypeName() {
          return "HTML" /* Html */;
      }
  }
  class SafeStyleImpl extends (/* unused pure expression or super */ null && (SafeValueImpl)) {
      getTypeName() {
          return "Style" /* Style */;
      }
  }
  class SafeScriptImpl extends (/* unused pure expression or super */ null && (SafeValueImpl)) {
      getTypeName() {
          return "Script" /* Script */;
      }
  }
  class SafeUrlImpl extends (/* unused pure expression or super */ null && (SafeValueImpl)) {
      getTypeName() {
          return "URL" /* Url */;
      }
  }
  class SafeResourceUrlImpl extends (/* unused pure expression or super */ null && (SafeValueImpl)) {
      getTypeName() {
          return "ResourceURL" /* ResourceUrl */;
      }
  }
  function unwrapSafeValue(value) {
      return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity :
          value;
  }
  function allowSanitizationBypassAndThrow(value, type) {
      const actualType = getSanitizationBypassType(value);
      if (actualType != null && actualType !== type) {
          // Allow ResourceURLs in URL contexts, they are strictly more trusted.
          if (actualType === "ResourceURL" /* ResourceUrl */ && type === "URL" /* Url */)
              return true;
          throw new Error(`Required a safe ${type}, got a ${actualType} (see https://g.co/ng/security#xss)`);
      }
      return actualType === type;
  }
  function getSanitizationBypassType(value) {
      return value instanceof SafeValueImpl && value.getTypeName() || null;
  }
  /**
   * Mark `html` string as trusted.
   *
   * This function wraps the trusted string in `String` and brands it in a way which makes it
   * recognizable to {@link htmlSanitizer} to be trusted implicitly.
   *
   * @param trustedHtml `html` string which needs to be implicitly trusted.
   * @returns a `html` which has been branded to be implicitly trusted.
   */
  function bypassSanitizationTrustHtml(trustedHtml) {
      return new SafeHtmlImpl(trustedHtml);
  }
  /**
   * Mark `style` string as trusted.
   *
   * This function wraps the trusted string in `String` and brands it in a way which makes it
   * recognizable to {@link styleSanitizer} to be trusted implicitly.
   *
   * @param trustedStyle `style` string which needs to be implicitly trusted.
   * @returns a `style` hich has been branded to be implicitly trusted.
   */
  function bypassSanitizationTrustStyle(trustedStyle) {
      return new SafeStyleImpl(trustedStyle);
  }
  /**
   * Mark `script` string as trusted.
   *
   * This function wraps the trusted string in `String` and brands it in a way which makes it
   * recognizable to {@link scriptSanitizer} to be trusted implicitly.
   *
   * @param trustedScript `script` string which needs to be implicitly trusted.
   * @returns a `script` which has been branded to be implicitly trusted.
   */
  function bypassSanitizationTrustScript(trustedScript) {
      return new SafeScriptImpl(trustedScript);
  }
  /**
   * Mark `url` string as trusted.
   *
   * This function wraps the trusted string in `String` and brands it in a way which makes it
   * recognizable to {@link urlSanitizer} to be trusted implicitly.
   *
   * @param trustedUrl `url` string which needs to be implicitly trusted.
   * @returns a `url`  which has been branded to be implicitly trusted.
   */
  function bypassSanitizationTrustUrl(trustedUrl) {
      return new SafeUrlImpl(trustedUrl);
  }
  /**
   * Mark `url` string as trusted.
   *
   * This function wraps the trusted string in `String` and brands it in a way which makes it
   * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.
   *
   * @param trustedResourceUrl `url` string which needs to be implicitly trusted.
   * @returns a `url` which has been branded to be implicitly trusted.
   */
  function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
      return new SafeResourceUrlImpl(trustedResourceUrl);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML
   * that needs sanitizing.
   * Depending upon browser support we use one of two strategies for doing this.
   * Default: DOMParser strategy
   * Fallback: InertDocument strategy
   */
  function getInertBodyHelper(defaultDoc) {
      const inertDocumentHelper = new InertDocumentHelper(defaultDoc);
      return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
  }
  /**
   * Uses DOMParser to create and fill an inert body element.
   * This is the default strategy used in browsers that support it.
   */
  class DOMParserHelper {
      constructor(inertDocumentHelper) {
          this.inertDocumentHelper = inertDocumentHelper;
      }
      getInertBodyElement(html) {
          // We add these extra elements to ensure that the rest of the content is parsed as expected
          // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
          // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags
          // in `html` from consuming the otherwise explicit `</body>` tag.
          html = '<body><remove></remove>' + html;
          try {
              const body = new window.DOMParser()
                  .parseFromString(trustedHTMLFromString(html), 'text/html')
                  .body;
              if (body === null) {
                  // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only
                  // becomes available in the following tick of the JS engine. In that case we fall back to
                  // the `inertDocumentHelper` instead.
                  return this.inertDocumentHelper.getInertBodyElement(html);
              }
              body.removeChild(body.firstChild);
              return body;
          }
          catch {
              return null;
          }
      }
  }
  /**
   * Use an HTML5 `template` element, if supported, or an inert body element created via
   * `createHtmlDocument` to create and fill an inert DOM element.
   * This is the fallback strategy if the browser does not support DOMParser.
   */
  class InertDocumentHelper {
      constructor(defaultDoc) {
          this.defaultDoc = defaultDoc;
          this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');
          if (this.inertDocument.body == null) {
              // usually there should be only one body element in the document, but IE doesn't have any, so
              // we need to create one.
              const inertHtml = this.inertDocument.createElement('html');
              this.inertDocument.appendChild(inertHtml);
              const inertBodyElement = this.inertDocument.createElement('body');
              inertHtml.appendChild(inertBodyElement);
          }
      }
      getInertBodyElement(html) {
          // Prefer using <template> element if supported.
          const templateEl = this.inertDocument.createElement('template');
          if ('content' in templateEl) {
              templateEl.innerHTML = trustedHTMLFromString(html);
              return templateEl;
          }
          // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`
          // and we returned the inert `body` node. This was changed, because IE seems to treat setting
          // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted
          // yet. In particular, IE appears to split some of the text into multiple text nodes rather
          // than keeping them in a single one which ends up messing with Ivy's i18n parsing further
          // down the line. This has been worked around by creating a new inert `body` and using it as
          // the root node in which we insert the HTML.
          const inertBody = this.inertDocument.createElement('body');
          inertBody.innerHTML = trustedHTMLFromString(html);
          // Support: IE 11 only
          // strip custom-namespaced attributes on IE<=11
          if (this.defaultDoc.documentMode) {
              this.stripCustomNsAttrs(inertBody);
          }
          return inertBody;
      }
      /**
       * When IE11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
       * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
       * 'ns1:xlink:foo').
       *
       * This is undesirable since we don't want to allow any of these custom attributes. This method
       * strips them all.
       */
      stripCustomNsAttrs(el) {
          const elAttrs = el.attributes;
          // loop backwards so that we can support removals.
          for (let i = elAttrs.length - 1; 0 < i; i--) {
              const attrib = elAttrs.item(i);
              const attrName = attrib.name;
              if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
                  el.removeAttribute(attrName);
              }
          }
          let childNode = el.firstChild;
          while (childNode) {
              if (childNode.nodeType === Node.ELEMENT_NODE)
                  this.stripCustomNsAttrs(childNode);
              childNode = childNode.nextSibling;
          }
      }
  }
  /**
   * We need to determine whether the DOMParser exists in the global context and
   * supports parsing HTML; HTML parsing support is not as wide as other formats, see
   * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.
   *
   * @suppress {uselessCode}
   */
  function isDOMParserAvailable() {
      try {
          return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');
      }
      catch {
          return false;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * This regular expression matches a subset of URLs that will not cause script
   * execution if used in URL context within a HTML document. Specifically, this
   * regular expression matches if (comment from here on and regex copied from
   * Soy's EscapingConventions):
   * (1) Either an allowed protocol (http, https, mailto or ftp).
   * (2) or no protocol.  A protocol must be followed by a colon. The below
   *     allows that by allowing colons only after one of the characters [/?#].
   *     A colon after a hash (#) must be in the fragment.
   *     Otherwise, a colon after a (?) must be in a query.
   *     Otherwise, a colon after a single solidus (/) must be in a path.
   *     Otherwise, a colon after a double solidus (//) must be in the authority
   *     (before port).
   *
   * The pattern disallows &, used in HTML entity declarations before
   * one of the characters in [/?#]. This disallows HTML entities used in the
   * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
   * It also disallows HTML entities in the first path part of a relative path,
   * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
   * that. More importantly, it disallows masking of a colon,
   * e.g. "javascript&#58;...".
   *
   * This regular expression was taken from the Closure sanitization library.
   */
  const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;
  /* A pattern that matches safe srcset values */
  const SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;
  /** A pattern that matches safe data URLs. Only matches image, video and audio types. */
  const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
  function _sanitizeUrl(url) {
      url = String(url);
      if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
          return url;
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
          console.warn(`WARNING: sanitizing unsafe URL value ${url} (see https://g.co/ng/security#xss)`);
      }
      return 'unsafe:' + url;
  }
  function sanitizeSrcset(srcset) {
      srcset = String(srcset);
      return srcset.split(',').map((srcset) => _sanitizeUrl(srcset.trim())).join(', ');
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function tagSet(tags) {
      const res = {};
      for (const t of tags.split(','))
          res[t] = true;
      return res;
  }
  function core_merge(...sets) {
      const res = {};
      for (const s of sets) {
          for (const v in s) {
              if (s.hasOwnProperty(v))
                  res[v] = true;
          }
      }
      return res;
  }
  // Good source of info about elements and attributes
  // https://html.spec.whatwg.org/#semantics
  // https://simon.html5.org/html-elements
  // Safe Void Elements - HTML5
  // https://html.spec.whatwg.org/#void-elements
  const VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
  // Elements that you can, intentionally, leave open (and which close themselves)
  // https://html.spec.whatwg.org/#optional-tags
  const OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
  const OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
  const OPTIONAL_END_TAG_ELEMENTS = core_merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
  // Safe Block Elements - HTML5
  const BLOCK_ELEMENTS = core_merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
      'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
      'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
  // Inline Elements - HTML5
  const INLINE_ELEMENTS = core_merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
      'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
      'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
  const VALID_ELEMENTS = core_merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
  // Attributes that have href and hence need to be sanitized
  const URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
  // Attributes that have special href set hence need to be sanitized
  const SRCSET_ATTRS = tagSet('srcset');
  const HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
      'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
      'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
      'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
      'valign,value,vspace,width');
  // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)
  const ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +
      'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +
      'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +
      'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +
      'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +
      'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +
      'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');
  // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
  // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
  // innerHTML is required, SVG attributes should be added here.
  // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
  // can be sanitized, but they increase security surface area without a legitimate use case, so they
  // are left out here.
  const VALID_ATTRS = core_merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);
  // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.
  //
  // Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)
  // `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we
  // don't want to preserve the content, if the elements themselves are going to be removed.
  const SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');
  /**
   * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
   * attributes.
   */
  class SanitizingHtmlSerializer {
      constructor() {
          // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
          // because characters were re-encoded.
          this.sanitizedSomething = false;
          this.buf = [];
      }
      sanitizeChildren(el) {
          // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
          // However this code never accesses properties off of `document` before deleting its contents
          // again, so it shouldn't be vulnerable to DOM clobbering.
          let current = el.firstChild;
          let traverseContent = true;
          while (current) {
              if (current.nodeType === Node.ELEMENT_NODE) {
                  traverseContent = this.startElement(current);
              }
              else if (current.nodeType === Node.TEXT_NODE) {
                  this.chars(current.nodeValue);
              }
              else {
                  // Strip non-element, non-text nodes.
                  this.sanitizedSomething = true;
              }
              if (traverseContent && current.firstChild) {
                  current = current.firstChild;
                  continue;
              }
              while (current) {
                  // Leaving the element. Walk up and to the right, closing tags as we go.
                  if (current.nodeType === Node.ELEMENT_NODE) {
                      this.endElement(current);
                  }
                  let next = this.checkClobberedElement(current, current.nextSibling);
                  if (next) {
                      current = next;
                      break;
                  }
                  current = this.checkClobberedElement(current, current.parentNode);
              }
          }
          return this.buf.join('');
      }
      /**
       * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
       * be traversed. Element content must always be traversed (even if the element itself is not
       * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
       *
       * @param element The element to sanitize.
       * @return True if the element's contents should be traversed.
       */
      startElement(element) {
          const tagName = element.nodeName.toLowerCase();
          if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
              this.sanitizedSomething = true;
              return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
          }
          this.buf.push('<');
          this.buf.push(tagName);
          const elAttrs = element.attributes;
          for (let i = 0; i < elAttrs.length; i++) {
              const elAttr = elAttrs.item(i);
              const attrName = elAttr.name;
              const lower = attrName.toLowerCase();
              if (!VALID_ATTRS.hasOwnProperty(lower)) {
                  this.sanitizedSomething = true;
                  continue;
              }
              let value = elAttr.value;
              // TODO(martinprobst): Special case image URIs for data:image/...
              if (URI_ATTRS[lower])
                  value = _sanitizeUrl(value);
              if (SRCSET_ATTRS[lower])
                  value = sanitizeSrcset(value);
              this.buf.push(' ', attrName, '="', encodeEntities(value), '"');
          }
          this.buf.push('>');
          return true;
      }
      endElement(current) {
          const tagName = current.nodeName.toLowerCase();
          if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
              this.buf.push('</');
              this.buf.push(tagName);
              this.buf.push('>');
          }
      }
      chars(chars) {
          this.buf.push(encodeEntities(chars));
      }
      checkClobberedElement(node, nextNode) {
          if (nextNode &&
              (node.compareDocumentPosition(nextNode) &
                  Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
              throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);
          }
          return nextNode;
      }
  }
  // Regular Expressions for parsing tags and attributes
  const SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  // ! to ~ is the ASCII range.
  const NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
  /**
   * Escapes all potentially dangerous characters, so that the
   * resulting string can be safely inserted into attribute or
   * element text.
   * @param value
   */
  function encodeEntities(value) {
      return value.replace(/&/g, '&amp;')
          .replace(SURROGATE_PAIR_REGEXP, function (match) {
          const hi = match.charCodeAt(0);
          const low = match.charCodeAt(1);
          return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
      })
          .replace(NON_ALPHANUMERIC_REGEXP, function (match) {
          return '&#' + match.charCodeAt(0) + ';';
      })
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;');
  }
  let inertBodyHelper;
  /**
   * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
   * the DOM in a browser environment.
   */
  function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
      let inertBodyElement = null;
      try {
          inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);
          // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
          let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
          inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
          // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
          // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
          let mXSSAttempts = 5;
          let parsedHtml = unsafeHtml;
          do {
              if (mXSSAttempts === 0) {
                  throw new Error('Failed to sanitize html because the input is unstable');
              }
              mXSSAttempts--;
              unsafeHtml = parsedHtml;
              parsedHtml = inertBodyElement.innerHTML;
              inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
          } while (unsafeHtml !== parsedHtml);
          const sanitizer = new SanitizingHtmlSerializer();
          const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);
          if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {
              console.warn('WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss');
          }
          return trustedHTMLFromString(safeHtml);
      }
      finally {
          // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
          if (inertBodyElement) {
              const parent = getTemplateContent(inertBodyElement) || inertBodyElement;
              while (parent.firstChild) {
                  parent.removeChild(parent.firstChild);
              }
          }
      }
  }
  function getTemplateContent(el) {
      return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?
          el.content :
          null;
  }
  function isTemplateElement(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
   * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
   * handled.
   *
   * See DomSanitizer for more details on security in Angular applications.
   *
   * @publicApi
   */
  var SecurityContext;
  (function (SecurityContext) {
      SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
      SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
      SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
      SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
      SecurityContext[SecurityContext["URL"] = 4] = "URL";
      SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
  })(SecurityContext || (SecurityContext = {}));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing
   * dangerous content.
   *
   * This method parses the `html` and locates potentially dangerous content (such as urls and
   * javascript) and removes it.
   *
   * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.
   *
   * @param unsafeHtml untrusted `html`, typically from the user.
   * @returns `html` string which is safe to display to user, because all of the dangerous javascript
   * and urls have been removed.
   *
   * @codeGenApi
   */
  function ÉµÉµsanitizeHtml(unsafeHtml) {
      const sanitizer = getSanitizer();
      if (sanitizer) {
          return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');
      }
      if (allowSanitizationBypassAndThrow(unsafeHtml, "HTML" /* Html */)) {
          return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
      }
      return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
  }
  /**
   * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing
   * dangerous content.
   *
   * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.
   *
   * @param unsafeStyle untrusted `style`, typically from the user.
   * @returns `style` string which is safe to bind to the `style` properties.
   *
   * @codeGenApi
   */
  function ÉµÉµsanitizeStyle(unsafeStyle) {
      const sanitizer = getSanitizer();
      if (sanitizer) {
          return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';
      }
      if (allowSanitizationBypassAndThrow(unsafeStyle, "Style" /* Style */)) {
          return unwrapSafeValue(unsafeStyle);
      }
      return renderStringify(unsafeStyle);
  }
  /**
   * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing
   * dangerous
   * content.
   *
   * This method parses the `url` and locates potentially dangerous content (such as javascript) and
   * removes it.
   *
   * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.
   *
   * @param unsafeUrl untrusted `url`, typically from the user.
   * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
   * all of the dangerous javascript has been removed.
   *
   * @codeGenApi
   */
  function ÉµÉµsanitizeUrl(unsafeUrl) {
      const sanitizer = getSanitizer();
      if (sanitizer) {
          return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';
      }
      if (allowSanitizationBypassAndThrow(unsafeUrl, "URL" /* Url */)) {
          return unwrapSafeValue(unsafeUrl);
      }
      return _sanitizeUrl(renderStringify(unsafeUrl));
  }
  /**
   * A `url` sanitizer which only lets trusted `url`s through.
   *
   * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.
   *
   * @param unsafeResourceUrl untrusted `url`, typically from the user.
   * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
   * only trusted `url`s have been allowed to pass.
   *
   * @codeGenApi
   */
  function ÉµÉµsanitizeResourceUrl(unsafeResourceUrl) {
      const sanitizer = getSanitizer();
      if (sanitizer) {
          return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');
      }
      if (allowSanitizationBypassAndThrow(unsafeResourceUrl, "ResourceURL" /* ResourceUrl */)) {
          return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
      }
      const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
          'unsafe value used in a resource URL context (see https://g.co/ng/security#xss)' :
          '';
      throw new RuntimeError(904 /* UNSAFE_VALUE_IN_RESOURCE_URL */, errorMessage);
  }
  /**
   * A `script` sanitizer which only lets trusted javascript through.
   *
   * This passes only `script`s marked trusted by calling {@link
   * bypassSanitizationTrustScript}.
   *
   * @param unsafeScript untrusted `script`, typically from the user.
   * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,
   * because only trusted `scripts` have been allowed to pass.
   *
   * @codeGenApi
   */
  function ÉµÉµsanitizeScript(unsafeScript) {
      const sanitizer = getSanitizer();
      if (sanitizer) {
          return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');
      }
      if (allowSanitizationBypassAndThrow(unsafeScript, "Script" /* Script */)) {
          return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
      }
      const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
          'unsafe value used in a script context' :
          '';
      throw new RuntimeError(905 /* UNSAFE_VALUE_IN_SCRIPT */, errorMessage);
  }
  /**
   * A template tag function for promoting the associated constant literal to a
   * TrustedHTML. Interpolation is explicitly not allowed.
   *
   * @param html constant template literal containing trusted HTML.
   * @returns TrustedHTML wrapping `html`.
   *
   * @security This is a security-sensitive function and should only be used to
   * convert constant values of attributes and properties found in
   * application-provided Angular templates to TrustedHTML.
   *
   * @codeGenApi
   */
  function ÉµÉµtrustConstantHtml(html) {
      // The following runtime check ensures that the function was called as a
      // template tag (e.g. ÉµÉµtrustConstantHtml`content`), without any interpolation
      // (e.g. not ÉµÉµtrustConstantHtml`content ${variable}`). A TemplateStringsArray
      // is an array with a `raw` property that is also an array. The associated
      // template literal has no interpolation if and only if the length of the
      // TemplateStringsArray is 1.
      if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
          throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);
      }
      return trustedHTMLFromString(html[0]);
  }
  /**
   * A template tag function for promoting the associated constant literal to a
   * TrustedScriptURL. Interpolation is explicitly not allowed.
   *
   * @param url constant template literal containing a trusted script URL.
   * @returns TrustedScriptURL wrapping `url`.
   *
   * @security This is a security-sensitive function and should only be used to
   * convert constant values of attributes and properties found in
   * application-provided Angular templates to TrustedScriptURL.
   *
   * @codeGenApi
   */
  function ÉµÉµtrustConstantResourceUrl(url) {
      // The following runtime check ensures that the function was called as a
      // template tag (e.g. ÉµÉµtrustConstantResourceUrl`content`), without any
      // interpolation (e.g. not ÉµÉµtrustConstantResourceUrl`content ${variable}`). A
      // TemplateStringsArray is an array with a `raw` property that is also an
      // array. The associated template literal has no interpolation if and only if
      // the length of the TemplateStringsArray is 1.
      if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
          throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);
      }
      return trustedScriptURLFromString(url[0]);
  }
  /**
   * Detects which sanitizer to use for URL property, based on tag name and prop name.
   *
   * The rules are based on the RESOURCE_URL context config from
   * `packages/compiler/src/schema/dom_security_schema.ts`.
   * If tag and prop names don't match Resource URL schema, use URL sanitizer.
   */
  function getUrlSanitizer(tag, prop) {
      if ((prop === 'src' &&
          (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' ||
              tag === 'script')) ||
          (prop === 'href' && (tag === 'base' || tag === 'link'))) {
          return ÉµÉµsanitizeResourceUrl;
      }
      return ÉµÉµsanitizeUrl;
  }
  /**
   * Sanitizes URL, selecting sanitizer function based on tag and property names.
   *
   * This function is used in case we can't define security context at compile time, when only prop
   * name is available. This happens when we generate host bindings for Directives/Components. The
   * host element is unknown at compile time, so we defer calculation of specific sanitizer to
   * runtime.
   *
   * @param unsafeUrl untrusted `url`, typically from the user.
   * @param tag target element tag name.
   * @param prop name of the property that contains the value.
   * @returns `url` string which is safe to bind.
   *
   * @codeGenApi
   */
  function ÉµÉµsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
      return getUrlSanitizer(tag, prop)(unsafeUrl);
  }
  function validateAgainstEventProperties(name) {
      if (name.toLowerCase().startsWith('on')) {
          const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` +
              `please use (${name.slice(2)})=...` +
              `\nIf '${name}' is a directive input, make sure the directive is imported by the` +
              ` current module.`;
          throw new RuntimeError(306 /* INVALID_EVENT_BINDING */, errorMessage);
      }
  }
  function validateAgainstEventAttributes(name) {
      if (name.toLowerCase().startsWith('on')) {
          const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` +
              `please use (${name.slice(2)})=...`;
          throw new RuntimeError(306 /* INVALID_EVENT_BINDING */, errorMessage);
      }
  }
  function getSanitizer() {
      const lView = getLView();
      return lView && lView[SANITIZER];
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Returns the matching `LContext` data for a given DOM node, directive or component instance.
   *
   * This function will examine the provided DOM element, component, or directive instance\'s
   * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched
   * value will be that of the newly created `LContext`.
   *
   * If the monkey-patched value is the `LView` instance then the context value for that
   * target will be created and the monkey-patch reference will be updated. Therefore when this
   * function is called it may mutate the provided element\'s, component\'s or any of the associated
   * directive\'s monkey-patch values.
   *
   * If the monkey-patch value is not detected then the code will walk up the DOM until an element
   * is found which contains a monkey-patch reference. When that occurs then the provided element
   * will be updated with a new context (which is then returned). If the monkey-patch value is not
   * detected for a component/directive instance then it will throw an error (all components and
   * directives should be automatically monkey-patched by ivy).
   *
   * @param target Component, Directive or DOM Node.
   */
  function getLContext(target) {
      let mpValue = readPatchedData(target);
      if (mpValue) {
          // only when it's an array is it considered an LView instance
          // ... otherwise it's an already constructed LContext instance
          if (Array.isArray(mpValue)) {
              const lView = mpValue;
              let nodeIndex;
              let component = undefined;
              let directives = undefined;
              if (isComponentInstance(target)) {
                  nodeIndex = findViaComponent(lView, target);
                  if (nodeIndex == -1) {
                      throw new Error('The provided component was not found in the application');
                  }
                  component = target;
              }
              else if (isDirectiveInstance(target)) {
                  nodeIndex = findViaDirective(lView, target);
                  if (nodeIndex == -1) {
                      throw new Error('The provided directive was not found in the application');
                  }
                  directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
              }
              else {
                  nodeIndex = findViaNativeElement(lView, target);
                  if (nodeIndex == -1) {
                      return null;
                  }
              }
              // the goal is not to fill the entire context full of data because the lookups
              // are expensive. Instead, only the target data (the element, component, container, ICU
              // expression or directive details) are filled into the context. If called multiple times
              // with different target values then the missing target data will be filled in.
              const native = unwrapRNode(lView[nodeIndex]);
              const existingCtx = readPatchedData(native);
              const context = (existingCtx && !Array.isArray(existingCtx)) ?
                  existingCtx :
                  createLContext(lView, nodeIndex, native);
              // only when the component has been discovered then update the monkey-patch
              if (component && context.component === undefined) {
                  context.component = component;
                  attachPatchData(context.component, context);
              }
              // only when the directives have been discovered then update the monkey-patch
              if (directives && context.directives === undefined) {
                  context.directives = directives;
                  for (let i = 0; i < directives.length; i++) {
                      attachPatchData(directives[i], context);
                  }
              }
              attachPatchData(context.native, context);
              mpValue = context;
          }
      }
      else {
          const rElement = target;
          ngDevMode && assertDomNode(rElement);
          // if the context is not found then we need to traverse upwards up the DOM
          // to find the nearest element that has already been monkey patched with data
          let parent = rElement;
          while (parent = parent.parentNode) {
              const parentContext = readPatchedData(parent);
              if (parentContext) {
                  let lView;
                  if (Array.isArray(parentContext)) {
                      lView = parentContext;
                  }
                  else {
                      lView = parentContext.lView;
                  }
                  // the edge of the app was also reached here through another means
                  // (maybe because the DOM was changed manually).
                  if (!lView) {
                      return null;
                  }
                  const index = findViaNativeElement(lView, rElement);
                  if (index >= 0) {
                      const native = unwrapRNode(lView[index]);
                      const context = createLContext(lView, index, native);
                      attachPatchData(native, context);
                      mpValue = context;
                      break;
                  }
              }
          }
      }
      return mpValue || null;
  }
  /**
   * Creates an empty instance of a `LContext` context
   */
  function createLContext(lView, nodeIndex, native) {
      return {
          lView,
          nodeIndex,
          native,
          component: undefined,
          directives: undefined,
          localRefs: undefined,
      };
  }
  /**
   * Takes a component instance and returns the view for that component.
   *
   * @param componentInstance
   * @returns The component's view
   */
  function getComponentViewByInstance(componentInstance) {
      let lView = readPatchedData(componentInstance);
      let view;
      if (Array.isArray(lView)) {
          const nodeIndex = findViaComponent(lView, componentInstance);
          view = getComponentLViewByIndex(nodeIndex, lView);
          const context = createLContext(lView, nodeIndex, view[HOST]);
          context.component = componentInstance;
          attachPatchData(componentInstance, context);
          attachPatchData(context.native, context);
      }
      else {
          const context = lView;
          view = getComponentLViewByIndex(context.nodeIndex, context.lView);
      }
      return view;
  }
  /**
   * This property will be monkey-patched on elements, components and directives.
   */
  const MONKEY_PATCH_KEY_NAME = '__ngContext__';
  /**
   * Assigns the given data to the given target (which could be a component,
   * directive or DOM node instance) using monkey-patching.
   */
  function attachPatchData(target, data) {
      ngDevMode && assertDefined(target, 'Target expected');
      target[MONKEY_PATCH_KEY_NAME] = data;
  }
  /**
   * Returns the monkey-patch value data present on the target (which could be
   * a component, directive or a DOM node).
   */
  function readPatchedData(target) {
      ngDevMode && assertDefined(target, 'Target expected');
      return target[MONKEY_PATCH_KEY_NAME] || null;
  }
  function readPatchedLView(target) {
      const value = readPatchedData(target);
      if (value) {
          return Array.isArray(value) ? value : value.lView;
      }
      return null;
  }
  function isComponentInstance(instance) {
      return instance && instance.constructor && instance.constructor.Éµcmp;
  }
  function isDirectiveInstance(instance) {
      return instance && instance.constructor && instance.constructor.Éµdir;
  }
  /**
   * Locates the element within the given LView and returns the matching index
   */
  function findViaNativeElement(lView, target) {
      const tView = lView[TVIEW];
      for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
          if (unwrapRNode(lView[i]) === target) {
              return i;
          }
      }
      return -1;
  }
  /**
   * Locates the next tNode (child, sibling or parent).
   */
  function traverseNextElement(tNode) {
      if (tNode.child) {
          return tNode.child;
      }
      else if (tNode.next) {
          return tNode.next;
      }
      else {
          // Let's take the following template: <div><span>text</span></div><component/>
          // After checking the text node, we need to find the next parent that has a "next" TNode,
          // in this case the parent `div`, so that we can find the component.
          while (tNode.parent && !tNode.parent.next) {
              tNode = tNode.parent;
          }
          return tNode.parent && tNode.parent.next;
      }
  }
  /**
   * Locates the component within the given LView and returns the matching index
   */
  function findViaComponent(lView, componentInstance) {
      const componentIndices = lView[TVIEW].components;
      if (componentIndices) {
          for (let i = 0; i < componentIndices.length; i++) {
              const elementComponentIndex = componentIndices[i];
              const componentView = getComponentLViewByIndex(elementComponentIndex, lView);
              if (componentView[CONTEXT] === componentInstance) {
                  return elementComponentIndex;
              }
          }
      }
      else {
          const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
          const rootComponent = rootComponentView[CONTEXT];
          if (rootComponent === componentInstance) {
              // we are dealing with the root element here therefore we know that the
              // element is the very first element after the HEADER data in the lView
              return HEADER_OFFSET;
          }
      }
      return -1;
  }
  /**
   * Locates the directive within the given LView and returns the matching index
   */
  function findViaDirective(lView, directiveInstance) {
      // if a directive is monkey patched then it will (by default)
      // have a reference to the LView of the current view. The
      // element bound to the directive being search lives somewhere
      // in the view data. We loop through the nodes and check their
      // list of directives for the instance.
      let tNode = lView[TVIEW].firstChild;
      while (tNode) {
          const directiveIndexStart = tNode.directiveStart;
          const directiveIndexEnd = tNode.directiveEnd;
          for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {
              if (lView[i] === directiveInstance) {
                  return tNode.index;
              }
          }
          tNode = traverseNextElement(tNode);
      }
      return -1;
  }
  /**
   * Returns a list of directives extracted from the given view based on the
   * provided list of directive index values.
   *
   * @param nodeIndex The node index
   * @param lView The target view data
   * @param includeComponents Whether or not to include components in returned directives
   */
  function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {
      const tNode = lView[TVIEW].data[nodeIndex];
      let directiveStartIndex = tNode.directiveStart;
      if (directiveStartIndex == 0)
          return EMPTY_ARRAY;
      const directiveEndIndex = tNode.directiveEnd;
      if (!includeComponents && tNode.flags & 2 /* isComponentHost */)
          directiveStartIndex++;
      return lView.slice(directiveStartIndex, directiveEndIndex);
  }
  function getComponentAtNodeIndex(nodeIndex, lView) {
      const tNode = lView[TVIEW].data[nodeIndex];
      let directiveStartIndex = tNode.directiveStart;
      return tNode.flags & 2 /* isComponentHost */ ? lView[directiveStartIndex] : null;
  }
  /**
   * Returns a map of local references (local reference name => element or directive instance) that
   * exist on a given element.
   */
  function discoverLocalRefs(lView, nodeIndex) {
      const tNode = lView[TVIEW].data[nodeIndex];
      if (tNode && tNode.localNames) {
          const result = {};
          let localIndex = tNode.index + 1;
          for (let i = 0; i < tNode.localNames.length; i += 2) {
              result[tNode.localNames[i]] = lView[localIndex];
              localIndex++;
          }
          return result;
      }
      return null;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const ERROR_ORIGINAL_ERROR = 'ngOriginalError';
  const ERROR_LOGGER = 'ngErrorLogger';
  function wrappedError(message, originalError) {
      const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;
      const error = Error(msg);
      error[ERROR_ORIGINAL_ERROR] = originalError;
      return error;
  }
  function getOriginalError(error) {
      return error[ERROR_ORIGINAL_ERROR];
  }
  function getErrorLogger(error) {
      return error && error[ERROR_LOGGER] || defaultErrorLogger;
  }
  function defaultErrorLogger(console, ...values) {
      console.error(...values);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Provides a hook for centralized exception handling.
   *
   * The default implementation of `ErrorHandler` prints error messages to the `console`. To
   * intercept error handling, write a custom exception handler that replaces this default as
   * appropriate for your app.
   *
   * @usageNotes
   * ### Example
   *
   * ```
   * class MyErrorHandler implements ErrorHandler {
   *   handleError(error) {
   *     // do something with the exception
   *   }
   * }
   *
   * @NgModule({
   *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
   * })
   * class MyModule {}
   * ```
   *
   * @publicApi
   */
  class ErrorHandler {
      constructor() {
          /**
           * @internal
           */
          this._console = console;
      }
      handleError(error) {
          const originalError = this._findOriginalError(error);
          // Note: Browser consoles show the place from where console.error was called.
          // We can use this to give users additional information about the error.
          const errorLogger = getErrorLogger(error);
          errorLogger(this._console, `ERROR`, error);
          if (originalError) {
              errorLogger(this._console, `ORIGINAL ERROR`, originalError);
          }
      }
      /** @internal */
      _findOriginalError(error) {
          let e = error && getOriginalError(error);
          while (e && getOriginalError(e)) {
              e = getOriginalError(e);
          }
          return e || null;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Defines a schema that allows an NgModule to contain the following:
   * - Non-Angular elements named with dash case (`-`).
   * - Element properties named with dash case (`-`).
   * Dash case is the naming convention for custom elements.
   *
   * @publicApi
   */
  const CUSTOM_ELEMENTS_SCHEMA = {
      name: 'custom-elements'
  };
  /**
   * Defines a schema that allows any property on any element.
   *
   * This schema allows you to ignore the errors related to any unknown elements or properties in a
   * template. The usage of this schema is generally discouraged because it prevents useful validation
   * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.
   *
   * @publicApi
   */
  const NO_ERRORS_SCHEMA = {
      name: 'no-errors-schema'
  };
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Disallowed strings in the comment.
   *
   * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
   */
  const COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
  /**
   * Delimiter in the disallowed strings which needs to be wrapped with zero with character.
   */
  const COMMENT_DELIMITER = /(<|>)/;
  const COMMENT_DELIMITER_ESCAPED = '\u200B$1\u200B';
  /**
   * Escape the content of comment strings so that it can be safely inserted into a comment node.
   *
   * The issue is that HTML does not specify any way to escape comment end text inside the comment.
   * Consider: `<!-- The way you close a comment is with ">", and "->" at the beginning or by "-->" or
   * "--!>" at the end. -->`. Above the `"-->"` is meant to be text not an end to the comment. This
   * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)
   *
   * see: https://html.spec.whatwg.org/multipage/syntax.html#comments
   *
   * ```
   * div.innerHTML = div.innerHTML
   * ```
   *
   * One would expect that the above code would be safe to do, but it turns out that because comment
   * text is not escaped, the comment may contain text which will prematurely close the comment
   * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which
   * may contain such text and expect them to be safe.)
   *
   * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and
   * surrounding them with `_>_` where the `_` is a zero width space `\u200B`. The result is that if a
   * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the
   * text it will render normally but it will not cause the HTML parser to close/open the comment.
   *
   * @param value text to make safe for comment node by escaping the comment open/close character
   *     sequence.
   */
  function escapeCommentText(value) {
      return value.replace(COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function normalizeDebugBindingName(name) {
      // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
      name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
      return `ng-reflect-${name}`;
  }
  const CAMEL_CASE_REGEXP = /([A-Z])/g;
  function camelCaseToDashCase(input) {
      return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());
  }
  function normalizeDebugBindingValue(value) {
      try {
          // Limit the size of the value as otherwise the DOM just gets polluted.
          return value != null ? value.toString().slice(0, 30) : value;
      }
      catch (e) {
          return '[ERROR] Exception while trying to serialize the value';
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const defaultScheduler = (() => (typeof requestAnimationFrame !== 'undefined' &&
      requestAnimationFrame || // browser only
      setTimeout // everything else
  )
      .bind(_global))();
  /**
   *
   * @codeGenApi
   */
  function ÉµÉµresolveWindow(element) {
      return element.ownerDocument.defaultView;
  }
  /**
   *
   * @codeGenApi
   */
  function ÉµÉµresolveDocument(element) {
      return element.ownerDocument;
  }
  /**
   *
   * @codeGenApi
   */
  function ÉµÉµresolveBody(element) {
      return element.ownerDocument.body;
  }
  /**
   * The special delimiter we use to separate property names, prefixes, and suffixes
   * in property binding metadata. See storeBindingMetadata().
   *
   * We intentionally use the Unicode "REPLACEMENT CHARACTER" (U+FFFD) as a delimiter
   * because it is a very uncommon character that is unlikely to be part of a user's
   * property names or interpolation strings. If it is in fact used in a property
   * binding, DebugElement.properties will not return the correct value for that
   * binding. However, there should be no runtime effect for real applications.
   *
   * This character is typically rendered as a question mark inside of a diamond.
   * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)
   *
   */
  const INTERPOLATION_DELIMITER = `ï¿½`;
  /**
   * Unwrap a value which might be behind a closure (for forward declaration reasons).
   */
  function maybeUnwrapFn(value) {
      if (value instanceof Function) {
          return value();
      }
      else {
          return value;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /** Called when there are multiple component selectors that match a given node */
  function throwMultipleComponentError(tNode, first, second) {
      throw new RuntimeError(-300 /* MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` +
          `${stringifyForError(first)} and ` +
          `${stringifyForError(second)}`);
  }
  /** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */
  function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {
      const field = propName ? ` for '${propName}'` : '';
      let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${oldValue}'. Current value: '${currValue}'.`;
      if (creationMode) {
          msg +=
              ` It seems like the view has been created after its parent and its children have been dirty checked.` +
                  ` Has it been created in a change detection hook?`;
      }
      throw new RuntimeError(-100 /* EXPRESSION_CHANGED_AFTER_CHECKED */, msg);
  }
  function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
      const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);
      let oldValue = prefix, newValue = prefix;
      for (let i = 0; i < chunks.length; i++) {
          const slotIdx = rootIndex + i;
          oldValue += `${lView[slotIdx]}${chunks[i]}`;
          newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;
      }
      return { propName, oldValue, newValue };
  }
  /**
   * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:
   * - property name (for property bindings or interpolations)
   * - old and new values, enriched using information from metadata
   *
   * More information on the metadata storage format can be found in `storePropertyBindingMetadata`
   * function description.
   */
  function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
      const tData = lView[TVIEW].data;
      const metadata = tData[bindingIndex];
      if (typeof metadata === 'string') {
          // metadata for property interpolation
          if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
              return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
          }
          // metadata for property binding
          return { propName: metadata, oldValue, newValue };
      }
      // metadata is not available for this expression, check if this expression is a part of the
      // property interpolation by going from the current binding index left and look for a string that
      // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:
      // [..., 'idï¿½Prefix ï¿½ and ï¿½ suffix', null, null, null, ...]
      if (metadata === null) {
          let idx = bindingIndex - 1;
          while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {
              idx--;
          }
          const meta = tData[idx];
          if (typeof meta === 'string') {
              const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));
              // first interpolation delimiter separates property name from interpolation parts (in case of
              // property interpolations), so we subtract one from total number of found delimiters
              if (matches && (matches.length - 1) > bindingIndex - idx) {
                  return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
              }
          }
      }
      return { propName: undefined, oldValue, newValue };
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Flags for renderer-specific style modifiers.
   * @publicApi
   */
  var RendererStyleFlags2;
  (function (RendererStyleFlags2) {
      // TODO(misko): This needs to be refactored into a separate file so that it can be imported from
      // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails
      // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.
      /**
       * Marks a style as important.
       */
      RendererStyleFlags2[RendererStyleFlags2["Important"] = 1] = "Important";
      /**
       * Marks a style as using dash case naming (this-is-dash-case).
       */
      RendererStyleFlags2[RendererStyleFlags2["DashCase"] = 2] = "DashCase";
  })(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  let _icuContainerIterate;
  /**
   * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.
   */
  function icuContainerIterate(tIcuContainerNode, lView) {
      return _icuContainerIterate(tIcuContainerNode, lView);
  }
  /**
   * Ensures that `IcuContainerVisitor`'s implementation is present.
   *
   * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the
   * bundler to tree shake ICU logic and only load it if ICU instruction is executed.
   */
  function ensureIcuContainerVisitorLoaded(loader) {
      if (_icuContainerIterate === undefined) {
          // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it
          // can be inlined into call-site.
          _icuContainerIterate = loader();
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // Note: This hack is necessary so we don't erroneously get a circular dependency
  // failure based on types.
  const unusedValueExportToPlacateAjd$3 = 1;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of
   * that LContainer, which is an LView
   * @param lView the lView whose parent to get
   */
  function getLViewParent(lView) {
      ngDevMode && assertLView(lView);
      const parent = lView[PARENT];
      return isLContainer(parent) ? parent[PARENT] : parent;
  }
  /**
   * Retrieve the root view from any component or `LView` by walking the parent `LView` until
   * reaching the root `LView`.
   *
   * @param componentOrLView any component or `LView`
   */
  function getRootView(componentOrLView) {
      ngDevMode && assertDefined(componentOrLView, 'component');
      let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);
      while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {
          lView = getLViewParent(lView);
      }
      ngDevMode && assertLView(lView);
      return lView;
  }
  /**
   * Returns the `RootContext` instance that is associated with
   * the application where the target is situated. It does this by walking the parent views until it
   * gets to the root view, then getting the context off of that.
   *
   * @param viewOrComponent the `LView` or component to get the root context for.
   */
  function getRootContext(viewOrComponent) {
      const rootView = getRootView(viewOrComponent);
      ngDevMode &&
          assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');
      return rootView[CONTEXT];
  }
  /**
   * Gets the first `LContainer` in the LView or `null` if none exists.
   */
  function getFirstLContainer(lView) {
      return getNearestLContainer(lView[CHILD_HEAD]);
  }
  /**
   * Gets the next `LContainer` that is a sibling of the given container.
   */
  function getNextLContainer(container) {
      return getNearestLContainer(container[NEXT]);
  }
  function getNearestLContainer(viewOrContainer) {
      while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
          viewOrContainer = viewOrContainer[NEXT];
      }
      return viewOrContainer;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd$6 + unusedValueExportToPlacateAjd$8;
  /**
   * NOTE: for performance reasons, the possible actions are inlined within the function instead of
   * being passed as an argument.
   */
  function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
      // If this slot was allocated for a text node dynamically created by i18n, the text node itself
      // won't be created until i18nApply() in the update block, so this node should be skipped.
      // For more info, see "ICU expressions should work inside an ngTemplateOutlet inside an ngFor"
      // in `i18n_spec.ts`.
      if (lNodeToHandle != null) {
          let lContainer;
          let isComponent = false;
          // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is
          // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if
          // it has LContainer so that we can process all of those cases appropriately.
          if (isLContainer(lNodeToHandle)) {
              lContainer = lNodeToHandle;
          }
          else if (isLView(lNodeToHandle)) {
              isComponent = true;
              ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');
              lNodeToHandle = lNodeToHandle[HOST];
          }
          const rNode = unwrapRNode(lNodeToHandle);
          ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);
          if (action === 0 /* Create */ && parent !== null) {
              if (beforeNode == null) {
                  nativeAppendChild(renderer, parent, rNode);
              }
              else {
                  nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
              }
          }
          else if (action === 1 /* Insert */ && parent !== null) {
              nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
          }
          else if (action === 2 /* Detach */) {
              nativeRemoveNode(renderer, rNode, isComponent);
          }
          else if (action === 3 /* Destroy */) {
              ngDevMode && ngDevMode.rendererDestroyNode++;
              renderer.destroyNode(rNode);
          }
          if (lContainer != null) {
              applyContainer(renderer, action, lContainer, parent, beforeNode);
          }
      }
  }
  function createTextNode(renderer, value) {
      ngDevMode && ngDevMode.rendererCreateTextNode++;
      ngDevMode && ngDevMode.rendererSetText++;
      return isProceduralRenderer(renderer) ? renderer.createText(value) :
          renderer.createTextNode(value);
  }
  function updateTextNode(renderer, rNode, value) {
      ngDevMode && ngDevMode.rendererSetText++;
      isProceduralRenderer(renderer) ? renderer.setValue(rNode, value) : rNode.textContent = value;
  }
  function createCommentNode(renderer, value) {
      ngDevMode && ngDevMode.rendererCreateComment++;
      // isProceduralRenderer check is not needed because both `Renderer2` and `Renderer3` have the same
      // method name.
      return renderer.createComment(escapeCommentText(value));
  }
  /**
   * Creates a native element from a tag name, using a renderer.
   * @param renderer A renderer to use
   * @param name the tag name
   * @param namespace Optional namespace for element.
   * @returns the element created
   */
  function createElementNode(renderer, name, namespace) {
      ngDevMode && ngDevMode.rendererCreateElement++;
      if (isProceduralRenderer(renderer)) {
          return renderer.createElement(name, namespace);
      }
      else {
          const namespaceUri = namespace !== null ? getNamespaceUri(namespace) : null;
          return namespaceUri === null ? renderer.createElement(name) :
              renderer.createElementNS(namespaceUri, name);
      }
  }
  /**
   * Removes all DOM elements associated with a view.
   *
   * Because some root nodes of the view may be containers, we sometimes need
   * to propagate deeply into the nested containers to remove all elements in the
   * views beneath it.
   *
   * @param tView The `TView' of the `LView` from which elements should be added or removed
   * @param lView The view from which elements should be added or removed
   */
  function removeViewFromContainer(tView, lView) {
      const renderer = lView[RENDERER];
      applyView(tView, lView, renderer, 2 /* Detach */, null, null);
      lView[HOST] = null;
      lView[T_HOST] = null;
  }
  /**
   * Adds all DOM elements associated with a view.
   *
   * Because some root nodes of the view may be containers, we sometimes need
   * to propagate deeply into the nested containers to add all elements in the
   * views beneath it.
   *
   * @param tView The `TView' of the `LView` from which elements should be added or removed
   * @param parentTNode The `TNode` where the `LView` should be attached to.
   * @param renderer Current renderer to use for DOM manipulations.
   * @param lView The view from which elements should be added or removed
   * @param parentNativeNode The parent `RElement` where it should be inserted into.
   * @param beforeNode The node before which elements should be added, if insert mode
   */
  function addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
      lView[HOST] = parentNativeNode;
      lView[T_HOST] = parentTNode;
      applyView(tView, lView, renderer, 1 /* Insert */, parentNativeNode, beforeNode);
  }
  /**
   * Detach a `LView` from the DOM by detaching its nodes.
   *
   * @param tView The `TView' of the `LView` to be detached
   * @param lView the `LView` to be detached.
   */
  function renderDetachView(tView, lView) {
      applyView(tView, lView, lView[RENDERER], 2 /* Detach */, null, null);
  }
  /**
   * Traverses down and up the tree of views and containers to remove listeners and
   * call onDestroy callbacks.
   *
   * Notes:
   *  - Because it's used for onDestroy calls, it needs to be bottom-up.
   *  - Must process containers instead of their views to avoid splicing
   *  when views are destroyed and re-added.
   *  - Using a while loop because it's faster than recursion
   *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
   *
   *  @param rootView The view to destroy
   */
  function destroyViewTree(rootView) {
      // If the view has no children, we can clean it up and return early.
      let lViewOrLContainer = rootView[CHILD_HEAD];
      if (!lViewOrLContainer) {
          return cleanUpView(rootView[TVIEW], rootView);
      }
      while (lViewOrLContainer) {
          let next = null;
          if (isLView(lViewOrLContainer)) {
              // If LView, traverse down to child.
              next = lViewOrLContainer[CHILD_HEAD];
          }
          else {
              ngDevMode && assertLContainer(lViewOrLContainer);
              // If container, traverse down to its first LView.
              const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
              if (firstView)
                  next = firstView;
          }
          if (!next) {
              // Only clean up view when moving to the side or up, as destroy hooks
              // should be called in order from the bottom up.
              while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
                  if (isLView(lViewOrLContainer)) {
                      cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
                  }
                  lViewOrLContainer = lViewOrLContainer[PARENT];
              }
              if (lViewOrLContainer === null)
                  lViewOrLContainer = rootView;
              if (isLView(lViewOrLContainer)) {
                  cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
              }
              next = lViewOrLContainer && lViewOrLContainer[NEXT];
          }
          lViewOrLContainer = next;
      }
  }
  /**
   * Inserts a view into a container.
   *
   * This adds the view to the container's array of active views in the correct
   * position. It also adds the view's elements to the DOM if the container isn't a
   * root node of another view (in that case, the view's elements will be added when
   * the container's parent view is added later).
   *
   * @param tView The `TView' of the `LView` to insert
   * @param lView The view to insert
   * @param lContainer The container into which the view should be inserted
   * @param index Which index in the container to insert the child view into
   */
  function insertView(tView, lView, lContainer, index) {
      ngDevMode && assertLView(lView);
      ngDevMode && assertLContainer(lContainer);
      const indexInContainer = CONTAINER_HEADER_OFFSET + index;
      const containerLength = lContainer.length;
      if (index > 0) {
          // This is a new view, we need to add it to the children.
          lContainer[indexInContainer - 1][NEXT] = lView;
      }
      if (index < containerLength - CONTAINER_HEADER_OFFSET) {
          lView[NEXT] = lContainer[indexInContainer];
          addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
      }
      else {
          lContainer.push(lView);
          lView[NEXT] = null;
      }
      lView[PARENT] = lContainer;
      // track views where declaration and insertion points are different
      const declarationLContainer = lView[DECLARATION_LCONTAINER];
      if (declarationLContainer !== null && lContainer !== declarationLContainer) {
          trackMovedView(declarationLContainer, lView);
      }
      // notify query that a new view has been added
      const lQueries = lView[QUERIES];
      if (lQueries !== null) {
          lQueries.insertView(tView);
      }
      // Sets the attached flag
      lView[FLAGS] |= 128 /* Attached */;
  }
  /**
   * Track views created from the declaration container (TemplateRef) and inserted into a
   * different LContainer.
   */
  function trackMovedView(declarationContainer, lView) {
      ngDevMode && assertDefined(lView, 'LView required');
      ngDevMode && assertLContainer(declarationContainer);
      const movedViews = declarationContainer[MOVED_VIEWS];
      const insertedLContainer = lView[PARENT];
      ngDevMode && assertLContainer(insertedLContainer);
      const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];
      ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');
      const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
      ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');
      if (declaredComponentLView !== insertedComponentLView) {
          // At this point the declaration-component is not same as insertion-component; this means that
          // this is a transplanted view. Mark the declared lView as having transplanted views so that
          // those views can participate in CD.
          declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;
      }
      if (movedViews === null) {
          declarationContainer[MOVED_VIEWS] = [lView];
      }
      else {
          movedViews.push(lView);
      }
  }
  function detachMovedView(declarationContainer, lView) {
      ngDevMode && assertLContainer(declarationContainer);
      ngDevMode &&
          assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');
      const movedViews = declarationContainer[MOVED_VIEWS];
      const declarationViewIndex = movedViews.indexOf(lView);
      const insertionLContainer = lView[PARENT];
      ngDevMode && assertLContainer(insertionLContainer);
      // If the view was marked for refresh but then detached before it was checked (where the flag
      // would be cleared and the counter decremented), we need to decrement the view counter here
      // instead.
      if (lView[FLAGS] & 1024 /* RefreshTransplantedView */) {
          lView[FLAGS] &= ~1024 /* RefreshTransplantedView */;
          updateTransplantedViewCount(insertionLContainer, -1);
      }
      movedViews.splice(declarationViewIndex, 1);
  }
  /**
   * Detaches a view from a container.
   *
   * This method removes the view from the container's array of active views. It also
   * removes the view's elements from the DOM.
   *
   * @param lContainer The container from which to detach a view
   * @param removeIndex The index of the view to detach
   * @returns Detached LView instance.
   */
  function detachView(lContainer, removeIndex) {
      if (lContainer.length <= CONTAINER_HEADER_OFFSET)
          return;
      const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
      const viewToDetach = lContainer[indexInContainer];
      if (viewToDetach) {
          const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];
          if (declarationLContainer !== null && declarationLContainer !== lContainer) {
              detachMovedView(declarationLContainer, viewToDetach);
          }
          if (removeIndex > 0) {
              lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
          }
          const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
          removeViewFromContainer(viewToDetach[TVIEW], viewToDetach);
          // notify query that a view has been removed
          const lQueries = removedLView[QUERIES];
          if (lQueries !== null) {
              lQueries.detachView(removedLView[TVIEW]);
          }
          viewToDetach[PARENT] = null;
          viewToDetach[NEXT] = null;
          // Unsets the attached flag
          viewToDetach[FLAGS] &= ~128 /* Attached */;
      }
      return viewToDetach;
  }
  /**
   * A standalone function which destroys an LView,
   * conducting clean up (e.g. removing listeners, calling onDestroys).
   *
   * @param tView The `TView' of the `LView` to be destroyed
   * @param lView The view to be destroyed.
   */
  function destroyLView(tView, lView) {
      if (!(lView[FLAGS] & 256 /* Destroyed */)) {
          const renderer = lView[RENDERER];
          if (isProceduralRenderer(renderer) && renderer.destroyNode) {
              applyView(tView, lView, renderer, 3 /* Destroy */, null, null);
          }
          destroyViewTree(lView);
      }
  }
  /**
   * Calls onDestroys hooks for all directives and pipes in a given view and then removes all
   * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks
   * can be propagated to @Output listeners.
   *
   * @param tView `TView` for the `LView` to clean up.
   * @param lView The LView to clean up
   */
  function cleanUpView(tView, lView) {
      if (!(lView[FLAGS] & 256 /* Destroyed */)) {
          // Usually the Attached flag is removed when the view is detached from its parent, however
          // if it's a root view, the flag won't be unset hence why we're also removing on destroy.
          lView[FLAGS] &= ~128 /* Attached */;
          // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook
          // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If
          // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.
          // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is
          // really more of an "afterDestroy" hook if you think about it.
          lView[FLAGS] |= 256 /* Destroyed */;
          executeOnDestroys(tView, lView);
          processCleanups(tView, lView);
          // For component views only, the local renderer is destroyed at clean up time.
          if (lView[TVIEW].type === 1 /* Component */ && isProceduralRenderer(lView[RENDERER])) {
              ngDevMode && ngDevMode.rendererDestroy++;
              lView[RENDERER].destroy();
          }
          const declarationContainer = lView[DECLARATION_LCONTAINER];
          // we are dealing with an embedded view that is still inserted into a container
          if (declarationContainer !== null && isLContainer(lView[PARENT])) {
              // and this is a projected view
              if (declarationContainer !== lView[PARENT]) {
                  detachMovedView(declarationContainer, lView);
              }
              // For embedded views still attached to a container: remove query result from this view.
              const lQueries = lView[QUERIES];
              if (lQueries !== null) {
                  lQueries.detachView(tView);
              }
          }
      }
  }
  /** Removes listeners and unsubscribes from output subscriptions */
  function processCleanups(tView, lView) {
      const tCleanup = tView.cleanup;
      const lCleanup = lView[CLEANUP];
      // `LCleanup` contains both share information with `TCleanup` as well as instance specific
      // information appended at the end. We need to know where the end of the `TCleanup` information
      // is, and we track this with `lastLCleanupIndex`.
      let lastLCleanupIndex = -1;
      if (tCleanup !== null) {
          for (let i = 0; i < tCleanup.length - 1; i += 2) {
              if (typeof tCleanup[i] === 'string') {
                  // This is a native DOM listener
                  const idxOrTargetGetter = tCleanup[i + 1];
                  const target = typeof idxOrTargetGetter === 'function' ?
                      idxOrTargetGetter(lView) :
                      unwrapRNode(lView[idxOrTargetGetter]);
                  const listener = lCleanup[lastLCleanupIndex = tCleanup[i + 2]];
                  const useCaptureOrSubIdx = tCleanup[i + 3];
                  if (typeof useCaptureOrSubIdx === 'boolean') {
                      // native DOM listener registered with Renderer3
                      target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);
                  }
                  else {
                      if (useCaptureOrSubIdx >= 0) {
                          // unregister
                          lCleanup[lastLCleanupIndex = useCaptureOrSubIdx]();
                      }
                      else {
                          // Subscription
                          lCleanup[lastLCleanupIndex = -useCaptureOrSubIdx].unsubscribe();
                      }
                  }
                  i += 2;
              }
              else {
                  // This is a cleanup function that is grouped with the index of its context
                  const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];
                  tCleanup[i].call(context);
              }
          }
      }
      if (lCleanup !== null) {
          for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {
              const instanceCleanupFn = lCleanup[i];
              ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');
              instanceCleanupFn();
          }
          lView[CLEANUP] = null;
      }
  }
  /** Calls onDestroy hooks for this view */
  function executeOnDestroys(tView, lView) {
      let destroyHooks;
      if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
          for (let i = 0; i < destroyHooks.length; i += 2) {
              const context = lView[destroyHooks[i]];
              // Only call the destroy hook if the context has been requested.
              if (!(context instanceof NodeInjectorFactory)) {
                  const toCall = destroyHooks[i + 1];
                  if (Array.isArray(toCall)) {
                      for (let j = 0; j < toCall.length; j += 2) {
                          const callContext = context[toCall[j]];
                          const hook = toCall[j + 1];
                          profiler(4 /* LifecycleHookStart */, callContext, hook);
                          try {
                              hook.call(callContext);
                          }
                          finally {
                              profiler(5 /* LifecycleHookEnd */, callContext, hook);
                          }
                      }
                  }
                  else {
                      profiler(4 /* LifecycleHookStart */, context, toCall);
                      try {
                          toCall.call(context);
                      }
                      finally {
                          profiler(5 /* LifecycleHookEnd */, context, toCall);
                      }
                  }
              }
          }
      }
  }
  /**
   * Returns a native element if a node can be inserted into the given parent.
   *
   * There are two reasons why we may not be able to insert a element immediately.
   * - Projection: When creating a child content element of a component, we have to skip the
   *   insertion because the content of a component will be projected.
   *   `<component><content>delayed due to projection</content></component>`
   * - Parent container is disconnected: This can happen when we are inserting a view into
   *   parent container, which itself is disconnected. For example the parent container is part
   *   of a View which has not be inserted or is made for projection but has not been inserted
   *   into destination.
   *
   * @param tView: Current `TView`.
   * @param tNode: `TNode` for which we wish to retrieve render parent.
   * @param lView: Current `LView`.
   */
  function getParentRElement(tView, tNode, lView) {
      return getClosestRElement(tView, tNode.parent, lView);
  }
  /**
   * Get closest `RElement` or `null` if it can't be found.
   *
   * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.
   * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).
   * If `TNode` is `null` then return host `RElement`:
   *   - return `null` if projection
   *   - return `null` if parent container is disconnected (we have no parent.)
   *
   * @param tView: Current `TView`.
   * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is
   *     needed).
   * @param lView: Current `LView`.
   * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)
   */
  function getClosestRElement(tView, tNode, lView) {
      let parentTNode = tNode;
      // Skip over element and ICU containers as those are represented by a comment node and
      // can't be used as a render parent.
      while (parentTNode !== null &&
          (parentTNode.type & (8 /* ElementContainer */ | 32 /* Icu */))) {
          tNode = parentTNode;
          parentTNode = tNode.parent;
      }
      // If the parent tNode is null, then we are inserting across views: either into an embedded view
      // or a component view.
      if (parentTNode === null) {
          // We are inserting a root element of the component view into the component host element and
          // it should always be eager.
          return lView[HOST];
      }
      else {
          ngDevMode && assertTNodeType(parentTNode, 3 /* AnyRNode */ | 4 /* Container */);
          if (parentTNode.flags & 2 /* isComponentHost */) {
              ngDevMode && assertTNodeForLView(parentTNode, lView);
              const encapsulation = tView.data[parentTNode.directiveStart].encapsulation;
              // We've got a parent which is an element in the current view. We just need to verify if the
              // parent element is not a component. Component's content nodes are not inserted immediately
              // because they will be projected, and so doing insert at this point would be wasteful.
              // Since the projection would then move it to its final destination. Note that we can't
              // make this assumption when using the Shadow DOM, because the native projection placeholders
              // (<content> or <slot>) have to be in place as elements are being inserted.
              if (encapsulation === ViewEncapsulation$1.None ||
                  encapsulation === ViewEncapsulation$1.Emulated) {
                  return null;
              }
          }
          return getNativeByTNode(parentTNode, lView);
      }
  }
  /**
   * Inserts a native node before another native node for a given parent using {@link Renderer3}.
   * This is a utility function that can be used when native nodes were determined - it abstracts an
   * actual renderer being used.
   */
  function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
      ngDevMode && ngDevMode.rendererInsertBefore++;
      if (isProceduralRenderer(renderer)) {
          renderer.insertBefore(parent, child, beforeNode, isMove);
      }
      else {
          parent.insertBefore(child, beforeNode, isMove);
      }
  }
  function nativeAppendChild(renderer, parent, child) {
      ngDevMode && ngDevMode.rendererAppendChild++;
      ngDevMode && assertDefined(parent, 'parent node must be defined');
      if (isProceduralRenderer(renderer)) {
          renderer.appendChild(parent, child);
      }
      else {
          parent.appendChild(child);
      }
  }
  function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
      if (beforeNode !== null) {
          nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
      }
      else {
          nativeAppendChild(renderer, parent, child);
      }
  }
  /** Removes a node from the DOM given its native parent. */
  function nativeRemoveChild(renderer, parent, child, isHostElement) {
      if (isProceduralRenderer(renderer)) {
          renderer.removeChild(parent, child, isHostElement);
      }
      else {
          parent.removeChild(child);
      }
  }
  /**
   * Returns a native parent of a given native node.
   */
  function nativeParentNode(renderer, node) {
      return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode);
  }
  /**
   * Returns a native sibling of a given native node.
   */
  function nativeNextSibling(renderer, node) {
      return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;
  }
  /**
   * Find a node in front of which `currentTNode` should be inserted.
   *
   * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
   * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.
   *
   * @param parentTNode parent `TNode`
   * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
   * @param lView current `LView`
   */
  function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
      return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
  }
  /**
   * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into
   * account)
   *
   * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
   * does not take `TNode.insertBeforeIndex` into account.
   *
   * @param parentTNode parent `TNode`
   * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
   * @param lView current `LView`
   */
  function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
      if (parentTNode.type & (8 /* ElementContainer */ | 32 /* Icu */)) {
          return getNativeByTNode(parentTNode, lView);
      }
      return null;
  }
  /**
   * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.
   *
   * This function will only be set if i18n code runs.
   */
  let _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
  /**
   * Tree shakable boundary for `processI18nInsertBefore` function.
   *
   * This function will only be set if i18n code runs.
   */
  let _processI18nInsertBefore;
  function setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {
      _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;
      _processI18nInsertBefore = processI18nInsertBefore;
  }
  /**
   * Appends the `child` native node (or a collection of nodes) to the `parent`.
   *
   * @param tView The `TView' to be appended
   * @param lView The current LView
   * @param childRNode The native child (or children) that should be appended
   * @param childTNode The TNode of the child element
   */
  function appendChild(tView, lView, childRNode, childTNode) {
      const parentRNode = getParentRElement(tView, childTNode, lView);
      const renderer = lView[RENDERER];
      const parentTNode = childTNode.parent || lView[T_HOST];
      const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);
      if (parentRNode != null) {
          if (Array.isArray(childRNode)) {
              for (let i = 0; i < childRNode.length; i++) {
                  nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
              }
          }
          else {
              nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
          }
      }
      _processI18nInsertBefore !== undefined &&
          _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
  }
  /**
   * Returns the first native node for a given LView, starting from the provided TNode.
   *
   * Native nodes are returned in the order in which those appear in the native tree (DOM).
   */
  function getFirstNativeNode(lView, tNode) {
      if (tNode !== null) {
          ngDevMode &&
              assertTNodeType(tNode, 3 /* AnyRNode */ | 12 /* AnyContainer */ | 32 /* Icu */ | 16 /* Projection */);
          const tNodeType = tNode.type;
          if (tNodeType & 3 /* AnyRNode */) {
              return getNativeByTNode(tNode, lView);
          }
          else if (tNodeType & 4 /* Container */) {
              return getBeforeNodeForView(-1, lView[tNode.index]);
          }
          else if (tNodeType & 8 /* ElementContainer */) {
              const elIcuContainerChild = tNode.child;
              if (elIcuContainerChild !== null) {
                  return getFirstNativeNode(lView, elIcuContainerChild);
              }
              else {
                  const rNodeOrLContainer = lView[tNode.index];
                  if (isLContainer(rNodeOrLContainer)) {
                      return getBeforeNodeForView(-1, rNodeOrLContainer);
                  }
                  else {
                      return unwrapRNode(rNodeOrLContainer);
                  }
              }
          }
          else if (tNodeType & 32 /* Icu */) {
              let nextRNode = icuContainerIterate(tNode, lView);
              let rNode = nextRNode();
              // If the ICU container has no nodes, than we use the ICU anchor as the node.
              return rNode || unwrapRNode(lView[tNode.index]);
          }
          else {
              const projectionNodes = getProjectionNodes(lView, tNode);
              if (projectionNodes !== null) {
                  if (Array.isArray(projectionNodes)) {
                      return projectionNodes[0];
                  }
                  const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
                  ngDevMode && assertParentView(parentView);
                  return getFirstNativeNode(parentView, projectionNodes);
              }
              else {
                  return getFirstNativeNode(lView, tNode.next);
              }
          }
      }
      return null;
  }
  function getProjectionNodes(lView, tNode) {
      if (tNode !== null) {
          const componentView = lView[DECLARATION_COMPONENT_VIEW];
          const componentHost = componentView[T_HOST];
          const slotIdx = tNode.projection;
          ngDevMode && assertProjectionSlots(lView);
          return componentHost.projection[slotIdx];
      }
      return null;
  }
  function getBeforeNodeForView(viewIndexInContainer, lContainer) {
      const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;
      if (nextViewIndex < lContainer.length) {
          const lView = lContainer[nextViewIndex];
          const firstTNodeOfView = lView[TVIEW].firstChild;
          if (firstTNodeOfView !== null) {
              return getFirstNativeNode(lView, firstTNodeOfView);
          }
      }
      return lContainer[NATIVE];
  }
  /**
   * Removes a native node itself using a given renderer. To remove the node we are looking up its
   * parent from the native tree as not all platforms / browsers support the equivalent of
   * node.remove().
   *
   * @param renderer A renderer to be used
   * @param rNode The native node that should be removed
   * @param isHostElement A flag indicating if a node to be removed is a host of a component.
   */
  function nativeRemoveNode(renderer, rNode, isHostElement) {
      ngDevMode && ngDevMode.rendererRemoveNode++;
      const nativeParent = nativeParentNode(renderer, rNode);
      if (nativeParent) {
          nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
      }
  }
  /**
   * Performs the operation of `action` on the node. Typically this involves inserting or removing
   * nodes on the LView or projection boundary.
   */
  function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
      while (tNode != null) {
          ngDevMode && assertTNodeForLView(tNode, lView);
          ngDevMode &&
              assertTNodeType(tNode, 3 /* AnyRNode */ | 12 /* AnyContainer */ | 16 /* Projection */ | 32 /* Icu */);
          const rawSlotValue = lView[tNode.index];
          const tNodeType = tNode.type;
          if (isProjection) {
              if (action === 0 /* Create */) {
                  rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
                  tNode.flags |= 4 /* isProjected */;
              }
          }
          if ((tNode.flags & 64 /* isDetached */) !== 64 /* isDetached */) {
              if (tNodeType & 8 /* ElementContainer */) {
                  applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
                  applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
              }
              else if (tNodeType & 32 /* Icu */) {
                  const nextRNode = icuContainerIterate(tNode, lView);
                  let rNode;
                  while (rNode = nextRNode()) {
                      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
                  }
                  applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
              }
              else if (tNodeType & 16 /* Projection */) {
                  applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
              }
              else {
                  ngDevMode && assertTNodeType(tNode, 3 /* AnyRNode */ | 4 /* Container */);
                  applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
              }
          }
          tNode = isProjection ? tNode.projectionNext : tNode.next;
      }
  }
  function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
      applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
  }
  /**
   * `applyProjection` performs operation on the projection.
   *
   * Inserting a projection requires us to locate the projected nodes from the parent component. The
   * complication is that those nodes themselves could be re-projected from their parent component.
   *
   * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed
   * @param lView The `LView` which needs to be inserted, detached, destroyed.
   * @param tProjectionNode node to project
   */
  function applyProjection(tView, lView, tProjectionNode) {
      const renderer = lView[RENDERER];
      const parentRNode = getParentRElement(tView, tProjectionNode, lView);
      const parentTNode = tProjectionNode.parent || lView[T_HOST];
      let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
      applyProjectionRecursive(renderer, 0 /* Create */, lView, tProjectionNode, parentRNode, beforeNode);
  }
  /**
   * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,
   * detach, destroy)
   *
   * Inserting a projection requires us to locate the projected nodes from the parent component. The
   * complication is that those nodes themselves could be re-projected from their parent component.
   *
   * @param renderer Render to use
   * @param action action to perform (insert, detach, destroy)
   * @param lView The LView which needs to be inserted, detached, destroyed.
   * @param tProjectionNode node to project
   * @param parentRElement parent DOM element for insertion/removal.
   * @param beforeNode Before which node the insertions should happen.
   */
  function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
      const componentLView = lView[DECLARATION_COMPONENT_VIEW];
      const componentNode = componentLView[T_HOST];
      ngDevMode &&
          assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');
      const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];
      if (Array.isArray(nodeToProjectOrRNodes)) {
          // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we
          // need to support passing projectable nodes, so we cheat and put them in the TNode
          // of the Host TView. (Yes we put instance info at the T Level). We can get away with it
          // because we know that that TView is not shared and therefore it will not be a problem.
          // This should be refactored and cleaned up.
          for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {
              const rNode = nodeToProjectOrRNodes[i];
              applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
          }
      }
      else {
          let nodeToProject = nodeToProjectOrRNodes;
          const projectedComponentLView = componentLView[PARENT];
          applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
      }
  }
  /**
   * `applyContainer` performs an operation on the container and its views as specified by
   * `action` (insert, detach, destroy)
   *
   * Inserting a Container is complicated by the fact that the container may have Views which
   * themselves have containers or projections.
   *
   * @param renderer Renderer to use
   * @param action action to perform (insert, detach, destroy)
   * @param lContainer The LContainer which needs to be inserted, detached, destroyed.
   * @param parentRElement parent DOM element for insertion/removal.
   * @param beforeNode Before which node the insertions should happen.
   */
  function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
      ngDevMode && assertLContainer(lContainer);
      const anchor = lContainer[NATIVE]; // LContainer has its own before node.
      const native = unwrapRNode(lContainer);
      // An LContainer can be created dynamically on any node by injecting ViewContainerRef.
      // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor
      // node (comment in the DOM) that will be different from the LContainer's host node. In this
      // particular case we need to execute action on 2 nodes:
      // - container's host node (this is done in the executeActionOnElementOrContainer)
      // - container's host node (this is done here)
      if (anchor !== native) {
          // This is very strange to me (Misko). I would expect that the native is same as anchor. I
          // don't see a reason why they should be different, but they are.
          //
          // If they are we need to process the second anchor as well.
          applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
      }
      for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
          const lView = lContainer[i];
          applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
      }
  }
  /**
   * Writes class/style to element.
   *
   * @param renderer Renderer to use.
   * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)
   * @param rNode The Node to write to.
   * @param prop Property to write to. This would be the class/style name.
   * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add
   *        otherwise).
   */
  function applyStyling(renderer, isClassBased, rNode, prop, value) {
      const isProcedural = isProceduralRenderer(renderer);
      if (isClassBased) {
          // We actually want JS true/false here because any truthy value should add the class
          if (!value) {
              ngDevMode && ngDevMode.rendererRemoveClass++;
              if (isProcedural) {
                  renderer.removeClass(rNode, prop);
              }
              else {
                  rNode.classList.remove(prop);
              }
          }
          else {
              ngDevMode && ngDevMode.rendererAddClass++;
              if (isProcedural) {
                  renderer.addClass(rNode, prop);
              }
              else {
                  ngDevMode && assertDefined(rNode.classList, 'HTMLElement expected');
                  rNode.classList.add(prop);
              }
          }
      }
      else {
          let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;
          if (value == null /** || value === undefined */) {
              ngDevMode && ngDevMode.rendererRemoveStyle++;
              if (isProcedural) {
                  renderer.removeStyle(rNode, prop, flags);
              }
              else {
                  rNode.style.removeProperty(prop);
              }
          }
          else {
              // A value is important if it ends with `!important`. The style
              // parser strips any semicolons at the end of the value.
              const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;
              if (isImportant) {
                  // !important has to be stripped from the value for it to be valid.
                  value = value.slice(0, -10);
                  flags |= RendererStyleFlags2.Important;
              }
              ngDevMode && ngDevMode.rendererSetStyle++;
              if (isProcedural) {
                  renderer.setStyle(rNode, prop, value, flags);
              }
              else {
                  ngDevMode && assertDefined(rNode.style, 'HTMLElement expected');
                  rNode.style.setProperty(prop, value, isImportant ? 'important' : '');
              }
          }
      }
  }
  /**
   * Write `cssText` to `RElement`.
   *
   * This function does direct write without any reconciliation. Used for writing initial values, so
   * that static styling values do not pull in the style parser.
   *
   * @param renderer Renderer to use
   * @param element The element which needs to be updated.
   * @param newValue The new class list to write.
   */
  function writeDirectStyle(renderer, element, newValue) {
      ngDevMode && assertString(newValue, '\'newValue\' should be a string');
      if (isProceduralRenderer(renderer)) {
          renderer.setAttribute(element, 'style', newValue);
      }
      else {
          element.style.cssText = newValue;
      }
      ngDevMode && ngDevMode.rendererSetStyle++;
  }
  /**
   * Write `className` to `RElement`.
   *
   * This function does direct write without any reconciliation. Used for writing initial values, so
   * that static styling values do not pull in the style parser.
   *
   * @param renderer Renderer to use
   * @param element The element which needs to be updated.
   * @param newValue The new class list to write.
   */
  function writeDirectClass(renderer, element, newValue) {
      ngDevMode && assertString(newValue, '\'newValue\' should be a string');
      if (isProceduralRenderer(renderer)) {
          if (newValue === '') {
              // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.
              renderer.removeAttribute(element, 'class');
          }
          else {
              renderer.setAttribute(element, 'class', newValue);
          }
      }
      else {
          element.className = newValue;
      }
      ngDevMode && ngDevMode.rendererSetClassName++;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Returns an index of `classToSearch` in `className` taking token boundaries into account.
   *
   * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)
   *
   * @param className A string containing classes (whitespace separated)
   * @param classToSearch A class name to locate
   * @param startingIndex Starting location of search
   * @returns an index of the located class (or -1 if not found)
   */
  function classIndexOf(className, classToSearch, startingIndex) {
      ngDevMode && assertNotEqual(classToSearch, '', 'can not look for "" string.');
      let end = className.length;
      while (true) {
          const foundIndex = className.indexOf(classToSearch, startingIndex);
          if (foundIndex === -1)
              return foundIndex;
          if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* SPACE */) {
              // Ensure that it has leading whitespace
              const length = classToSearch.length;
              if (foundIndex + length === end ||
                  className.charCodeAt(foundIndex + length) <= 32 /* SPACE */) {
                  // Ensure that it has trailing whitespace
                  return foundIndex;
              }
          }
          // False positive, keep searching from where we left off.
          startingIndex = foundIndex + 1;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$3;
  const NG_TEMPLATE_SELECTOR = 'ng-template';
  /**
   * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)
   *
   * @param attrs `TAttributes` to search through.
   * @param cssClassToMatch class to match (lowercase)
   * @param isProjectionMode Whether or not class matching should look into the attribute `class` in
   *    addition to the `AttributeMarker.Classes`.
   */
  function isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {
      // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.
      // It is strange to me that sometimes the class information comes in form of `class` attribute
      // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine
      // if that is the right behavior.
      ngDevMode &&
          assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');
      let i = 0;
      while (i < attrs.length) {
          let item = attrs[i++];
          if (isProjectionMode && item === 'class') {
              item = attrs[i];
              if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {
                  return true;
              }
          }
          else if (item === 1 /* Classes */) {
              // We found the classes section. Start searching for the class.
              while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {
                  // while we have strings
                  if (item.toLowerCase() === cssClassToMatch)
                      return true;
              }
              return false;
          }
      }
      return false;
  }
  /**
   * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).
   *
   * @param tNode current TNode
   */
  function isInlineTemplate(tNode) {
      return tNode.type === 4 /* Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;
  }
  /**
   * Function that checks whether a given tNode matches tag-based selector and has a valid type.
   *
   * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular
   * directive matching mode:
   * - in the "directive matching" mode we do _not_ take TContainer's tagName into account if it is
   * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a
   * tag name was extracted from * syntax so we would match the same directive twice);
   * - in the "projection" mode, we use a tag name potentially extracted from the * syntax processing
   * (applicable to TNodeType.Container only).
   */
  function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
      const tagNameToCompare = tNode.type === 4 /* Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
      return currentSelector === tagNameToCompare;
  }
  /**
   * A utility function to match an Ivy node static data against a simple CSS selector
   *
   * @param node static data of the node to match
   * @param selector The selector to try matching against the node.
   * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing
   * directive matching.
   * @returns true if node matches the selector.
   */
  function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
      ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');
      let mode = 4 /* ELEMENT */;
      const nodeAttrs = tNode.attrs || [];
      // Find the index of first attribute that has no value, only a name.
      const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);
      // When processing ":not" selectors, we skip to the next ":not" if the
      // current one doesn't match
      let skipToNextSelector = false;
      for (let i = 0; i < selector.length; i++) {
          const current = selector[i];
          if (typeof current === 'number') {
              // If we finish processing a :not selector and it hasn't failed, return false
              if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
                  return false;
              }
              // If we are skipping to the next :not() and this mode flag is positive,
              // it's a part of the current :not() selector, and we should keep skipping
              if (skipToNextSelector && isPositive(current))
                  continue;
              skipToNextSelector = false;
              mode = current | (mode & 1 /* NOT */);
              continue;
          }
          if (skipToNextSelector)
              continue;
          if (mode & 4 /* ELEMENT */) {
              mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;
              if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||
                  current === '' && selector.length === 1) {
                  if (isPositive(mode))
                      return false;
                  skipToNextSelector = true;
              }
          }
          else {
              const selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];
              // special case for matching against classes when a tNode has been instantiated with
              // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])
              if ((mode & 8 /* CLASS */) && tNode.attrs !== null) {
                  if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {
                      if (isPositive(mode))
                          return false;
                      skipToNextSelector = true;
                  }
                  continue;
              }
              const attrName = (mode & 8 /* CLASS */) ? 'class' : current;
              const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);
              if (attrIndexInNode === -1) {
                  if (isPositive(mode))
                      return false;
                  skipToNextSelector = true;
                  continue;
              }
              if (selectorAttrValue !== '') {
                  let nodeAttrValue;
                  if (attrIndexInNode > nameOnlyMarkerIdx) {
                      nodeAttrValue = '';
                  }
                  else {
                      ngDevMode &&
                          assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');
                      // we lowercase the attribute value to be able to match
                      // selectors without case-sensitivity
                      // (selectors are already in lowercase when generated)
                      nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
                  }
                  const compareAgainstClassName = mode & 8 /* CLASS */ ? nodeAttrValue : null;
                  if (compareAgainstClassName &&
                      classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 ||
                      mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {
                      if (isPositive(mode))
                          return false;
                      skipToNextSelector = true;
                  }
              }
          }
      }
      return isPositive(mode) || skipToNextSelector;
  }
  function isPositive(mode) {
      return (mode & 1 /* NOT */) === 0;
  }
  /**
   * Examines the attribute's definition array for a node to find the index of the
   * attribute that matches the given `name`.
   *
   * NOTE: This will not match namespaced attributes.
   *
   * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.
   * The following table summarizes which types of attributes we attempt to match:
   *
   * ===========================================================================================================
   * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n
   * Attributes
   * ===========================================================================================================
   * Inline + Projection     | YES               | YES                 | NO                  | YES
   * -----------------------------------------------------------------------------------------------------------
   * Inline + Directive      | NO                | NO                  | YES                 | NO
   * -----------------------------------------------------------------------------------------------------------
   * Non-inline + Projection | YES               | YES                 | NO                  | YES
   * -----------------------------------------------------------------------------------------------------------
   * Non-inline + Directive  | YES               | YES                 | NO                  | YES
   * ===========================================================================================================
   *
   * @param name the name of the attribute to find
   * @param attrs the attribute array to examine
   * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)
   * rather than a manually expanded template node (e.g `<ng-template>`).
   * @param isProjectionMode true if we are matching against content projection otherwise we are
   * matching against directives.
   */
  function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {
      if (attrs === null)
          return -1;
      let i = 0;
      if (isProjectionMode || !isInlineTemplate) {
          let bindingsMode = false;
          while (i < attrs.length) {
              const maybeAttrName = attrs[i];
              if (maybeAttrName === name) {
                  return i;
              }
              else if (maybeAttrName === 3 /* Bindings */ || maybeAttrName === 6 /* I18n */) {
                  bindingsMode = true;
              }
              else if (maybeAttrName === 1 /* Classes */ || maybeAttrName === 2 /* Styles */) {
                  let value = attrs[++i];
                  // We should skip classes here because we have a separate mechanism for
                  // matching classes in projection mode.
                  while (typeof value === 'string') {
                      value = attrs[++i];
                  }
                  continue;
              }
              else if (maybeAttrName === 4 /* Template */) {
                  // We do not care about Template attributes in this scenario.
                  break;
              }
              else if (maybeAttrName === 0 /* NamespaceURI */) {
                  // Skip the whole namespaced attribute and value. This is by design.
                  i += 4;
                  continue;
              }
              // In binding mode there are only names, rather than name-value pairs.
              i += bindingsMode ? 1 : 2;
          }
          // We did not match the attribute
          return -1;
      }
      else {
          return matchTemplateAttribute(attrs, name);
      }
  }
  function isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {
      for (let i = 0; i < selector.length; i++) {
          if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
              return true;
          }
      }
      return false;
  }
  function getProjectAsAttrValue(tNode) {
      const nodeAttrs = tNode.attrs;
      if (nodeAttrs != null) {
          const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* ProjectAs */);
          // only check for ngProjectAs in attribute names, don't accidentally match attribute's value
          // (attribute names are stored at even indexes)
          if ((ngProjectAsAttrIdx & 1) === 0) {
              return nodeAttrs[ngProjectAsAttrIdx + 1];
          }
      }
      return null;
  }
  function getNameOnlyMarkerIndex(nodeAttrs) {
      for (let i = 0; i < nodeAttrs.length; i++) {
          const nodeAttr = nodeAttrs[i];
          if (isNameOnlyAttributeMarker(nodeAttr)) {
              return i;
          }
      }
      return nodeAttrs.length;
  }
  function matchTemplateAttribute(attrs, name) {
      let i = attrs.indexOf(4 /* Template */);
      if (i > -1) {
          i++;
          while (i < attrs.length) {
              const attr = attrs[i];
              // Return in case we checked all template attrs and are switching to the next section in the
              // attrs array (that starts with a number that represents an attribute marker).
              if (typeof attr === 'number')
                  return -1;
              if (attr === name)
                  return i;
              i++;
          }
      }
      return -1;
  }
  /**
   * Checks whether a selector is inside a CssSelectorList
   * @param selector Selector to be checked.
   * @param list List in which to look for the selector.
   */
  function isSelectorInSelectorList(selector, list) {
      selectorListLoop: for (let i = 0; i < list.length; i++) {
          const currentSelectorInList = list[i];
          if (selector.length !== currentSelectorInList.length) {
              continue;
          }
          for (let j = 0; j < selector.length; j++) {
              if (selector[j] !== currentSelectorInList[j]) {
                  continue selectorListLoop;
              }
          }
          return true;
      }
      return false;
  }
  function maybeWrapInNotSelector(isNegativeMode, chunk) {
      return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;
  }
  function stringifyCSSSelector(selector) {
      let result = selector[0];
      let i = 1;
      let mode = 2 /* ATTRIBUTE */;
      let currentChunk = '';
      let isNegativeMode = false;
      while (i < selector.length) {
          let valueOrMarker = selector[i];
          if (typeof valueOrMarker === 'string') {
              if (mode & 2 /* ATTRIBUTE */) {
                  const attrValue = selector[++i];
                  currentChunk +=
                      '[' + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : '') + ']';
              }
              else if (mode & 8 /* CLASS */) {
                  currentChunk += '.' + valueOrMarker;
              }
              else if (mode & 4 /* ELEMENT */) {
                  currentChunk += ' ' + valueOrMarker;
              }
          }
          else {
              //
              // Append current chunk to the final result in case we come across SelectorFlag, which
              // indicates that the previous section of a selector is over. We need to accumulate content
              // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.
              // ```
              //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']
              // ```
              // should be transformed to `.classA :not(.classB .classC)`.
              //
              // Note: for negative selector part, we accumulate content between flags until we find the
              // next negative flag. This is needed to support a case where `:not()` rule contains more than
              // one chunk, e.g. the following selector:
              // ```
              //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']
              // ```
              // should be stringified to `:not(p.foo) :not(.bar)`
              //
              if (currentChunk !== '' && !isPositive(valueOrMarker)) {
                  result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
                  currentChunk = '';
              }
              mode = valueOrMarker;
              // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
              // mode is maintained for remaining chunks of a selector.
              isNegativeMode = isNegativeMode || !isPositive(mode);
          }
          i++;
      }
      if (currentChunk !== '') {
          result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
      }
      return result;
  }
  /**
   * Generates string representation of CSS selector in parsed form.
   *
   * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing
   * additional parsing at runtime (for example, for directive matching). However in some cases (for
   * example, while bootstrapping a component), a string version of the selector is required to query
   * for the host element on the page. This function takes the parsed form of a selector and returns
   * its string representation.
   *
   * @param selectorList selector in parsed form
   * @returns string representation of a given selector
   */
  function stringifyCSSSelectorList(selectorList) {
      return selectorList.map(stringifyCSSSelector).join(',');
  }
  /**
   * Extracts attributes and classes information from a given CSS selector.
   *
   * This function is used while creating a component dynamically. In this case, the host element
   * (that is created dynamically) should contain attributes and classes specified in component's CSS
   * selector.
   *
   * @param selector CSS selector in parsed form (in a form of array)
   * @returns object with `attrs` and `classes` fields that contain extracted information
   */
  function extractAttrsAndClassesFromSelector(selector) {
      const attrs = [];
      const classes = [];
      let i = 1;
      let mode = 2 /* ATTRIBUTE */;
      while (i < selector.length) {
          let valueOrMarker = selector[i];
          if (typeof valueOrMarker === 'string') {
              if (mode === 2 /* ATTRIBUTE */) {
                  if (valueOrMarker !== '') {
                      attrs.push(valueOrMarker, selector[++i]);
                  }
              }
              else if (mode === 8 /* CLASS */) {
                  classes.push(valueOrMarker);
              }
          }
          else {
              // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
              // mode is maintained for remaining chunks of a selector. Since attributes and classes are
              // extracted only for "positive" part of the selector, we can stop here.
              if (!isPositive(mode))
                  break;
              mode = valueOrMarker;
          }
          i++;
      }
      return { attrs, classes };
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /** A special value which designates that a value has not changed. */
  const NO_CHANGE = (typeof ngDevMode === 'undefined' || ngDevMode) ? { __brand__: 'NO_CHANGE' } : {};
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Advances to an element for later binding instructions.
   *
   * Used in conjunction with instructions like {@link property} to act on elements with specified
   * indices, for example those created with {@link element} or {@link elementStart}.
   *
   * ```ts
   * (rf: RenderFlags, ctx: any) => {
   *   if (rf & 1) {
   *     text(0, 'Hello');
   *     text(1, 'Goodbye')
   *     element(2, 'div');
   *   }
   *   if (rf & 2) {
   *     advance(2); // Advance twice to the <div>.
   *     property('title', 'test');
   *   }
   *  }
   * ```
   * @param delta Number of elements to advance forwards by.
   *
   * @codeGenApi
   */
  function ÉµÉµadvance(delta) {
      ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');
      selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, isInCheckNoChangesMode());
  }
  function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
      ngDevMode && assertIndexInDeclRange(lView, index);
      // Flush the initial hooks for elements in the view that have been added up to this point.
      // PERF WARNING: do NOT extract this to a separate function without running benchmarks
      if (!checkNoChangesMode) {
          const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;
          if (hooksInitPhaseCompleted) {
              const preOrderCheckHooks = tView.preOrderCheckHooks;
              if (preOrderCheckHooks !== null) {
                  executeCheckHooks(lView, preOrderCheckHooks, index);
              }
          }
          else {
              const preOrderHooks = tView.preOrderHooks;
              if (preOrderHooks !== null) {
                  executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, index);
              }
          }
      }
      // We must set the selected index *after* running the hooks, because hooks may have side-effects
      // that cause other template functions to run, thus updating the selected index, which is global
      // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index
      // will be altered by the time we leave the `ÉµÉµadvance` instruction.
      setSelectedIndex(index);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!
   */
  /**
   * Creates an `Array` construction with a given name. This is useful when
   * looking for memory consumption to see what time of array it is.
   *
   *
   * @param name Name to give to the constructor
   * @returns A subclass of `Array` if possible. This can only be done in
   *          environments which support `class` construct.
   */
  function createNamedArrayType(name) {
      // This should never be called in prod mode, so let's verify that is the case.
      if (ngDevMode) {
          try {
              // If this function were compromised the following could lead to arbitrary
              // script execution. We bless it with Trusted Types anyway since this
              // function is stripped out of production binaries.
              return (newTrustedFunctionForDev('Array', `return class ${name} extends Array{}`))(Array);
          }
          catch (e) {
              // If it does not work just give up and fall back to regular Array.
              return Array;
          }
      }
      else {
          throw new Error('Looks like we are in \'prod mode\', but we are creating a named Array type, which is wrong! Check your code');
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function toTStylingRange(prev, next) {
      ngDevMode && assertNumberInRange(prev, 0, 32767 /* UNSIGNED_MASK */);
      ngDevMode && assertNumberInRange(next, 0, 32767 /* UNSIGNED_MASK */);
      return (prev << 17 /* PREV_SHIFT */ | next << 2 /* NEXT_SHIFT */);
  }
  function getTStylingRangePrev(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return (tStylingRange >> 17 /* PREV_SHIFT */) & 32767 /* UNSIGNED_MASK */;
  }
  function getTStylingRangePrevDuplicate(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return (tStylingRange & 2 /* PREV_DUPLICATE */) ==
          2 /* PREV_DUPLICATE */;
  }
  function setTStylingRangePrev(tStylingRange, previous) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      ngDevMode && assertNumberInRange(previous, 0, 32767 /* UNSIGNED_MASK */);
      return ((tStylingRange & ~4294836224 /* PREV_MASK */) |
          (previous << 17 /* PREV_SHIFT */));
  }
  function setTStylingRangePrevDuplicate(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return (tStylingRange | 2 /* PREV_DUPLICATE */);
  }
  function getTStylingRangeNext(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return (tStylingRange & 131068 /* NEXT_MASK */) >> 2 /* NEXT_SHIFT */;
  }
  function setTStylingRangeNext(tStylingRange, next) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      ngDevMode && assertNumberInRange(next, 0, 32767 /* UNSIGNED_MASK */);
      return ((tStylingRange & ~131068 /* NEXT_MASK */) | //
          next << 2 /* NEXT_SHIFT */);
  }
  function getTStylingRangeNextDuplicate(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return (tStylingRange & 1 /* NEXT_DUPLICATE */) ===
          1 /* NEXT_DUPLICATE */;
  }
  function setTStylingRangeNextDuplicate(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return (tStylingRange | 1 /* NEXT_DUPLICATE */);
  }
  function getTStylingRangeTail(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      const next = getTStylingRangeNext(tStylingRange);
      return next === 0 ? getTStylingRangePrev(tStylingRange) : next;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Patch a `debug` property on top of the existing object.
   *
   * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
   *
   * @param obj Object to patch
   * @param debug Value to patch
   */
  function attachDebugObject(obj, debug) {
      if (ngDevMode) {
          Object.defineProperty(obj, 'debug', { value: debug, enumerable: false });
      }
      else {
          throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
      }
  }
  /**
   * Patch a `debug` property getter on top of the existing object.
   *
   * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
   *
   * @param obj Object to patch
   * @param debugGetter Getter returning a value to patch
   */
  function attachDebugGetter(obj, debugGetter) {
      if (ngDevMode) {
          Object.defineProperty(obj, 'debug', { get: debugGetter, enumerable: false });
      }
      else {
          throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /*
   * This file contains conditionally attached classes which provide human readable (debug) level
   * information for `LView`, `LContainer` and other internal data structures. These data structures
   * are stored internally as array which makes it very difficult during debugging to reason about the
   * current state of the system.
   *
   * Patching the array with extra property does change the array's hidden class' but it does not
   * change the cost of access, therefore this patching should not have significant if any impact in
   * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)
   *
   * So instead of seeing:
   * ```
   * Array(30) [Object, 659, null, â€¦]
   * ```
   *
   * You get to see:
   * ```
   * LViewDebug {
   *   views: [...],
   *   flags: {attached: true, ...}
   *   nodes: [
   *     {html: '<div id="123">', ..., nodes: [
   *       {html: '<span>', ..., nodes: null}
   *     ]}
   *   ]
   * }
   * ```
   */
  let LVIEW_COMPONENT_CACHE;
  let LVIEW_EMBEDDED_CACHE;
  let LVIEW_ROOT;
  let LVIEW_COMPONENT;
  let LVIEW_EMBEDDED;
  /**
   * This function clones a blueprint and creates LView.
   *
   * Simple slice will keep the same type, and we need it to be LView
   */
  function cloneToLViewFromTViewBlueprint(tView) {
      const debugTView = tView;
      const lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);
      return lView.concat(tView.blueprint);
  }
  class LRootView extends Array {
  }
  class LComponentView extends Array {
  }
  class LEmbeddedView extends Array {
  }
  function getLViewToClone(type, name) {
      switch (type) {
          case 0 /* Root */:
              if (LVIEW_ROOT === undefined)
                  LVIEW_ROOT = new LRootView();
              return LVIEW_ROOT;
          case 1 /* Component */:
              if (!ngDevMode || !ngDevMode.namedConstructors) {
                  if (LVIEW_COMPONENT === undefined)
                      LVIEW_COMPONENT = new LComponentView();
                  return LVIEW_COMPONENT;
              }
              if (LVIEW_COMPONENT_CACHE === undefined)
                  LVIEW_COMPONENT_CACHE = new Map();
              let componentArray = LVIEW_COMPONENT_CACHE.get(name);
              if (componentArray === undefined) {
                  componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();
                  LVIEW_COMPONENT_CACHE.set(name, componentArray);
              }
              return componentArray;
          case 2 /* Embedded */:
              if (!ngDevMode || !ngDevMode.namedConstructors) {
                  if (LVIEW_EMBEDDED === undefined)
                      LVIEW_EMBEDDED = new LEmbeddedView();
                  return LVIEW_EMBEDDED;
              }
              if (LVIEW_EMBEDDED_CACHE === undefined)
                  LVIEW_EMBEDDED_CACHE = new Map();
              let embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);
              if (embeddedArray === undefined) {
                  embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();
                  LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);
              }
              return embeddedArray;
      }
  }
  function nameSuffix(text) {
      if (text == null)
          return '';
      const index = text.lastIndexOf('_Template');
      return '_' + (index === -1 ? text : text.substr(0, index));
  }
  /**
   * This class is a debug version of Object literal so that we can have constructor name show up
   * in
   * debug tools in ngDevMode.
   */
  const TViewConstructor = class TView {
      constructor(type, blueprint, template, queries, viewQuery, declTNode, data, bindingStartIndex, expandoStartIndex, hostBindingOpCodes, firstCreatePass, firstUpdatePass, staticViewQueries, staticContentQueries, preOrderHooks, preOrderCheckHooks, contentHooks, contentCheckHooks, viewHooks, viewCheckHooks, destroyHooks, cleanup, contentQueries, components, directiveRegistry, pipeRegistry, firstChild, schemas, consts, incompleteFirstPass, _decls, _vars) {
          this.type = type;
          this.blueprint = blueprint;
          this.template = template;
          this.queries = queries;
          this.viewQuery = viewQuery;
          this.declTNode = declTNode;
          this.data = data;
          this.bindingStartIndex = bindingStartIndex;
          this.expandoStartIndex = expandoStartIndex;
          this.hostBindingOpCodes = hostBindingOpCodes;
          this.firstCreatePass = firstCreatePass;
          this.firstUpdatePass = firstUpdatePass;
          this.staticViewQueries = staticViewQueries;
          this.staticContentQueries = staticContentQueries;
          this.preOrderHooks = preOrderHooks;
          this.preOrderCheckHooks = preOrderCheckHooks;
          this.contentHooks = contentHooks;
          this.contentCheckHooks = contentCheckHooks;
          this.viewHooks = viewHooks;
          this.viewCheckHooks = viewCheckHooks;
          this.destroyHooks = destroyHooks;
          this.cleanup = cleanup;
          this.contentQueries = contentQueries;
          this.components = components;
          this.directiveRegistry = directiveRegistry;
          this.pipeRegistry = pipeRegistry;
          this.firstChild = firstChild;
          this.schemas = schemas;
          this.consts = consts;
          this.incompleteFirstPass = incompleteFirstPass;
          this._decls = _decls;
          this._vars = _vars;
      }
      get template_() {
          const buf = [];
          processTNodeChildren(this.firstChild, buf);
          return buf.join('');
      }
      get type_() {
          return TViewTypeAsString[this.type] || `TViewType.?${this.type}?`;
      }
  };
  class TNode {
      constructor(tView_, //
      type, //
      index, //
      insertBeforeIndex, //
      injectorIndex, //
      directiveStart, //
      directiveEnd, //
      directiveStylingLast, //
      propertyBindings, //
      flags, //
      providerIndexes, //
      value, //
      attrs, //
      mergedAttrs, //
      localNames, //
      initialInputs, //
      inputs, //
      outputs, //
      tViews, //
      next, //
      projectionNext, //
      child, //
      parent, //
      projection, //
      styles, //
      stylesWithoutHost, //
      residualStyles, //
      classes, //
      classesWithoutHost, //
      residualClasses, //
      classBindings, //
      styleBindings) {
          this.tView_ = tView_;
          this.type = type;
          this.index = index;
          this.insertBeforeIndex = insertBeforeIndex;
          this.injectorIndex = injectorIndex;
          this.directiveStart = directiveStart;
          this.directiveEnd = directiveEnd;
          this.directiveStylingLast = directiveStylingLast;
          this.propertyBindings = propertyBindings;
          this.flags = flags;
          this.providerIndexes = providerIndexes;
          this.value = value;
          this.attrs = attrs;
          this.mergedAttrs = mergedAttrs;
          this.localNames = localNames;
          this.initialInputs = initialInputs;
          this.inputs = inputs;
          this.outputs = outputs;
          this.tViews = tViews;
          this.next = next;
          this.projectionNext = projectionNext;
          this.child = child;
          this.parent = parent;
          this.projection = projection;
          this.styles = styles;
          this.stylesWithoutHost = stylesWithoutHost;
          this.residualStyles = residualStyles;
          this.classes = classes;
          this.classesWithoutHost = classesWithoutHost;
          this.residualClasses = residualClasses;
          this.classBindings = classBindings;
          this.styleBindings = styleBindings;
      }
      /**
       * Return a human debug version of the set of `NodeInjector`s which will be consulted when
       * resolving tokens from this `TNode`.
       *
       * When debugging applications, it is often difficult to determine which `NodeInjector`s will be
       * consulted. This method shows a list of `DebugNode`s representing the `TNode`s which will be
       * consulted in order when resolving a token starting at this `TNode`.
       *
       * The original data is stored in `LView` and `TView` with a lot of offset indexes, and so it is
       * difficult to reason about.
       *
       * @param lView The `LView` instance for this `TNode`.
       */
      debugNodeInjectorPath(lView) {
          const path = [];
          let injectorIndex = getInjectorIndex(this, lView);
          if (injectorIndex === -1) {
              // Looks like the current `TNode` does not have `NodeInjector` associated with it => look for
              // parent NodeInjector.
              const parentLocation = getParentInjectorLocation(this, lView);
              if (parentLocation !== NO_PARENT_INJECTOR) {
                  // We found a parent, so start searching from the parent location.
                  injectorIndex = getParentInjectorIndex(parentLocation);
                  lView = getParentInjectorView(parentLocation, lView);
              }
              else {
                  // No parents have been found, so there are no `NodeInjector`s to consult.
              }
          }
          while (injectorIndex !== -1) {
              ngDevMode && assertNodeInjector(lView, injectorIndex);
              const tNode = lView[TVIEW].data[injectorIndex + 8 /* TNODE */];
              path.push(buildDebugNode(tNode, lView));
              const parentLocation = lView[injectorIndex + 8 /* PARENT */];
              if (parentLocation === NO_PARENT_INJECTOR) {
                  injectorIndex = -1;
              }
              else {
                  injectorIndex = getParentInjectorIndex(parentLocation);
                  lView = getParentInjectorView(parentLocation, lView);
              }
          }
          return path;
      }
      get type_() {
          return toTNodeTypeAsString(this.type) || `TNodeType.?${this.type}?`;
      }
      get flags_() {
          const flags = [];
          if (this.flags & 16 /* hasClassInput */)
              flags.push('TNodeFlags.hasClassInput');
          if (this.flags & 8 /* hasContentQuery */)
              flags.push('TNodeFlags.hasContentQuery');
          if (this.flags & 32 /* hasStyleInput */)
              flags.push('TNodeFlags.hasStyleInput');
          if (this.flags & 128 /* hasHostBindings */)
              flags.push('TNodeFlags.hasHostBindings');
          if (this.flags & 2 /* isComponentHost */)
              flags.push('TNodeFlags.isComponentHost');
          if (this.flags & 1 /* isDirectiveHost */)
              flags.push('TNodeFlags.isDirectiveHost');
          if (this.flags & 64 /* isDetached */)
              flags.push('TNodeFlags.isDetached');
          if (this.flags & 4 /* isProjected */)
              flags.push('TNodeFlags.isProjected');
          return flags.join('|');
      }
      get template_() {
          if (this.type & 1 /* Text */)
              return this.value;
          const buf = [];
          const tagName = typeof this.value === 'string' && this.value || this.type_;
          buf.push('<', tagName);
          if (this.flags) {
              buf.push(' ', this.flags_);
          }
          if (this.attrs) {
              for (let i = 0; i < this.attrs.length;) {
                  const attrName = this.attrs[i++];
                  if (typeof attrName == 'number') {
                      break;
                  }
                  const attrValue = this.attrs[i++];
                  buf.push(' ', attrName, '="', attrValue, '"');
              }
          }
          buf.push('>');
          processTNodeChildren(this.child, buf);
          buf.push('</', tagName, '>');
          return buf.join('');
      }
      get styleBindings_() {
          return toDebugStyleBinding(this, false);
      }
      get classBindings_() {
          return toDebugStyleBinding(this, true);
      }
      get providerIndexStart_() {
          return this.providerIndexes & 1048575 /* ProvidersStartIndexMask */;
      }
      get providerIndexEnd_() {
          return this.providerIndexStart_ +
              (this.providerIndexes >>> 20 /* CptViewProvidersCountShift */);
      }
  }
  const TNodeDebug = TNode;
  function toDebugStyleBinding(tNode, isClassBased) {
      const tData = tNode.tView_.data;
      const bindings = [];
      const range = isClassBased ? tNode.classBindings : tNode.styleBindings;
      const prev = getTStylingRangePrev(range);
      const next = getTStylingRangeNext(range);
      let isTemplate = next !== 0;
      let cursor = isTemplate ? next : prev;
      while (cursor !== 0) {
          const itemKey = tData[cursor];
          const itemRange = tData[cursor + 1];
          bindings.unshift({
              key: itemKey,
              index: cursor,
              isTemplate: isTemplate,
              prevDuplicate: getTStylingRangePrevDuplicate(itemRange),
              nextDuplicate: getTStylingRangeNextDuplicate(itemRange),
              nextIndex: getTStylingRangeNext(itemRange),
              prevIndex: getTStylingRangePrev(itemRange),
          });
          if (cursor === prev)
              isTemplate = false;
          cursor = getTStylingRangePrev(itemRange);
      }
      bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);
      return bindings;
  }
  function processTNodeChildren(tNode, buf) {
      while (tNode) {
          buf.push(tNode.template_);
          tNode = tNode.next;
      }
  }
  class TViewData extends Array {
  }
  let TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because
  // `LView` constructor could have side-effects.
  /**
   * This function clones a blueprint and creates TData.
   *
   * Simple slice will keep the same type, and we need it to be TData
   */
  function cloneToTViewData(list) {
      if (TVIEWDATA_EMPTY === undefined)
          TVIEWDATA_EMPTY = new TViewData();
      return TVIEWDATA_EMPTY.concat(list);
  }
  class LViewBlueprint extends Array {
  }
  class MatchesArray extends Array {
  }
  class TViewComponents extends Array {
  }
  class TNodeLocalNames extends Array {
  }
  class TNodeInitialInputs extends Array {
  }
  class LCleanup extends Array {
  }
  class TCleanup extends Array {
  }
  function attachLViewDebug(lView) {
      attachDebugObject(lView, new LViewDebug(lView));
  }
  function attachLContainerDebug(lContainer) {
      attachDebugObject(lContainer, new LContainerDebug(lContainer));
  }
  function toDebug(obj) {
      if (obj) {
          const debug = obj.debug;
          assertDefined(debug, 'Object does not have a debug representation.');
          return debug;
      }
      else {
          return obj;
      }
  }
  /**
   * Use this method to unwrap a native element in `LView` and convert it into HTML for easier
   * reading.
   *
   * @param value possibly wrapped native DOM node.
   * @param includeChildren If `true` then the serialized HTML form will include child elements
   * (same
   * as `outerHTML`). If `false` then the serialized HTML form will only contain the element
   * itself
   * (will not serialize child elements).
   */
  function toHtml(value, includeChildren = false) {
      const node = unwrapRNode(value);
      if (node) {
          switch (node.nodeType) {
              case Node.TEXT_NODE:
                  return node.textContent;
              case Node.COMMENT_NODE:
                  return `<!--${node.textContent}-->`;
              case Node.ELEMENT_NODE:
                  const outerHTML = node.outerHTML;
                  if (includeChildren) {
                      return outerHTML;
                  }
                  else {
                      const innerHTML = '>' + node.innerHTML + '<';
                      return (outerHTML.split(innerHTML)[0]) + '>';
                  }
          }
      }
      return null;
  }
  class LViewDebug {
      constructor(_raw_lView) {
          this._raw_lView = _raw_lView;
      }
      /**
       * Flags associated with the `LView` unpacked into a more readable state.
       */
      get flags() {
          const flags = this._raw_lView[FLAGS];
          return {
              __raw__flags__: flags,
              initPhaseState: flags & 3 /* InitPhaseStateMask */,
              creationMode: !!(flags & 4 /* CreationMode */),
              firstViewPass: !!(flags & 8 /* FirstLViewPass */),
              checkAlways: !!(flags & 16 /* CheckAlways */),
              dirty: !!(flags & 64 /* Dirty */),
              attached: !!(flags & 128 /* Attached */),
              destroyed: !!(flags & 256 /* Destroyed */),
              isRoot: !!(flags & 512 /* IsRoot */),
              indexWithinInitPhase: flags >> 11 /* IndexWithinInitPhaseShift */,
          };
      }
      get parent() {
          return toDebug(this._raw_lView[PARENT]);
      }
      get hostHTML() {
          return toHtml(this._raw_lView[HOST], true);
      }
      get html() {
          return (this.nodes || []).map(mapToHTML).join('');
      }
      get context() {
          return this._raw_lView[CONTEXT];
      }
      /**
       * The tree of nodes associated with the current `LView`. The nodes have been normalized into
       * a tree structure with relevant details pulled out for readability.
       */
      get nodes() {
          const lView = this._raw_lView;
          const tNode = lView[TVIEW].firstChild;
          return toDebugNodes(tNode, lView);
      }
      get template() {
          return this.tView.template_;
      }
      get tView() {
          return this._raw_lView[TVIEW];
      }
      get cleanup() {
          return this._raw_lView[CLEANUP];
      }
      get injector() {
          return this._raw_lView[INJECTOR$1];
      }
      get rendererFactory() {
          return this._raw_lView[RENDERER_FACTORY];
      }
      get renderer() {
          return this._raw_lView[RENDERER];
      }
      get sanitizer() {
          return this._raw_lView[SANITIZER];
      }
      get childHead() {
          return toDebug(this._raw_lView[CHILD_HEAD]);
      }
      get next() {
          return toDebug(this._raw_lView[NEXT]);
      }
      get childTail() {
          return toDebug(this._raw_lView[CHILD_TAIL]);
      }
      get declarationView() {
          return toDebug(this._raw_lView[DECLARATION_VIEW]);
      }
      get queries() {
          return this._raw_lView[QUERIES];
      }
      get tHost() {
          return this._raw_lView[T_HOST];
      }
      get decls() {
          return toLViewRange(this.tView, this._raw_lView, HEADER_OFFSET, this.tView.bindingStartIndex);
      }
      get vars() {
          return toLViewRange(this.tView, this._raw_lView, this.tView.bindingStartIndex, this.tView.expandoStartIndex);
      }
      get expando() {
          return toLViewRange(this.tView, this._raw_lView, this.tView.expandoStartIndex, this._raw_lView.length);
      }
      /**
       * Normalized view of child views (and containers) attached at this location.
       */
      get childViews() {
          const childViews = [];
          let child = this.childHead;
          while (child) {
              childViews.push(child);
              child = child.next;
          }
          return childViews;
      }
  }
  function mapToHTML(node) {
      if (node.type === 'ElementContainer') {
          return (node.children || []).map(mapToHTML).join('');
      }
      else if (node.type === 'IcuContainer') {
          throw new Error('Not implemented');
      }
      else {
          return toHtml(node.native, true) || '';
      }
  }
  function toLViewRange(tView, lView, start, end) {
      let content = [];
      for (let index = start; index < end; index++) {
          content.push({ index: index, t: tView.data[index], l: lView[index] });
      }
      return { start: start, end: end, length: end - start, content: content };
  }
  /**
   * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.
   *
   * @param tNode
   * @param lView
   */
  function toDebugNodes(tNode, lView) {
      if (tNode) {
          const debugNodes = [];
          let tNodeCursor = tNode;
          while (tNodeCursor) {
              debugNodes.push(buildDebugNode(tNodeCursor, lView));
              tNodeCursor = tNodeCursor.next;
          }
          return debugNodes;
      }
      else {
          return [];
      }
  }
  function buildDebugNode(tNode, lView) {
      const rawValue = lView[tNode.index];
      const native = unwrapRNode(rawValue);
      const factories = [];
      const instances = [];
      const tView = lView[TVIEW];
      for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
          const def = tView.data[i];
          factories.push(def.type);
          instances.push(lView[i]);
      }
      return {
          html: toHtml(native),
          type: toTNodeTypeAsString(tNode.type),
          tNode,
          native: native,
          children: toDebugNodes(tNode.child, lView),
          factories,
          instances,
          injector: buildNodeInjectorDebug(tNode, tView, lView),
          get injectorResolutionPath() {
              return tNode.debugNodeInjectorPath(lView);
          },
      };
  }
  function buildNodeInjectorDebug(tNode, tView, lView) {
      const viewProviders = [];
      for (let i = tNode.providerIndexStart_; i < tNode.providerIndexEnd_; i++) {
          viewProviders.push(tView.data[i]);
      }
      const providers = [];
      for (let i = tNode.providerIndexEnd_; i < tNode.directiveEnd; i++) {
          providers.push(tView.data[i]);
      }
      const nodeInjectorDebug = {
          bloom: toBloom(lView, tNode.injectorIndex),
          cumulativeBloom: toBloom(tView.data, tNode.injectorIndex),
          providers,
          viewProviders,
          parentInjectorIndex: lView[tNode.providerIndexStart_ - 1],
      };
      return nodeInjectorDebug;
  }
  /**
   * Convert a number at `idx` location in `array` into binary representation.
   *
   * @param array
   * @param idx
   */
  function binary(array, idx) {
      const value = array[idx];
      // If not a number we print 8 `?` to retain alignment but let user know that it was called on
      // wrong type.
      if (typeof value !== 'number')
          return '????????';
      // We prefix 0s so that we have constant length number
      const text = '00000000' + value.toString(2);
      return text.substring(text.length - 8);
  }
  /**
   * Convert a bloom filter at location `idx` in `array` into binary representation.
   *
   * @param array
   * @param idx
   */
  function toBloom(array, idx) {
      if (idx < 0) {
          return 'NO_NODE_INJECTOR';
      }
      return `${binary(array, idx + 7)}_${binary(array, idx + 6)}_${binary(array, idx + 5)}_${binary(array, idx + 4)}_${binary(array, idx + 3)}_${binary(array, idx + 2)}_${binary(array, idx + 1)}_${binary(array, idx + 0)}`;
  }
  class LContainerDebug {
      constructor(_raw_lContainer) {
          this._raw_lContainer = _raw_lContainer;
      }
      get hasTransplantedViews() {
          return this._raw_lContainer[HAS_TRANSPLANTED_VIEWS];
      }
      get views() {
          return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET)
              .map(toDebug);
      }
      get parent() {
          return toDebug(this._raw_lContainer[PARENT]);
      }
      get movedViews() {
          return this._raw_lContainer[MOVED_VIEWS];
      }
      get host() {
          return this._raw_lContainer[HOST];
      }
      get native() {
          return this._raw_lContainer[NATIVE];
      }
      get next() {
          return toDebug(this._raw_lContainer[NEXT]);
      }
  }
  
  /**
   * A permanent marker promise which signifies that the current CD tree is
   * clean.
   */
  const _CLEAN_PROMISE = (() => Promise.resolve(null))();
  /**
   * Invoke `HostBindingsFunction`s for view.
   *
   * This methods executes `TView.hostBindingOpCodes`. It is used to execute the
   * `HostBindingsFunction`s associated with the current `LView`.
   *
   * @param tView Current `TView`.
   * @param lView Current `LView`.
   */
  function processHostBindingOpCodes(tView, lView) {
      const hostBindingOpCodes = tView.hostBindingOpCodes;
      if (hostBindingOpCodes === null)
          return;
      try {
          for (let i = 0; i < hostBindingOpCodes.length; i++) {
              const opCode = hostBindingOpCodes[i];
              if (opCode < 0) {
                  // Negative numbers are element indexes.
                  setSelectedIndex(~opCode);
              }
              else {
                  // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.
                  const directiveIdx = opCode;
                  const bindingRootIndx = hostBindingOpCodes[++i];
                  const hostBindingFn = hostBindingOpCodes[++i];
                  setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
                  const context = lView[directiveIdx];
                  hostBindingFn(2 /* Update */, context);
              }
          }
      }
      finally {
          setSelectedIndex(-1);
      }
  }
  /** Refreshes all content queries declared by directives in a given view */
  function refreshContentQueries(tView, lView) {
      const contentQueries = tView.contentQueries;
      if (contentQueries !== null) {
          for (let i = 0; i < contentQueries.length; i += 2) {
              const queryStartIdx = contentQueries[i];
              const directiveDefIdx = contentQueries[i + 1];
              if (directiveDefIdx !== -1) {
                  const directiveDef = tView.data[directiveDefIdx];
                  ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');
                  ngDevMode &&
                      assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');
                  setCurrentQueryIndex(queryStartIdx);
                  directiveDef.contentQueries(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);
              }
          }
      }
  }
  /** Refreshes child components in the current view (update mode). */
  function refreshChildComponents(hostLView, components) {
      for (let i = 0; i < components.length; i++) {
          refreshComponent(hostLView, components[i]);
      }
  }
  /** Renders child components in the current view (creation mode). */
  function renderChildComponents(hostLView, components) {
      for (let i = 0; i < components.length; i++) {
          renderComponent$1(hostLView, components[i]);
      }
  }
  function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {
      const lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();
      lView[HOST] = host;
      lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;
      resetPreOrderHookFlags(lView);
      ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
      lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
      lView[CONTEXT] = context;
      lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]);
      ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');
      lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);
      ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');
      lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;
      lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;
      lView[T_HOST] = tHostNode;
      ngDevMode &&
          assertEqual(tView.type == 2 /* Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');
      lView[DECLARATION_COMPONENT_VIEW] =
          tView.type == 2 /* Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
      ngDevMode && attachLViewDebug(lView);
      return lView;
  }
  function getOrCreateTNode(tView, index, type, name, attrs) {
      ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
          // `view_engine_compatibility` for additional context.
          assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.');
      // Keep this function short, so that the VM will inline it.
      ngDevMode && assertPureTNodeType(type);
      let tNode = tView.data[index];
      if (tNode === null) {
          tNode = createTNodeAtIndex(tView, index, type, name, attrs);
          if (isInI18nBlock()) {
              // If we are in i18n block then all elements should be pre declared through `Placeholder`
              // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
              // If the `TNode` was not pre-declared than it means it was not mentioned which means it was
              // removed, so we mark it as detached.
              tNode.flags |= 64 /* isDetached */;
          }
      }
      else if (tNode.type & 64 /* Placeholder */) {
          tNode.type = type;
          tNode.value = name;
          tNode.attrs = attrs;
          const parent = getCurrentParentTNode();
          tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
          ngDevMode && assertTNodeForTView(tNode, tView);
          ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');
      }
      setCurrentTNode(tNode, true);
      return tNode;
  }
  function createTNodeAtIndex(tView, index, type, name, attrs) {
      const currentTNode = getCurrentTNodePlaceholderOk();
      const isParent = isCurrentTNodeParent();
      const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;
      // Parents cannot cross component boundaries because components will be used in multiple places.
      const tNode = tView.data[index] =
          createTNode(tView, parent, type, index, name, attrs);
      // Assign a pointer to the first child node of a given view. The first node is not always the one
      // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has
      // the index 1 or more, so we can't just check node index.
      if (tView.firstChild === null) {
          tView.firstChild = tNode;
      }
      if (currentTNode !== null) {
          if (isParent) {
              // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?
              if (currentTNode.child == null && tNode.parent !== null) {
                  // We are in the same view, which means we are adding content node to the parent view.
                  currentTNode.child = tNode;
              }
          }
          else {
              if (currentTNode.next === null) {
                  // In the case of i18n the `currentTNode` may already be linked, in which case we don't want
                  // to break the links which i18n created.
                  currentTNode.next = tNode;
              }
          }
      }
      return tNode;
  }
  /**
   * When elements are created dynamically after a view blueprint is created (e.g. through
   * i18nApply()), we need to adjust the blueprint for future
   * template passes.
   *
   * @param tView `TView` associated with `LView`
   * @param lView The `LView` containing the blueprint to adjust
   * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0
   * @param initialValue Initial value to store in blueprint
   */
  function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
      if (numSlotsToAlloc === 0)
          return -1;
      if (ngDevMode) {
          assertFirstCreatePass(tView);
          assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');
          assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');
          assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');
          assertFirstUpdatePass(tView);
      }
      const allocIdx = lView.length;
      for (let i = 0; i < numSlotsToAlloc; i++) {
          lView.push(initialValue);
          tView.blueprint.push(initialValue);
          tView.data.push(null);
      }
      return allocIdx;
  }
  //////////////////////////
  //// Render
  //////////////////////////
  /**
   * Processes a view in the creation mode. This includes a number of steps in a specific order:
   * - creating view query functions (if any);
   * - executing a template function in the creation mode;
   * - updating static queries (if any);
   * - creating child components defined in a given view.
   */
  function renderView(tView, lView, context) {
      ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');
      enterView(lView);
      try {
          const viewQuery = tView.viewQuery;
          if (viewQuery !== null) {
              executeViewQueryFn(1 /* Create */, viewQuery, context);
          }
          // Execute a template associated with this view, if it exists. A template function might not be
          // defined for the root component views.
          const templateFn = tView.template;
          if (templateFn !== null) {
              executeTemplate(tView, lView, templateFn, 1 /* Create */, context);
          }
          // This needs to be set before children are processed to support recursive components.
          // This must be set to false immediately after the first creation run because in an
          // ngFor loop, all the views will be created together before update mode runs and turns
          // off firstCreatePass. If we don't set it here, instances will perform directive
          // matching, etc again and again.
          if (tView.firstCreatePass) {
              tView.firstCreatePass = false;
          }
          // We resolve content queries specifically marked as `static` in creation mode. Dynamic
          // content queries are resolved during change detection (i.e. update mode), after embedded
          // views are refreshed (see block above).
          if (tView.staticContentQueries) {
              refreshContentQueries(tView, lView);
          }
          // We must materialize query results before child components are processed
          // in case a child component has projected a container. The LContainer needs
          // to exist so the embedded views are properly attached by the container.
          if (tView.staticViewQueries) {
              executeViewQueryFn(2 /* Update */, tView.viewQuery, context);
          }
          // Render child component views.
          const components = tView.components;
          if (components !== null) {
              renderChildComponents(lView, components);
          }
      }
      catch (error) {
          // If we didn't manage to get past the first template pass due to
          // an error, mark the view as corrupted so we can try to recover.
          if (tView.firstCreatePass) {
              tView.incompleteFirstPass = true;
              tView.firstCreatePass = false;
          }
          throw error;
      }
      finally {
          lView[FLAGS] &= ~4 /* CreationMode */;
          leaveView();
      }
  }
  /**
   * Processes a view in update mode. This includes a number of steps in a specific order:
   * - executing a template function in update mode;
   * - executing hooks;
   * - refreshing queries;
   * - setting host bindings;
   * - refreshing child (embedded and component) views.
   */
  function refreshView(tView, lView, templateFn, context) {
      ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');
      const flags = lView[FLAGS];
      if ((flags & 256 /* Destroyed */) === 256 /* Destroyed */)
          return;
      enterView(lView);
      // Check no changes mode is a dev only mode used to verify that bindings have not changed
      // since they were assigned. We do not want to execute lifecycle hooks in that mode.
      const isInCheckNoChangesPass = isInCheckNoChangesMode();
      try {
          resetPreOrderHookFlags(lView);
          setBindingIndex(tView.bindingStartIndex);
          if (templateFn !== null) {
              executeTemplate(tView, lView, templateFn, 2 /* Update */, context);
          }
          const hooksInitPhaseCompleted = (flags & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;
          // execute pre-order hooks (OnInit, OnChanges, DoCheck)
          // PERF WARNING: do NOT extract this to a separate function without running benchmarks
          if (!isInCheckNoChangesPass) {
              if (hooksInitPhaseCompleted) {
                  const preOrderCheckHooks = tView.preOrderCheckHooks;
                  if (preOrderCheckHooks !== null) {
                      executeCheckHooks(lView, preOrderCheckHooks, null);
                  }
              }
              else {
                  const preOrderHooks = tView.preOrderHooks;
                  if (preOrderHooks !== null) {
                      executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, null);
                  }
                  incrementInitPhaseFlags(lView, 0 /* OnInitHooksToBeRun */);
              }
          }
          // First mark transplanted views that are declared in this lView as needing a refresh at their
          // insertion points. This is needed to avoid the situation where the template is defined in this
          // `LView` but its declaration appears after the insertion component.
          markTransplantedViewsForRefresh(lView);
          refreshEmbeddedViews(lView);
          // Content query results must be refreshed before content hooks are called.
          if (tView.contentQueries !== null) {
              refreshContentQueries(tView, lView);
          }
          // execute content hooks (AfterContentInit, AfterContentChecked)
          // PERF WARNING: do NOT extract this to a separate function without running benchmarks
          if (!isInCheckNoChangesPass) {
              if (hooksInitPhaseCompleted) {
                  const contentCheckHooks = tView.contentCheckHooks;
                  if (contentCheckHooks !== null) {
                      executeCheckHooks(lView, contentCheckHooks);
                  }
              }
              else {
                  const contentHooks = tView.contentHooks;
                  if (contentHooks !== null) {
                      executeInitAndCheckHooks(lView, contentHooks, 1 /* AfterContentInitHooksToBeRun */);
                  }
                  incrementInitPhaseFlags(lView, 1 /* AfterContentInitHooksToBeRun */);
              }
          }
          processHostBindingOpCodes(tView, lView);
          // Refresh child component views.
          const components = tView.components;
          if (components !== null) {
              refreshChildComponents(lView, components);
          }
          // View queries must execute after refreshing child components because a template in this view
          // could be inserted in a child component. If the view query executes before child component
          // refresh, the template might not yet be inserted.
          const viewQuery = tView.viewQuery;
          if (viewQuery !== null) {
              executeViewQueryFn(2 /* Update */, viewQuery, context);
          }
          // execute view hooks (AfterViewInit, AfterViewChecked)
          // PERF WARNING: do NOT extract this to a separate function without running benchmarks
          if (!isInCheckNoChangesPass) {
              if (hooksInitPhaseCompleted) {
                  const viewCheckHooks = tView.viewCheckHooks;
                  if (viewCheckHooks !== null) {
                      executeCheckHooks(lView, viewCheckHooks);
                  }
              }
              else {
                  const viewHooks = tView.viewHooks;
                  if (viewHooks !== null) {
                      executeInitAndCheckHooks(lView, viewHooks, 2 /* AfterViewInitHooksToBeRun */);
                  }
                  incrementInitPhaseFlags(lView, 2 /* AfterViewInitHooksToBeRun */);
              }
          }
          if (tView.firstUpdatePass === true) {
              // We need to make sure that we only flip the flag on successful `refreshView` only
              // Don't do this in `finally` block.
              // If we did this in `finally` block then an exception could block the execution of styling
              // instructions which in turn would be unable to insert themselves into the styling linked
              // list. The result of this would be that if the exception would not be throw on subsequent CD
              // the styling would be unable to process it data and reflect to the DOM.
              tView.firstUpdatePass = false;
          }
          // Do not reset the dirty state when running in check no changes mode. We don't want components
          // to behave differently depending on whether check no changes is enabled or not. For example:
          // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to
          // refresh a `NgClass` binding should work. If we would reset the dirty state in the check
          // no changes cycle, the component would be not be dirty for the next update pass. This would
          // be different in production mode where the component dirty state is not reset.
          if (!isInCheckNoChangesPass) {
              lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);
          }
          if (lView[FLAGS] & 1024 /* RefreshTransplantedView */) {
              lView[FLAGS] &= ~1024 /* RefreshTransplantedView */;
              updateTransplantedViewCount(lView[PARENT], -1);
          }
      }
      finally {
          leaveView();
      }
  }
  function renderComponentOrTemplate(tView, lView, templateFn, context) {
      const rendererFactory = lView[RENDERER_FACTORY];
      const normalExecutionPath = !isInCheckNoChangesMode();
      const creationModeIsActive = isCreationMode(lView);
      try {
          if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {
              rendererFactory.begin();
          }
          if (creationModeIsActive) {
              renderView(tView, lView, context);
          }
          refreshView(tView, lView, templateFn, context);
      }
      finally {
          if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {
              rendererFactory.end();
          }
      }
  }
  function executeTemplate(tView, lView, templateFn, rf, context) {
      const prevSelectedIndex = getSelectedIndex();
      const isUpdatePhase = rf & 2 /* Update */;
      try {
          setSelectedIndex(-1);
          if (isUpdatePhase && lView.length > HEADER_OFFSET) {
              // When we're updating, inherently select 0 so we don't
              // have to generate that instruction for most update blocks.
              selectIndexInternal(tView, lView, HEADER_OFFSET, isInCheckNoChangesMode());
          }
          const preHookType = isUpdatePhase ? 2 /* TemplateUpdateStart */ : 0 /* TemplateCreateStart */;
          profiler(preHookType, context);
          templateFn(rf, context);
      }
      finally {
          setSelectedIndex(prevSelectedIndex);
          const postHookType = isUpdatePhase ? 3 /* TemplateUpdateEnd */ : 1 /* TemplateCreateEnd */;
          profiler(postHookType, context);
      }
  }
  //////////////////////////
  //// Element
  //////////////////////////
  function executeContentQueries(tView, tNode, lView) {
      if (isContentQueryHost(tNode)) {
          const start = tNode.directiveStart;
          const end = tNode.directiveEnd;
          for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
              const def = tView.data[directiveIndex];
              if (def.contentQueries) {
                  def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);
              }
          }
      }
  }
  /**
   * Creates directive instances.
   */
  function createDirectivesInstances(tView, lView, tNode) {
      if (!getBindingsEnabled())
          return;
      instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));
      if ((tNode.flags & 128 /* hasHostBindings */) === 128 /* hasHostBindings */) {
          invokeDirectivesHostBindings(tView, lView, tNode);
      }
  }
  /**
   * Takes a list of local names and indices and pushes the resolved local variable values
   * to LView in the same order as they are loaded in the template with load().
   */
  function saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {
      const localNames = tNode.localNames;
      if (localNames !== null) {
          let localIndex = tNode.index + 1;
          for (let i = 0; i < localNames.length; i += 2) {
              const index = localNames[i + 1];
              const value = index === -1 ?
                  localRefExtractor(tNode, viewData) :
                  viewData[index];
              viewData[localIndex++] = value;
          }
      }
  }
  /**
   * Gets TView from a template function or creates a new TView
   * if it doesn't already exist.
   *
   * @param def ComponentDef
   * @returns TView
   */
  function getOrCreateTComponentView(def) {
      const tView = def.tView;
      // Create a TView if there isn't one, or recreate it if the first create pass didn't
      // complete successfully since we can't know for sure whether it's in a usable shape.
      if (tView === null || tView.incompleteFirstPass) {
          // Declaration node here is null since this function is called when we dynamically create a
          // component and hence there is no declaration.
          const declTNode = null;
          return def.tView = createTView(1 /* Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);
      }
      return tView;
  }
  /**
   * Creates a TView instance
   *
   * @param type Type of `TView`.
   * @param declTNode Declaration location of this `TView`.
   * @param templateFn Template function
   * @param decls The number of nodes, local refs, and pipes in this template
   * @param directives Registry of directives for this view
   * @param pipes Registry of pipes for this view
   * @param viewQuery View queries for this view
   * @param schemas Schemas for this view
   * @param consts Constants for this view
   */
  function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {
      ngDevMode && ngDevMode.tView++;
      const bindingStartIndex = HEADER_OFFSET + decls;
      // This length does not yet contain host bindings from child directives because at this point,
      // we don't know which directives are active on this template. As soon as a directive is matched
      // that has a host binding, we will update the blueprint with that def's hostVars count.
      const initialViewLength = bindingStartIndex + vars;
      const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
      const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;
      const tView = blueprint[TVIEW] = ngDevMode ?
          new TViewConstructor(type, // type: TViewType,
          blueprint, // blueprint: LView,
          templateFn, // template: ComponentTemplate<{}>|null,
          null, // queries: TQueries|null
          viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,
          declTNode, // declTNode: TNode|null,
          cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,
          bindingStartIndex, // bindingStartIndex: number,
          initialViewLength, // expandoStartIndex: number,
          null, // hostBindingOpCodes: HostBindingOpCodes,
          true, // firstCreatePass: boolean,
          true, // firstUpdatePass: boolean,
          false, // staticViewQueries: boolean,
          false, // staticContentQueries: boolean,
          null, // preOrderHooks: HookData|null,
          null, // preOrderCheckHooks: HookData|null,
          null, // contentHooks: HookData|null,
          null, // contentCheckHooks: HookData|null,
          null, // viewHooks: HookData|null,
          null, // viewCheckHooks: HookData|null,
          null, // destroyHooks: DestroyHookData|null,
          null, // cleanup: any[]|null,
          null, // contentQueries: number[]|null,
          null, // components: number[]|null,
          typeof directives === 'function' ? //
              directives() : //
              directives, // directiveRegistry: DirectiveDefList|null,
          typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,
          null, // firstChild: TNode|null,
          schemas, // schemas: SchemaMetadata[]|null,
          consts, // consts: TConstants|null
          false, // incompleteFirstPass: boolean
          decls, // ngDevMode only: decls
          vars) :
          {
              type: type,
              blueprint: blueprint,
              template: templateFn,
              queries: null,
              viewQuery: viewQuery,
              declTNode: declTNode,
              data: blueprint.slice().fill(null, bindingStartIndex),
              bindingStartIndex: bindingStartIndex,
              expandoStartIndex: initialViewLength,
              hostBindingOpCodes: null,
              firstCreatePass: true,
              firstUpdatePass: true,
              staticViewQueries: false,
              staticContentQueries: false,
              preOrderHooks: null,
              preOrderCheckHooks: null,
              contentHooks: null,
              contentCheckHooks: null,
              viewHooks: null,
              viewCheckHooks: null,
              destroyHooks: null,
              cleanup: null,
              contentQueries: null,
              components: null,
              directiveRegistry: typeof directives === 'function' ? directives() : directives,
              pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,
              firstChild: null,
              schemas: schemas,
              consts: consts,
              incompleteFirstPass: false
          };
      if (ngDevMode) {
          // For performance reasons it is important that the tView retains the same shape during runtime.
          // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
          // prevent class transitions.
          Object.seal(tView);
      }
      return tView;
  }
  function createViewBlueprint(bindingStartIndex, initialViewLength) {
      const blueprint = ngDevMode ? new LViewBlueprint() : [];
      for (let i = 0; i < initialViewLength; i++) {
          blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
      }
      return blueprint;
  }
  function createError(text, token) {
      return new Error(`Renderer: ${text} [${stringifyForError(token)}]`);
  }
  function assertHostNodeExists(rElement, elementOrSelector) {
      if (!rElement) {
          if (typeof elementOrSelector === 'string') {
              throw createError('Host node with selector not found:', elementOrSelector);
          }
          else {
              throw createError('Host node is required:', elementOrSelector);
          }
      }
  }
  /**
   * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
   *
   * @param rendererFactory Factory function to create renderer instance.
   * @param elementOrSelector Render element or CSS selector to locate the element.
   * @param encapsulation View Encapsulation defined for component that requests host element.
   */
  function locateHostElement(renderer, elementOrSelector, encapsulation) {
      if (isProceduralRenderer(renderer)) {
          // When using native Shadow DOM, do not clear host element to allow native slot projection
          const preserveContent = encapsulation === ViewEncapsulation$1.ShadowDom;
          return renderer.selectRootElement(elementOrSelector, preserveContent);
      }
      let rElement = typeof elementOrSelector === 'string' ?
          renderer.querySelector(elementOrSelector) :
          elementOrSelector;
      ngDevMode && assertHostNodeExists(rElement, elementOrSelector);
      // Always clear host element's content when Renderer3 is in use. For procedural renderer case we
      // make it depend on whether ShadowDom encapsulation is used (in which case the content should be
      // preserved to allow native slot projection). ShadowDom encapsulation requires procedural
      // renderer, and procedural renderer case is handled above.
      rElement.textContent = '';
      return rElement;
  }
  /**
   * Saves context for this cleanup function in LView.cleanupInstances.
   *
   * On the first template pass, saves in TView:
   * - Cleanup function
   * - Index of context we just saved in LView.cleanupInstances
   *
   * This function can also be used to store instance specific cleanup fns. In that case the `context`
   * is `null` and the function is store in `LView` (rather than it `TView`).
   */
  function storeCleanupWithContext(tView, lView, context, cleanupFn) {
      const lCleanup = getOrCreateLViewCleanup(lView);
      if (context === null) {
          // If context is null that this is instance specific callback. These callbacks can only be
          // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.
          if (ngDevMode) {
              Object.freeze(getOrCreateTViewCleanup(tView));
          }
          lCleanup.push(cleanupFn);
      }
      else {
          lCleanup.push(context);
          if (tView.firstCreatePass) {
              getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
          }
      }
  }
  function createTNode(tView, tParent, type, index, value, attrs) {
      ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
          // `view_engine_compatibility` for additional context.
          assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\'t be in the LView header.');
      ngDevMode && assertNotSame(attrs, undefined, '\'undefined\' is not valid value for \'attrs\'');
      ngDevMode && ngDevMode.tNode++;
      ngDevMode && tParent && assertTNodeForTView(tParent, tView);
      let injectorIndex = tParent ? tParent.injectorIndex : -1;
      const tNode = ngDevMode ?
          new TNodeDebug(tView, // tView_: TView
          type, // type: TNodeType
          index, // index: number
          null, // insertBeforeIndex: null|-1|number|number[]
          injectorIndex, // injectorIndex: number
          -1, // directiveStart: number
          -1, // directiveEnd: number
          -1, // directiveStylingLast: number
          null, // propertyBindings: number[]|null
          0, // flags: TNodeFlags
          0, // providerIndexes: TNodeProviderIndexes
          value, // value: string|null
          attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null
          null, // mergedAttrs
          null, // localNames: (string|number)[]|null
          undefined, // initialInputs: (string[]|null)[]|null|undefined
          null, // inputs: PropertyAliases|null
          null, // outputs: PropertyAliases|null
          null, // tViews: ITView|ITView[]|null
          null, // next: ITNode|null
          null, // projectionNext: ITNode|null
          null, // child: ITNode|null
          tParent, // parent: TElementNode|TContainerNode|null
          null, // projection: number|(ITNode|RNode[])[]|null
          null, // styles: string|null
          null, // stylesWithoutHost: string|null
          undefined, // residualStyles: string|null
          null, // classes: string|null
          null, // classesWithoutHost: string|null
          undefined, // residualClasses: string|null
          0, // classBindings: TStylingRange;
          0) :
          {
              type,
              index,
              insertBeforeIndex: null,
              injectorIndex,
              directiveStart: -1,
              directiveEnd: -1,
              directiveStylingLast: -1,
              propertyBindings: null,
              flags: 0,
              providerIndexes: 0,
              value: value,
              attrs: attrs,
              mergedAttrs: null,
              localNames: null,
              initialInputs: undefined,
              inputs: null,
              outputs: null,
              tViews: null,
              next: null,
              projectionNext: null,
              child: null,
              parent: tParent,
              projection: null,
              styles: null,
              stylesWithoutHost: null,
              residualStyles: undefined,
              classes: null,
              classesWithoutHost: null,
              residualClasses: undefined,
              classBindings: 0,
              styleBindings: 0,
          };
      if (ngDevMode) {
          // For performance reasons it is important that the tNode retains the same shape during runtime.
          // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
          // prevent class transitions.
          Object.seal(tNode);
      }
      return tNode;
  }
  function generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {
      for (let publicName in inputAliasMap) {
          if (inputAliasMap.hasOwnProperty(publicName)) {
              propStore = propStore === null ? {} : propStore;
              const internalName = inputAliasMap[publicName];
              if (propStore.hasOwnProperty(publicName)) {
                  propStore[publicName].push(directiveDefIdx, internalName);
              }
              else {
                  (propStore[publicName] = [directiveDefIdx, internalName]);
              }
          }
      }
      return propStore;
  }
  /**
   * Initializes data structures required to work with directive inputs and outputs.
   * Initialization is done for all directives matched on a given TNode.
   */
  function initializeInputAndOutputAliases(tView, tNode) {
      ngDevMode && assertFirstCreatePass(tView);
      const start = tNode.directiveStart;
      const end = tNode.directiveEnd;
      const tViewData = tView.data;
      const tNodeAttrs = tNode.attrs;
      const inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];
      let inputsStore = null;
      let outputsStore = null;
      for (let i = start; i < end; i++) {
          const directiveDef = tViewData[i];
          const directiveInputs = directiveDef.inputs;
          // Do not use unbound attributes as inputs to structural directives, since structural
          // directive inputs can only be set using microsyntax (e.g. `<div *dir="exp">`).
          // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which
          // should be set for inline templates.
          const initialInputs = (tNodeAttrs !== null && !isInlineTemplate(tNode)) ?
              generateInitialInputs(directiveInputs, tNodeAttrs) :
              null;
          inputsFromAttrs.push(initialInputs);
          inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);
          outputsStore = generatePropertyAliases(directiveDef.outputs, i, outputsStore);
      }
      if (inputsStore !== null) {
          if (inputsStore.hasOwnProperty('class')) {
              tNode.flags |= 16 /* hasClassInput */;
          }
          if (inputsStore.hasOwnProperty('style')) {
              tNode.flags |= 32 /* hasStyleInput */;
          }
      }
      tNode.initialInputs = inputsFromAttrs;
      tNode.inputs = inputsStore;
      tNode.outputs = outputsStore;
  }
  /**
   * Mapping between attributes names that don't correspond to their element property names.
   *
   * Performance note: this function is written as a series of if checks (instead of, say, a property
   * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of
   * mapping property names. Do NOT change without benchmarking.
   *
   * Note: this mapping has to be kept in sync with the equally named mapping in the template
   * type-checking machinery of ngtsc.
   */
  function mapPropName(name) {
      if (name === 'class')
          return 'className';
      if (name === 'for')
          return 'htmlFor';
      if (name === 'formaction')
          return 'formAction';
      if (name === 'innerHtml')
          return 'innerHTML';
      if (name === 'readonly')
          return 'readOnly';
      if (name === 'tabindex')
          return 'tabIndex';
      return name;
  }
  function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
      ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
      const element = getNativeByTNode(tNode, lView);
      let inputData = tNode.inputs;
      let dataValue;
      if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
          setInputsForProperty(tView, lView, dataValue, propName, value);
          if (isComponentHost(tNode))
              markDirtyIfOnPush(lView, tNode.index);
          if (ngDevMode) {
              setNgReflectProperties(lView, element, tNode.type, dataValue, value);
          }
      }
      else if (tNode.type & 3 /* AnyRNode */) {
          propName = mapPropName(propName);
          if (ngDevMode) {
              validateAgainstEventProperties(propName);
              if (!validateProperty(element, tNode.value, propName, tView.schemas)) {
                  // Return here since we only log warnings for unknown properties.
                  logUnknownPropertyError(propName, tNode.value);
                  return;
              }
              ngDevMode.rendererSetProperty++;
          }
          // It is assumed that the sanitizer is only added when the compiler determines that the
          // property is risky, so sanitization can be done without further checks.
          value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;
          if (isProceduralRenderer(renderer)) {
              renderer.setProperty(element, propName, value);
          }
          else if (!isAnimationProp(propName)) {
              element.setProperty ? element.setProperty(propName, value) :
                  element[propName] = value;
          }
      }
      else if (tNode.type & 12 /* AnyContainer */) {
          // If the node is a container and the property didn't
          // match any of the inputs or schemas we should throw.
          if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {
              logUnknownPropertyError(propName, tNode.value);
          }
      }
  }
  /** If node is an OnPush component, marks its LView dirty. */
  function markDirtyIfOnPush(lView, viewIndex) {
      ngDevMode && assertLView(lView);
      const childComponentLView = getComponentLViewByIndex(viewIndex, lView);
      if (!(childComponentLView[FLAGS] & 16 /* CheckAlways */)) {
          childComponentLView[FLAGS] |= 64 /* Dirty */;
      }
  }
  function setNgReflectProperty(lView, element, type, attrName, value) {
      const renderer = lView[RENDERER];
      attrName = normalizeDebugBindingName(attrName);
      const debugValue = normalizeDebugBindingValue(value);
      if (type & 3 /* AnyRNode */) {
          if (value == null) {
              isProceduralRenderer(renderer) ? renderer.removeAttribute(element, attrName) :
                  element.removeAttribute(attrName);
          }
          else {
              isProceduralRenderer(renderer) ?
                  renderer.setAttribute(element, attrName, debugValue) :
                  element.setAttribute(attrName, debugValue);
          }
      }
      else {
          const textContent = escapeCommentText(`bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`);
          if (isProceduralRenderer(renderer)) {
              renderer.setValue(element, textContent);
          }
          else {
              element.textContent = textContent;
          }
      }
  }
  function setNgReflectProperties(lView, element, type, dataValue, value) {
      if (type & (3 /* AnyRNode */ | 4 /* Container */)) {
          /**
           * dataValue is an array containing runtime input or output names for the directives:
           * i+0: directive instance index
           * i+1: privateName
           *
           * e.g. [0, 'change', 'change-minified']
           * we want to set the reflected property with the privateName: dataValue[i+1]
           */
          for (let i = 0; i < dataValue.length; i += 2) {
              setNgReflectProperty(lView, element, type, dataValue[i + 1], value);
          }
      }
  }
  /**
   * Validates that the property of the element is known at runtime and returns
   * false if it's not the case.
   * This check is relevant for JIT-compiled components (for AOT-compiled
   * ones this check happens at build time).
   *
   * The property is considered known if either:
   * - it's a known property of the element
   * - the element is allowed by one of the schemas
   * - the property is used for animations
   *
   * @param element Element to validate
   * @param tagName Name of the tag to check
   * @param propName Name of the property to check
   * @param schemas Array of schemas
   */
  function validateProperty(element, tagName, propName, schemas) {
      // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
      // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
      // defined as an array (as an empty array in case `schemas` field is not defined) and we should
      // execute the check below.
      if (schemas === null)
          return true;
      // The property is considered valid if the element matches the schema, it exists on the element,
      // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).
      if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {
          return true;
      }
      // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we
      // need to account for both here, while being careful with `typeof null` also returning 'object'.
      return typeof Node === 'undefined' || Node === null || !(element instanceof Node);
  }
  /**
   * Returns true if the tag name is allowed by specified schemas.
   * @param schemas Array of schemas
   * @param tagName Name of the tag
   */
  function matchingSchemas(schemas, tagName) {
      if (schemas !== null) {
          for (let i = 0; i < schemas.length; i++) {
              const schema = schemas[i];
              if (schema === NO_ERRORS_SCHEMA ||
                  schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {
                  return true;
              }
          }
      }
      return false;
  }
  /**
   * Logs an error that a property is not supported on an element.
   * @param propName Name of the invalid property.
   * @param tagName Name of the node on which we encountered the property.
   */
  function logUnknownPropertyError(propName, tagName) {
      const message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'.`;
      console.error(formatRuntimeError(303 /* UNKNOWN_BINDING */, message));
  }
  /**
   * Instantiate a root component.
   */
  function instantiateRootComponent(tView, lView, def) {
      const rootTNode = getCurrentTNode();
      if (tView.firstCreatePass) {
          if (def.providersResolver)
              def.providersResolver(def);
          const directiveIndex = allocExpando(tView, lView, 1, null);
          ngDevMode &&
              assertEqual(directiveIndex, rootTNode.directiveStart, 'Because this is a root component the allocated expando should match the TNode component.');
          configureViewWithDirective(tView, rootTNode, lView, directiveIndex, def);
      }
      const directive = getNodeInjectable(lView, tView, rootTNode.directiveStart, rootTNode);
      attachPatchData(directive, lView);
      const native = getNativeByTNode(rootTNode, lView);
      if (native) {
          attachPatchData(native, lView);
      }
      return directive;
  }
  /**
   * Resolve the matched directives on a node.
   */
  function resolveDirectives(tView, lView, tNode, localRefs) {
      // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in
      // tsickle.
      ngDevMode && assertFirstCreatePass(tView);
      let hasDirectives = false;
      if (getBindingsEnabled()) {
          const directiveDefs = findDirectiveDefMatches(tView, lView, tNode);
          const exportsMap = localRefs === null ? null : { '': -1 };
          if (directiveDefs !== null) {
              hasDirectives = true;
              initTNodeFlags(tNode, tView.data.length, directiveDefs.length);
              // When the same token is provided by several directives on the same node, some rules apply in
              // the viewEngine:
              // - viewProviders have priority over providers
              // - the last directive in NgModule.declarations has priority over the previous one
              // So to match these rules, the order in which providers are added in the arrays is very
              // important.
              for (let i = 0; i < directiveDefs.length; i++) {
                  const def = directiveDefs[i];
                  if (def.providersResolver)
                      def.providersResolver(def);
              }
              let preOrderHooksFound = false;
              let preOrderCheckHooksFound = false;
              let directiveIdx = allocExpando(tView, lView, directiveDefs.length, null);
              ngDevMode &&
                  assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');
              for (let i = 0; i < directiveDefs.length; i++) {
                  const def = directiveDefs[i];
                  // Merge the attrs in the order of matches. This assumes that the first directive is the
                  // component itself, so that the component has the least priority.
                  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
                  configureViewWithDirective(tView, tNode, lView, directiveIdx, def);
                  saveNameToExportMap(directiveIdx, def, exportsMap);
                  if (def.contentQueries !== null)
                      tNode.flags |= 8 /* hasContentQuery */;
                  if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)
                      tNode.flags |= 128 /* hasHostBindings */;
                  const lifeCycleHooks = def.type.prototype;
                  // Only push a node index into the preOrderHooks array if this is the first
                  // pre-order hook found on this node.
                  if (!preOrderHooksFound &&
                      (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
                      // We will push the actual hook function into this array later during dir instantiation.
                      // We cannot do it now because we must ensure hooks are registered in the same
                      // order that directives are created (i.e. injection order).
                      (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index);
                      preOrderHooksFound = true;
                  }
                  if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
                      (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index);
                      preOrderCheckHooksFound = true;
                  }
                  directiveIdx++;
              }
              initializeInputAndOutputAliases(tView, tNode);
          }
          if (exportsMap)
              cacheMatchingLocalNames(tNode, localRefs, exportsMap);
      }
      // Merge the template attrs last so that they have the highest priority.
      tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
      return hasDirectives;
  }
  /**
   * Add `hostBindings` to the `TView.hostBindingOpCodes`.
   *
   * @param tView `TView` to which the `hostBindings` should be added.
   * @param tNode `TNode` the element which contains the directive
   * @param lView `LView` current `LView`
   * @param directiveIdx Directive index in view.
   * @param directiveVarsIdx Where will the directive's vars be stored
   * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.
   */
  function registerHostBindingOpCodes(tView, tNode, lView, directiveIdx, directiveVarsIdx, def) {
      ngDevMode && assertFirstCreatePass(tView);
      const hostBindings = def.hostBindings;
      if (hostBindings) {
          let hostBindingOpCodes = tView.hostBindingOpCodes;
          if (hostBindingOpCodes === null) {
              hostBindingOpCodes = tView.hostBindingOpCodes = [];
          }
          const elementIndx = ~tNode.index;
          if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
              // Conditionally add select element so that we are more efficient in execution.
              // NOTE: this is strictly not necessary and it trades code size for runtime perf.
              // (We could just always add it.)
              hostBindingOpCodes.push(elementIndx);
          }
          hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
      }
  }
  /**
   * Returns the last selected element index in the `HostBindingOpCodes`
   *
   * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only
   * if it changes. This method returns the last index (or '0' if not found.)
   *
   * Selected element index are only the ones which are negative.
   */
  function lastSelectedElementIdx(hostBindingOpCodes) {
      let i = hostBindingOpCodes.length;
      while (i > 0) {
          const value = hostBindingOpCodes[--i];
          if (typeof value === 'number' && value < 0) {
              return value;
          }
      }
      return 0;
  }
  /**
   * Instantiate all the directives that were previously resolved on the current node.
   */
  function instantiateAllDirectives(tView, lView, tNode, native) {
      const start = tNode.directiveStart;
      const end = tNode.directiveEnd;
      if (!tView.firstCreatePass) {
          getOrCreateNodeInjectorForNode(tNode, lView);
      }
      attachPatchData(native, lView);
      const initialInputs = tNode.initialInputs;
      for (let i = start; i < end; i++) {
          const def = tView.data[i];
          const isComponent = isComponentDef(def);
          if (isComponent) {
              ngDevMode && assertTNodeType(tNode, 3 /* AnyRNode */);
              addComponentLogic(lView, tNode, def);
          }
          const directive = getNodeInjectable(lView, tView, i, tNode);
          attachPatchData(directive, lView);
          if (initialInputs !== null) {
              setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
          }
          if (isComponent) {
              const componentView = getComponentLViewByIndex(tNode.index, lView);
              componentView[CONTEXT] = directive;
          }
      }
  }
  function invokeDirectivesHostBindings(tView, lView, tNode) {
      const start = tNode.directiveStart;
      const end = tNode.directiveEnd;
      const firstCreatePass = tView.firstCreatePass;
      const elementIndex = tNode.index;
      const currentDirectiveIndex = getCurrentDirectiveIndex();
      try {
          setSelectedIndex(elementIndex);
          for (let dirIndex = start; dirIndex < end; dirIndex++) {
              const def = tView.data[dirIndex];
              const directive = lView[dirIndex];
              setCurrentDirectiveIndex(dirIndex);
              if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
                  invokeHostBindingsInCreationMode(def, directive);
              }
          }
      }
      finally {
          setSelectedIndex(-1);
          setCurrentDirectiveIndex(currentDirectiveIndex);
      }
  }
  /**
   * Invoke the host bindings in creation mode.
   *
   * @param def `DirectiveDef` which may contain the `hostBindings` function.
   * @param directive Instance of directive.
   */
  function invokeHostBindingsInCreationMode(def, directive) {
      if (def.hostBindings !== null) {
          def.hostBindings(1 /* Create */, directive);
      }
  }
  /**
   * Matches the current node against all available selectors.
   * If a component is matched (at most one), it is returned in first position in the array.
   */
  function findDirectiveDefMatches(tView, viewData, tNode) {
      ngDevMode && assertFirstCreatePass(tView);
      ngDevMode && assertTNodeType(tNode, 3 /* AnyRNode */ | 12 /* AnyContainer */);
      const registry = tView.directiveRegistry;
      let matches = null;
      if (registry) {
          for (let i = 0; i < registry.length; i++) {
              const def = registry[i];
              if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {
                  matches || (matches = ngDevMode ? new MatchesArray() : []);
                  diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);
                  if (isComponentDef(def)) {
                      if (ngDevMode) {
                          assertTNodeType(tNode, 2 /* Element */, `"${tNode.value}" tags cannot be used as component hosts. ` +
                              `Please use a different tag to activate the ${stringify(def.type)} component.`);
                          if (tNode.flags & 2 /* isComponentHost */) {
                              // If another component has been matched previously, it's the first element in the
                              // `matches` array, see how we store components/directives in `matches` below.
                              throwMultipleComponentError(tNode, matches[0].type, def.type);
                          }
                      }
                      markAsComponentHost(tView, tNode);
                      // The component is always stored first with directives after.
                      matches.unshift(def);
                  }
                  else {
                      matches.push(def);
                  }
              }
          }
      }
      return matches;
  }
  /**
   * Marks a given TNode as a component's host. This consists of:
   * - setting appropriate TNode flags;
   * - storing index of component's host element so it will be queued for view refresh during CD.
   */
  function markAsComponentHost(tView, hostTNode) {
      ngDevMode && assertFirstCreatePass(tView);
      hostTNode.flags |= 2 /* isComponentHost */;
      (tView.components || (tView.components = ngDevMode ? new TViewComponents() : []))
          .push(hostTNode.index);
  }
  /** Caches local names and their matching directive indices for query and template lookups. */
  function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
      if (localRefs) {
          const localNames = tNode.localNames = ngDevMode ? new TNodeLocalNames() : [];
          // Local names must be stored in tNode in the same order that localRefs are defined
          // in the template to ensure the data is loaded in the same slots as their refs
          // in the template (for template queries).
          for (let i = 0; i < localRefs.length; i += 2) {
              const index = exportsMap[localRefs[i + 1]];
              if (index == null)
                  throw new RuntimeError(-301 /* EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);
              localNames.push(localRefs[i], index);
          }
      }
  }
  /**
   * Builds up an export map as directives are created, so local refs can be quickly mapped
   * to their directive instances.
   */
  function saveNameToExportMap(directiveIdx, def, exportsMap) {
      if (exportsMap) {
          if (def.exportAs) {
              for (let i = 0; i < def.exportAs.length; i++) {
                  exportsMap[def.exportAs[i]] = directiveIdx;
              }
          }
          if (isComponentDef(def))
              exportsMap[''] = directiveIdx;
      }
  }
  /**
   * Initializes the flags on the current node, setting all indices to the initial index,
   * the directive count to 0, and adding the isComponent flag.
   * @param index the initial index
   */
  function initTNodeFlags(tNode, index, numberOfDirectives) {
      ngDevMode &&
          assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');
      tNode.flags |= 1 /* isDirectiveHost */;
      // When the first directive is created on a node, save the index
      tNode.directiveStart = index;
      tNode.directiveEnd = index + numberOfDirectives;
      tNode.providerIndexes = index;
  }
  /**
   * Setup directive for instantiation.
   *
   * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well
   * as `LView`. `TView` gets the `DirectiveDef`.
   *
   * @param tView `TView`
   * @param tNode `TNode`
   * @param lView `LView`
   * @param directiveIndex Index where the directive will be stored in the Expando.
   * @param def `DirectiveDef`
   */
  function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
      ngDevMode &&
          assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');
      tView.data[directiveIndex] = def;
      const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
      const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);
      tView.blueprint[directiveIndex] = nodeInjectorFactory;
      lView[directiveIndex] = nodeInjectorFactory;
      registerHostBindingOpCodes(tView, tNode, lView, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
  }
  function addComponentLogic(lView, hostTNode, def) {
      const native = getNativeByTNode(hostTNode, lView);
      const tView = getOrCreateTComponentView(def);
      // Only component views should be added to the view tree directly. Embedded views are
      // accessed through their containers because they may be removed / re-added later.
      const rendererFactory = lView[RENDERER_FACTORY];
      const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, native, hostTNode, rendererFactory, rendererFactory.createRenderer(native, def), null, null));
      // Component view will always be created before any injected LContainers,
      // so this is a regular element, wrap it with the component view
      lView[hostTNode.index] = componentView;
  }
  function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
      if (ngDevMode) {
          assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
          validateAgainstEventAttributes(name);
          assertTNodeType(tNode, 2 /* Element */, `Attempted to set attribute \`${name}\` on a container node. ` +
              `Host bindings are not valid on ng-container or ng-template.`);
      }
      const element = getNativeByTNode(tNode, lView);
      setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);
  }
  function setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {
      if (value == null) {
          ngDevMode && ngDevMode.rendererRemoveAttribute++;
          isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :
              element.removeAttribute(name);
      }
      else {
          ngDevMode && ngDevMode.rendererSetAttribute++;
          const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);
          if (isProceduralRenderer(renderer)) {
              renderer.setAttribute(element, name, strValue, namespace);
          }
          else {
              namespace ? element.setAttributeNS(namespace, name, strValue) :
                  element.setAttribute(name, strValue);
          }
      }
  }
  /**
   * Sets initial input properties on directive instances from attribute data
   *
   * @param lView Current LView that is being processed.
   * @param directiveIndex Index of the directive in directives array
   * @param instance Instance of the directive on which to set the initial inputs
   * @param def The directive def that contains the list of inputs
   * @param tNode The static data for this node
   */
  function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
      const initialInputs = initialInputData[directiveIndex];
      if (initialInputs !== null) {
          const setInput = def.setInput;
          for (let i = 0; i < initialInputs.length;) {
              const publicName = initialInputs[i++];
              const privateName = initialInputs[i++];
              const value = initialInputs[i++];
              if (setInput !== null) {
                  def.setInput(instance, value, publicName, privateName);
              }
              else {
                  instance[privateName] = value;
              }
              if (ngDevMode) {
                  const nativeElement = getNativeByTNode(tNode, lView);
                  setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
              }
          }
      }
  }
  /**
   * Generates initialInputData for a node and stores it in the template's static storage
   * so subsequent template invocations don't have to recalculate it.
   *
   * initialInputData is an array containing values that need to be set as input properties
   * for directives on this node, but only once on creation. We need this array to support
   * the case where you set an @Input property of a directive using attribute-like syntax.
   * e.g. if you have a `name` @Input, you can set it once like this:
   *
   * <my-component name="Bess"></my-component>
   *
   * @param inputs The list of inputs from the directive def
   * @param attrs The static attrs on this node
   */
  function generateInitialInputs(inputs, attrs) {
      let inputsToStore = null;
      let i = 0;
      while (i < attrs.length) {
          const attrName = attrs[i];
          if (attrName === 0 /* NamespaceURI */) {
              // We do not allow inputs on namespaced attributes.
              i += 4;
              continue;
          }
          else if (attrName === 5 /* ProjectAs */) {
              // Skip over the `ngProjectAs` value.
              i += 2;
              continue;
          }
          // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.
          if (typeof attrName === 'number')
              break;
          if (inputs.hasOwnProperty(attrName)) {
              if (inputsToStore === null)
                  inputsToStore = [];
              inputsToStore.push(attrName, inputs[attrName], attrs[i + 1]);
          }
          i += 2;
      }
      return inputsToStore;
  }
  //////////////////////////
  //// ViewContainer & View
  //////////////////////////
  // Not sure why I need to do `any` here but TS complains later.
  const LContainerArray = class LContainer extends Array {
  };
  /**
   * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.
   *
   * @param hostNative The host element for the LContainer
   * @param hostTNode The host TNode for the LContainer
   * @param currentView The parent view of the LContainer
   * @param native The native comment element
   * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case
   * @returns LContainer
   */
  function createLContainer(hostNative, currentView, native, tNode) {
      ngDevMode && assertLView(currentView);
      ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(native);
      // https://jsperf.com/array-literal-vs-new-array-really
      const lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native
      true, // Boolean `true` in this position signifies that this is an `LContainer`
      false, // has transplanted views
      currentView, // parent
      null, // next
      0, // transplanted views to refresh count
      tNode, // t_host
      native, // native,
      null, // view refs
      null);
      ngDevMode &&
          assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');
      ngDevMode && attachLContainerDebug(lContainer);
      return lContainer;
  }
  /**
   * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes
   * them by executing an associated template function.
   */
  function refreshEmbeddedViews(lView) {
      for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
          for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
              const embeddedLView = lContainer[i];
              const embeddedTView = embeddedLView[TVIEW];
              ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
              if (viewAttachedToChangeDetector(embeddedLView)) {
                  refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
              }
          }
      }
  }
  /**
   * Mark transplanted views as needing to be refreshed at their insertion points.
   *
   * @param lView The `LView` that may have transplanted views.
   */
  function markTransplantedViewsForRefresh(lView) {
      for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
          if (!lContainer[HAS_TRANSPLANTED_VIEWS])
              continue;
          const movedViews = lContainer[MOVED_VIEWS];
          ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');
          for (let i = 0; i < movedViews.length; i++) {
              const movedLView = movedViews[i];
              const insertionLContainer = movedLView[PARENT];
              ngDevMode && assertLContainer(insertionLContainer);
              // We don't want to increment the counter if the moved LView was already marked for
              // refresh.
              if ((movedLView[FLAGS] & 1024 /* RefreshTransplantedView */) === 0) {
                  updateTransplantedViewCount(insertionLContainer, 1);
              }
              // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*
              // those that aren't (declaration component === insertion component). In the latter case,
              // it's fine to add the flag, as we will clear it immediately in
              // `refreshEmbeddedViews` for the view currently being refreshed.
              movedLView[FLAGS] |= 1024 /* RefreshTransplantedView */;
          }
      }
  }
  /////////////
  /**
   * Refreshes components by entering the component view and processing its bindings, queries, etc.
   *
   * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)
   */
  function refreshComponent(hostLView, componentHostIdx) {
      ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');
      const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
      if (viewAttachedToChangeDetector(componentView)) {
          const tView = componentView[TVIEW];
          if (componentView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {
              refreshView(tView, componentView, tView.template, componentView[CONTEXT]);
          }
          else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
              // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
              refreshContainsDirtyView(componentView);
          }
      }
  }
  /**
   * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are
   * children or descendants of the given lView.
   *
   * @param lView The lView which contains descendant transplanted views that need to be refreshed.
   */
  function refreshContainsDirtyView(lView) {
      for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
          for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
              const embeddedLView = lContainer[i];
              if (embeddedLView[FLAGS] & 1024 /* RefreshTransplantedView */) {
                  const embeddedTView = embeddedLView[TVIEW];
                  ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
                  refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
              }
              else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
                  refreshContainsDirtyView(embeddedLView);
              }
          }
      }
      const tView = lView[TVIEW];
      // Refresh child component views.
      const components = tView.components;
      if (components !== null) {
          for (let i = 0; i < components.length; i++) {
              const componentView = getComponentLViewByIndex(components[i], lView);
              // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
              if (viewAttachedToChangeDetector(componentView) &&
                  componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
                  refreshContainsDirtyView(componentView);
              }
          }
      }
  }
  function renderComponent$1(hostLView, componentHostIdx) {
      ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');
      const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
      const componentTView = componentView[TVIEW];
      syncViewWithBlueprint(componentTView, componentView);
      renderView(componentTView, componentView, componentView[CONTEXT]);
  }
  /**
   * Syncs an LView instance with its blueprint if they have gotten out of sync.
   *
   * Typically, blueprints and their view instances should always be in sync, so the loop here
   * will be skipped. However, consider this case of two components side-by-side:
   *
   * App template:
   * ```
   * <comp></comp>
   * <comp></comp>
   * ```
   *
   * The following will happen:
   * 1. App template begins processing.
   * 2. First <comp> is matched as a component and its LView is created.
   * 3. Second <comp> is matched as a component and its LView is created.
   * 4. App template completes processing, so it's time to check child templates.
   * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.
   * 6. Second <comp> template is checked. Its blueprint has been updated by the first
   * <comp> template, but its LView was created before this update, so it is out of sync.
   *
   * Note that embedded views inside ngFor loops will never be out of sync because these views
   * are processed as soon as they are created.
   *
   * @param tView The `TView` that contains the blueprint for syncing
   * @param lView The view to sync
   */
  function syncViewWithBlueprint(tView, lView) {
      for (let i = lView.length; i < tView.blueprint.length; i++) {
          lView.push(tView.blueprint[i]);
      }
  }
  /**
   * Adds LView or LContainer to the end of the current view tree.
   *
   * This structure will be used to traverse through nested views to remove listeners
   * and call onDestroy callbacks.
   *
   * @param lView The view where LView or LContainer should be added
   * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header
   * @param lViewOrLContainer The LView or LContainer to add to the view tree
   * @returns The state passed in
   */
  function addToViewTree(lView, lViewOrLContainer) {
      // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer
      // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out
      // of order, the change detection will run out of order, as the act of retrieving the the
      // LContainer from the RNode is what adds it to the queue.
      if (lView[CHILD_HEAD]) {
          lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
      }
      else {
          lView[CHILD_HEAD] = lViewOrLContainer;
      }
      lView[CHILD_TAIL] = lViewOrLContainer;
      return lViewOrLContainer;
  }
  ///////////////////////////////
  //// Change detection
  ///////////////////////////////
  /**
   * Marks current view and all ancestors dirty.
   *
   * Returns the root view because it is found as a byproduct of marking the view tree
   * dirty, and can be used by methods that consume markViewDirty() to easily schedule
   * change detection. Otherwise, such methods would need to traverse up the view tree
   * an additional time to get the root view and schedule a tick on it.
   *
   * @param lView The starting LView to mark dirty
   * @returns the root LView
   */
  function markViewDirty(lView) {
      while (lView) {
          lView[FLAGS] |= 64 /* Dirty */;
          const parent = getLViewParent(lView);
          // Stop traversing up as soon as you find a root view that wasn't attached to any container
          if (isRootView(lView) && !parent) {
              return lView;
          }
          // continue otherwise
          lView = parent;
      }
      return null;
  }
  /**
   * Used to schedule change detection on the whole application.
   *
   * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.
   * It is usually called indirectly by calling `markDirty` when the view needs to be
   * re-rendered.
   *
   * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple
   * `scheduleTick` requests. The scheduling function can be overridden in
   * `renderComponent`'s `scheduler` option.
   */
  function scheduleTick(rootContext, flags) {
      const nothingScheduled = rootContext.flags === 0 /* Empty */;
      if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {
          // https://github.com/angular/angular/issues/39296
          // should only attach the flags when really scheduling a tick
          rootContext.flags |= flags;
          let res;
          rootContext.clean = new Promise((r) => res = r);
          rootContext.scheduler(() => {
              if (rootContext.flags & 1 /* DetectChanges */) {
                  rootContext.flags &= ~1 /* DetectChanges */;
                  tickRootContext(rootContext);
              }
              if (rootContext.flags & 2 /* FlushPlayers */) {
                  rootContext.flags &= ~2 /* FlushPlayers */;
                  const playerHandler = rootContext.playerHandler;
                  if (playerHandler) {
                      playerHandler.flushPlayers();
                  }
              }
              rootContext.clean = _CLEAN_PROMISE;
              res(null);
          });
      }
  }
  function tickRootContext(rootContext) {
      for (let i = 0; i < rootContext.components.length; i++) {
          const rootComponent = rootContext.components[i];
          const lView = readPatchedLView(rootComponent);
          const tView = lView[TVIEW];
          renderComponentOrTemplate(tView, lView, tView.template, rootComponent);
      }
  }
  function detectChangesInternal(tView, lView, context) {
      const rendererFactory = lView[RENDERER_FACTORY];
      if (rendererFactory.begin)
          rendererFactory.begin();
      try {
          refreshView(tView, lView, tView.template, context);
      }
      catch (error) {
          handleError(lView, error);
          throw error;
      }
      finally {
          if (rendererFactory.end)
              rendererFactory.end();
      }
  }
  /**
   * Synchronously perform change detection on a root view and its components.
   *
   * @param lView The view which the change detection should be performed on.
   */
  function detectChangesInRootView(lView) {
      tickRootContext(lView[CONTEXT]);
  }
  function checkNoChangesInternal(tView, view, context) {
      setIsInCheckNoChangesMode(true);
      try {
          detectChangesInternal(tView, view, context);
      }
      finally {
          setIsInCheckNoChangesMode(false);
      }
  }
  /**
   * Checks the change detector on a root view and its components, and throws if any changes are
   * detected.
   *
   * This is used in development mode to verify that running change detection doesn't
   * introduce other changes.
   *
   * @param lView The view which the change detection should be checked on.
   */
  function checkNoChangesInRootView(lView) {
      setIsInCheckNoChangesMode(true);
      try {
          detectChangesInRootView(lView);
      }
      finally {
          setIsInCheckNoChangesMode(false);
      }
  }
  function executeViewQueryFn(flags, viewQueryFn, component) {
      ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');
      setCurrentQueryIndex(0);
      viewQueryFn(flags, component);
  }
  ///////////////////////////////
  //// Bindings & interpolations
  ///////////////////////////////
  /**
   * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.
   *
   * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:
   * - a bound property name;
   * - a static parts of interpolated strings;
   *
   * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a
   * property binding metadata will be stored in `TView.data` at the same index as a bound value in
   * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the
   * following format:
   * - `propertyName` for bound properties;
   * - `propertyNameï¿½prefixï¿½interpolation_static_part1ï¿½..interpolation_static_partNï¿½suffix` for
   * interpolated properties.
   *
   * @param tData `TData` where meta-data will be saved;
   * @param tNode `TNode` that is a target of the binding;
   * @param propertyName bound property name;
   * @param bindingIndex binding index in `LView`
   * @param interpolationParts static interpolation parts (for property interpolations)
   */
  function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {
      // Binding meta-data are stored only the first time a given property instruction is processed.
      // Since we don't have a concept of the "first update pass" we need to check for presence of the
      // binding meta-data to decide if one should be stored (or if was stored already).
      if (tData[bindingIndex] === null) {
          if (tNode.inputs == null || !tNode.inputs[propertyName]) {
              const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
              propBindingIdxs.push(bindingIndex);
              let bindingMetadata = propertyName;
              if (interpolationParts.length > 0) {
                  bindingMetadata +=
                      INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
              }
              tData[bindingIndex] = bindingMetadata;
          }
      }
  }
  const CLEAN_PROMISE = _CLEAN_PROMISE;
  function getOrCreateLViewCleanup(view) {
      // top level variables should not be exported for performance reasons (PERF_NOTES.md)
      return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);
  }
  function getOrCreateTViewCleanup(tView) {
      return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);
  }
  /**
   * There are cases where the sub component's renderer needs to be included
   * instead of the current renderer (see the componentSyntheticHost* instructions).
   */
  function loadComponentRenderer(currentDef, tNode, lView) {
      // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root
      // component (see packages/core/src/render3/component.ts). This is not consistent with the process
      // of creating inner components, when current directive index is available in the state. In order
      // to avoid relying on current def being `null` (thus special-casing root component creation), the
      // process of creating root component should be unified with the process of creating inner
      // components.
      if (currentDef === null || isComponentDef(currentDef)) {
          lView = unwrapLView(lView[tNode.index]);
      }
      return lView[RENDERER];
  }
  /** Handles an error thrown in an LView. */
  function handleError(lView, error) {
      const injector = lView[INJECTOR$1];
      const errorHandler = injector ? injector.get(ErrorHandler, null) : null;
      errorHandler && errorHandler.handleError(error);
  }
  /**
   * Set the inputs of directives at the current node to corresponding value.
   *
   * @param tView The current TView
   * @param lView the `LView` which contains the directives.
   * @param inputs mapping between the public "input" name and privately-known,
   *        possibly minified, property names to write to.
   * @param value Value to set.
   */
  function setInputsForProperty(tView, lView, inputs, publicName, value) {
      for (let i = 0; i < inputs.length;) {
          const index = inputs[i++];
          const privateName = inputs[i++];
          const instance = lView[index];
          ngDevMode && assertIndexInRange(lView, index);
          const def = tView.data[index];
          if (def.setInput !== null) {
              def.setInput(instance, value, publicName, privateName);
          }
          else {
              instance[privateName] = value;
          }
      }
  }
  /**
   * Updates a text binding at a given index in a given LView.
   */
  function textBindingInternal(lView, index, value) {
      ngDevMode && assertString(value, 'Value should be a string');
      ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');
      ngDevMode && assertIndexInRange(lView, index);
      const element = getNativeByIndex(index, lView);
      ngDevMode && assertDefined(element, 'native element should exist');
      updateTextNode(lView[RENDERER], element, value);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Compute the static styling (class/style) from `TAttributes`.
   *
   * This function should be called during `firstCreatePass` only.
   *
   * @param tNode The `TNode` into which the styling information should be loaded.
   * @param attrs `TAttributes` containing the styling information.
   * @param writeToHost Where should the resulting static styles be written?
   *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`
   *   - `true` Write to `TNode.styles` / `TNode.classes`
   */
  function computeStaticStyling(tNode, attrs, writeToHost) {
      ngDevMode &&
          assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');
      let styles = writeToHost ? tNode.styles : null;
      let classes = writeToHost ? tNode.classes : null;
      let mode = 0;
      if (attrs !== null) {
          for (let i = 0; i < attrs.length; i++) {
              const value = attrs[i];
              if (typeof value === 'number') {
                  mode = value;
              }
              else if (mode == 1 /* Classes */) {
                  classes = concatStringsWithSpace(classes, value);
              }
              else if (mode == 2 /* Styles */) {
                  const style = value;
                  const styleValue = attrs[++i];
                  styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');
              }
          }
      }
      writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
      writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Synchronously perform change detection on a component (and possibly its sub-components).
   *
   * This function triggers change detection in a synchronous way on a component.
   *
   * @param component The component which the change detection should be performed on.
   */
  function detectChanges(component) {
      const view = getComponentViewByInstance(component);
      detectChangesInternal(view[TVIEW], view, component);
  }
  /**
   * Marks the component as dirty (needing change detection). Marking a component dirty will
   * schedule a change detection on it at some point in the future.
   *
   * Marking an already dirty component as dirty won't do anything. Only one outstanding change
   * detection can be scheduled per component tree.
   *
   * @param component Component to mark as dirty.
   */
  function markDirty(component) {
      ngDevMode && assertDefined(component, 'component');
      const rootView = markViewDirty(getComponentViewByInstance(component));
      ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');
      scheduleTick(rootView[CONTEXT], 1 /* DetectChanges */);
  }
  /**
   * Used to perform change detection on the whole application.
   *
   * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`
   * executes lifecycle hooks and conditionally checks components based on their
   * `ChangeDetectionStrategy` and dirtiness.
   *
   * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally
   * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a
   * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can
   * be changed when calling `renderComponent` and providing the `scheduler` option.
   */
  function tick(component) {
      const rootView = getRootView(component);
      const rootContext = rootView[CONTEXT];
      tickRootContext(rootContext);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.
   *
   * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a
   * project.
   *
   * @publicApi
   */
  const INJECTOR = new InjectionToken('INJECTOR', 
  // Dissable tslint because this is const enum which gets inlined not top level prop access.
  // tslint:disable-next-line: no-toplevel-property-access
  -1 /* Injector */);
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class NullInjector {
      get(token, notFoundValue = THROW_IF_NOT_FOUND) {
          if (notFoundValue === THROW_IF_NOT_FOUND) {
              const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);
              error.name = 'NullInjectorError';
              throw error;
          }
          return notFoundValue;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * An internal token whose presence in an injector indicates that the injector should treat itself
   * as a root scoped injector when processing requests for unknown tokens which may indicate
   * they are provided in the root scope.
   */
  const INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Marker which indicates that a value has not yet been created from the factory function.
   */
  const NOT_YET = {};
  /**
   * Marker which indicates that the factory function for a token is in the process of being called.
   *
   * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates
   * injection of a dependency has recursively attempted to inject the original token, and there is
   * a circular dependency among the providers.
   */
  const CIRCULAR = {};
  /**
   * A lazily initialized NullInjector.
   */
  let NULL_INJECTOR$1 = undefined;
  function getNullInjector() {
      if (NULL_INJECTOR$1 === undefined) {
          NULL_INJECTOR$1 = new NullInjector();
      }
      return NULL_INJECTOR$1;
  }
  /**
   * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.
   *
   * @publicApi
   */
  function createInjector(defType, parent = null, additionalProviders = null, name) {
      const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);
      injector._resolveInjectorDefTypes();
      return injector;
  }
  /**
   * Creates a new injector without eagerly resolving its injector types. Can be used in places
   * where resolving the injector types immediately can lead to an infinite loop. The injector types
   * should be resolved at a later point by calling `_resolveInjectorDefTypes`.
   */
  function createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name) {
      return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);
  }
  class R3Injector {
      constructor(def, additionalProviders, parent, source = null) {
          this.parent = parent;
          /**
           * Map of tokens to records which contain the instances of those tokens.
           * - `null` value implies that we don't have the record. Used by tree-shakable injectors
           * to prevent further searches.
           */
          this.records = new Map();
          /**
           * The transitive set of `InjectorType`s which define this injector.
           */
          this.injectorDefTypes = new Set();
          /**
           * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
           */
          this.onDestroy = new Set();
          this._destroyed = false;
          const dedupStack = [];
          // Start off by creating Records for every provider declared in every InjectorType
          // included transitively in additional providers then do the same for `def`. This order is
          // important because `def` may include providers that override ones in additionalProviders.
          additionalProviders &&
              deepForEach(additionalProviders, provider => this.processProvider(provider, def, additionalProviders));
          deepForEach([def], injectorDef => this.processInjectorType(injectorDef, [], dedupStack));
          // Make sure the INJECTOR token provides this injector.
          this.records.set(INJECTOR, makeRecord(undefined, this));
          // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide
          // any injectable scoped to APP_ROOT_SCOPE.
          const record = this.records.get(INJECTOR_SCOPE);
          this.scope = record != null ? record.value : null;
          // Source name, used for debugging
          this.source = source || (typeof def === 'object' ? null : stringify(def));
      }
      /**
       * Flag indicating that this injector was previously destroyed.
       */
      get destroyed() {
          return this._destroyed;
      }
      /**
       * Destroy the injector and release references to every instance or provider associated with it.
       *
       * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
       * hook was found.
       */
      destroy() {
          this.assertNotDestroyed();
          // Set destroyed = true first, in case lifecycle hooks re-enter destroy().
          this._destroyed = true;
          try {
              // Call all the lifecycle hooks.
              this.onDestroy.forEach(service => service.ngOnDestroy());
          }
          finally {
              // Release all references.
              this.records.clear();
              this.onDestroy.clear();
              this.injectorDefTypes.clear();
          }
      }
      get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {
          this.assertNotDestroyed();
          // Set the injection context.
          const previousInjector = setCurrentInjector(this);
          const previousInjectImplementation = setInjectImplementation(undefined);
          try {
              // Check for the SkipSelf flag.
              if (!(flags & InjectFlags.SkipSelf)) {
                  // SkipSelf isn't set, check if the record belongs to this injector.
                  let record = this.records.get(token);
                  if (record === undefined) {
                      // No record, but maybe the token is scoped to this injector. Look for an injectable
                      // def with a scope matching this injector.
                      const def = couldBeInjectableType(token) && getInjectableDef(token);
                      if (def && this.injectableDefInScope(def)) {
                          // Found an injectable def and it's scoped to this injector. Pretend as if it was here
                          // all along.
                          record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
                      }
                      else {
                          record = null;
                      }
                      this.records.set(token, record);
                  }
                  // If a record was found, get the instance for it and return it.
                  if (record != null /* NOT null || undefined */) {
                      return this.hydrate(token, record);
                  }
              }
              // Select the next injector based on the Self flag - if self is set, the next injector is
              // the NullInjector, otherwise it's the parent.
              const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();
              // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue
              // is undefined, the value is null, otherwise it's the notFoundValue.
              notFoundValue = (flags & InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?
                  null :
                  notFoundValue;
              return nextInjector.get(token, notFoundValue);
          }
          catch (e) {
              if (e.name === 'NullInjectorError') {
                  const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
                  path.unshift(stringify(token));
                  if (previousInjector) {
                      // We still have a parent injector, keep throwing
                      throw e;
                  }
                  else {
                      // Format & throw the final error message when we don't have any previous injector
                      return catchInjectorError(e, token, 'R3InjectorError', this.source);
                  }
              }
              else {
                  throw e;
              }
          }
          finally {
              // Lastly, restore the previous injection context.
              setInjectImplementation(previousInjectImplementation);
              setCurrentInjector(previousInjector);
          }
      }
      /** @internal */
      _resolveInjectorDefTypes() {
          this.injectorDefTypes.forEach(defType => this.get(defType));
      }
      toString() {
          const tokens = [], records = this.records;
          records.forEach((v, token) => tokens.push(stringify(token)));
          return `R3Injector[${tokens.join(', ')}]`;
      }
      assertNotDestroyed() {
          if (this._destroyed) {
              throw new RuntimeError(205 /* INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');
          }
      }
      /**
       * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers
       * to this injector.
       *
       * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,
       * the function will return "true" to indicate that the providers of the type definition need
       * to be processed. This allows us to process providers of injector types after all imports of
       * an injector definition are processed. (following View Engine semantics: see FW-1349)
       */
      processInjectorType(defOrWrappedDef, parents, dedupStack) {
          defOrWrappedDef = resolveForwardRef(defOrWrappedDef);
          if (!defOrWrappedDef)
              return false;
          // Either the defOrWrappedDef is an InjectorType (with injector def) or an
          // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic
          // read, so care is taken to only do the read once.
          // First attempt to read the injector def (`Éµinj`).
          let def = getInjectorDef(defOrWrappedDef);
          // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.
          const ngModule = (def == null) && defOrWrappedDef.ngModule || undefined;
          // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,
          // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type
          // is the `ngModule`.
          const defType = (ngModule === undefined) ? defOrWrappedDef : ngModule;
          // Check for circular dependencies.
          if (ngDevMode && parents.indexOf(defType) !== -1) {
              const defName = stringify(defType);
              const path = parents.map(stringify);
              throwCyclicDependencyError(defName, path);
          }
          // Check for multiple imports of the same module
          const isDuplicate = dedupStack.indexOf(defType) !== -1;
          // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual
          // `InjectorDef` is on its `ngModule`.
          if (ngModule !== undefined) {
              def = getInjectorDef(ngModule);
          }
          // If no definition was found, it might be from exports. Remove it.
          if (def == null) {
              return false;
          }
          // Add providers in the same way that @NgModule resolution did:
          // First, include providers from any imports.
          if (def.imports != null && !isDuplicate) {
              // Before processing defType's imports, add it to the set of parents. This way, if it ends
              // up deeply importing itself, this can be detected.
              ngDevMode && parents.push(defType);
              // Add it to the set of dedups. This way we can detect multiple imports of the same module
              dedupStack.push(defType);
              let importTypesWithProviders;
              try {
                  deepForEach(def.imports, imported => {
                      if (this.processInjectorType(imported, parents, dedupStack)) {
                          if (importTypesWithProviders === undefined)
                              importTypesWithProviders = [];
                          // If the processed import is an injector type with providers, we store it in the
                          // list of import types with providers, so that we can process those afterwards.
                          importTypesWithProviders.push(imported);
                      }
                  });
              }
              finally {
                  // Remove it from the parents set when finished.
                  ngDevMode && parents.pop();
              }
              // Imports which are declared with providers (TypeWithProviders) need to be processed
              // after all imported modules are processed. This is similar to how View Engine
              // processes/merges module imports in the metadata resolver. See: FW-1349.
              if (importTypesWithProviders !== undefined) {
                  for (let i = 0; i < importTypesWithProviders.length; i++) {
                      const { ngModule, providers } = importTypesWithProviders[i];
                      deepForEach(providers, provider => this.processProvider(provider, ngModule, providers || EMPTY_ARRAY));
                  }
              }
          }
          // Track the InjectorType and add a provider for it. It's important that this is done after the
          // def's imports.
          this.injectorDefTypes.add(defType);
          const factory = getFactoryDef(defType) || (() => new defType());
          this.records.set(defType, makeRecord(factory, NOT_YET));
          // Next, include providers listed on the definition itself.
          const defProviders = def.providers;
          if (defProviders != null && !isDuplicate) {
              const injectorType = defOrWrappedDef;
              deepForEach(defProviders, provider => this.processProvider(provider, injectorType, defProviders));
          }
          return (ngModule !== undefined &&
              defOrWrappedDef.providers !== undefined);
      }
      /**
       * Process a `SingleProvider` and add it.
       */
      processProvider(provider, ngModuleType, providers) {
          // Determine the token from the provider. Either it's its own token, or has a {provide: ...}
          // property.
          provider = resolveForwardRef(provider);
          let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);
          // Construct a `Record` for the provider.
          const record = providerToRecord(provider, ngModuleType, providers);
          if (!isTypeProvider(provider) && provider.multi === true) {
              // If the provider indicates that it's a multi-provider, process it specially.
              // First check whether it's been defined already.
              let multiRecord = this.records.get(token);
              if (multiRecord) {
                  // It has. Throw a nice error if
                  if (ngDevMode && multiRecord.multi === undefined) {
                      throwMixedMultiProviderError();
                  }
              }
              else {
                  multiRecord = makeRecord(undefined, NOT_YET, true);
                  multiRecord.factory = () => injectArgs(multiRecord.multi);
                  this.records.set(token, multiRecord);
              }
              token = provider;
              multiRecord.multi.push(provider);
          }
          else {
              const existing = this.records.get(token);
              if (ngDevMode && existing && existing.multi !== undefined) {
                  throwMixedMultiProviderError();
              }
          }
          this.records.set(token, record);
      }
      hydrate(token, record) {
          if (ngDevMode && record.value === CIRCULAR) {
              throwCyclicDependencyError(stringify(token));
          }
          else if (record.value === NOT_YET) {
              record.value = CIRCULAR;
              record.value = record.factory();
          }
          if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {
              this.onDestroy.add(record.value);
          }
          return record.value;
      }
      injectableDefInScope(def) {
          if (!def.providedIn) {
              return false;
          }
          const providedIn = resolveForwardRef(def.providedIn);
          if (typeof providedIn === 'string') {
              return providedIn === 'any' || (providedIn === this.scope);
          }
          else {
              return this.injectorDefTypes.has(providedIn);
          }
      }
  }
  function injectableDefOrInjectorDefFactory(token) {
      // Most tokens will have an injectable def directly on them, which specifies a factory directly.
      const injectableDef = getInjectableDef(token);
      const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);
      if (factory !== null) {
          return factory;
      }
      // InjectionTokens should have an injectable def (Éµprov) and thus should be handled above.
      // If it's missing that, it's an error.
      if (token instanceof InjectionToken) {
          throw new RuntimeError(204 /* INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a Éµprov definition.`);
      }
      // Undecorated types can sometimes be created if they have no constructor arguments.
      if (token instanceof Function) {
          return getUndecoratedInjectableFactory(token);
      }
      // There was no way to resolve a factory for this token.
      throw new RuntimeError(204 /* INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');
  }
  function getUndecoratedInjectableFactory(token) {
      // If the token has parameters then it has dependencies that we cannot resolve implicitly.
      const paramLength = token.length;
      if (paramLength > 0) {
          const args = newArray(paramLength, '?');
          throw new RuntimeError(204 /* INVALID_INJECTION_TOKEN */, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);
      }
      // The constructor function appears to have no parameters.
      // This might be because it inherits from a super-class. In which case, use an injectable
      // def from an ancestor if there is one.
      // Otherwise this really is a simple class with no dependencies, so return a factory that
      // just instantiates the zero-arg constructor.
      const inheritedInjectableDef = getInheritedInjectableDef(token);
      if (inheritedInjectableDef !== null) {
          return () => inheritedInjectableDef.factory(token);
      }
      else {
          return () => new token();
      }
  }
  function providerToRecord(provider, ngModuleType, providers) {
      if (isValueProvider(provider)) {
          return makeRecord(undefined, provider.useValue);
      }
      else {
          const factory = providerToFactory(provider, ngModuleType, providers);
          return makeRecord(factory, NOT_YET);
      }
  }
  /**
   * Converts a `SingleProvider` into a factory function.
   *
   * @param provider provider to convert to factory
   */
  function providerToFactory(provider, ngModuleType, providers) {
      let factory = undefined;
      if (isTypeProvider(provider)) {
          const unwrappedProvider = resolveForwardRef(provider);
          return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
      }
      else {
          if (isValueProvider(provider)) {
              factory = () => resolveForwardRef(provider.useValue);
          }
          else if (isFactoryProvider(provider)) {
              factory = () => provider.useFactory(...injectArgs(provider.deps || []));
          }
          else if (isExistingProvider(provider)) {
              factory = () => ÉµÉµinject(resolveForwardRef(provider.useExisting));
          }
          else {
              const classRef = resolveForwardRef(provider &&
                  (provider.useClass || provider.provide));
              if (ngDevMode && !classRef) {
                  throwInvalidProviderError(ngModuleType, providers, provider);
              }
              if (hasDeps(provider)) {
                  factory = () => new (classRef)(...injectArgs(provider.deps));
              }
              else {
                  return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
              }
          }
      }
      return factory;
  }
  function makeRecord(factory, value, multi = false) {
      return {
          factory: factory,
          value: value,
          multi: multi ? [] : undefined,
      };
  }
  function isValueProvider(value) {
      return value !== null && typeof value == 'object' && USE_VALUE$1 in value;
  }
  function isExistingProvider(value) {
      return !!(value && value.useExisting);
  }
  function isFactoryProvider(value) {
      return !!(value && value.useFactory);
  }
  function isTypeProvider(value) {
      return typeof value === 'function';
  }
  function isClassProvider(value) {
      return !!value.useClass;
  }
  function hasDeps(value) {
      return !!value.deps;
  }
  function hasOnDestroy(value) {
      return value !== null && typeof value === 'object' &&
          typeof value.ngOnDestroy === 'function';
  }
  function couldBeInjectableType(value) {
      return (typeof value === 'function') ||
          (typeof value === 'object' && value instanceof InjectionToken);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Concrete injectors implement this interface. Injectors are configured
   * with [providers](guide/glossary#provider) that associate
   * dependencies of various types with [injection tokens](guide/glossary#di-token).
   *
   * @see ["DI Providers"](guide/dependency-injection-providers).
   * @see `StaticProvider`
   *
   * @usageNotes
   *
   *  The following example creates a service injector instance.
   *
   * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
   *
   * ### Usage example
   *
   * {@example core/di/ts/injector_spec.ts region='Injector'}
   *
   * `Injector` returns itself when given `Injector` as a token:
   *
   * {@example core/di/ts/injector_spec.ts region='injectInjector'}
   *
   * @publicApi
   */
  class Injector {
      static create(options, parent) {
          if (Array.isArray(options)) {
              return createInjector({ name: '' }, parent, options, '');
          }
          else {
              const name = options.name ?? '';
              return createInjector({ name }, options.parent, options.providers, name);
          }
      }
  }
  Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
  Injector.NULL = ( /* @__PURE__ */new NullInjector());
  /** @nocollapse */
  Injector.Éµprov = ÉµÉµdefineInjectable({
      token: Injector,
      providedIn: 'any',
      factory: () => ÉµÉµinject(INJECTOR),
  });
  /**
   * @internal
   * @nocollapse
   */
  Injector.__NG_ELEMENT_ID__ = -1 /* Injector */;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Retrieves the component instance associated with a given DOM element.
   *
   * @usageNotes
   * Given the following DOM structure:
   *
   * ```html
   * <app-root>
   *   <div>
   *     <child-comp></child-comp>
   *   </div>
   * </app-root>
   * ```
   *
   * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`
   * associated with this DOM element.
   *
   * Calling the function on `<app-root>` will return the `MyApp` instance.
   *
   *
   * @param element DOM element from which the component should be retrieved.
   * @returns Component instance associated with the element or `null` if there
   *    is no component associated with it.
   *
   * @publicApi
   * @globalApi ng
   */
  function getComponent$1(element) {
      assertDomElement(element);
      const context = getLContext(element);
      if (context === null)
          return null;
      if (context.component === undefined) {
          context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);
      }
      return context.component;
  }
  /**
   * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded
   * view that the element is part of. Otherwise retrieves the instance of the component whose view
   * owns the element (in this case, the result is the same as calling `getOwningComponent`).
   *
   * @param element Element for which to get the surrounding component instance.
   * @returns Instance of the component that is around the element or null if the element isn't
   *    inside any component.
   *
   * @publicApi
   * @globalApi ng
   */
  function getContext(element) {
      assertDomElement(element);
      const context = getLContext(element);
      return context === null ? null : context.lView[CONTEXT];
  }
  /**
   * Retrieves the component instance whose view contains the DOM element.
   *
   * For example, if `<child-comp>` is used in the template of `<app-comp>`
   * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`
   * would return `<app-comp>`.
   *
   * @param elementOrDir DOM element, component or directive instance
   *    for which to retrieve the root components.
   * @returns Component instance whose view owns the DOM element or null if the element is not
   *    part of a component view.
   *
   * @publicApi
   * @globalApi ng
   */
  function getOwningComponent(elementOrDir) {
      const context = getLContext(elementOrDir);
      if (context === null)
          return null;
      let lView = context.lView;
      let parent;
      ngDevMode && assertLView(lView);
      while (lView[TVIEW].type === 2 /* Embedded */ && (parent = getLViewParent(lView))) {
          lView = parent;
      }
      return lView[FLAGS] & 512 /* IsRoot */ ? null : lView[CONTEXT];
  }
  /**
   * Retrieves all root components associated with a DOM element, directive or component instance.
   * Root components are those which have been bootstrapped by Angular.
   *
   * @param elementOrDir DOM element, component or directive instance
   *    for which to retrieve the root components.
   * @returns Root components associated with the target object.
   *
   * @publicApi
   * @globalApi ng
   */
  function getRootComponents(elementOrDir) {
      return [...getRootContext(elementOrDir).components];
  }
  /**
   * Retrieves an `Injector` associated with an element, component or directive instance.
   *
   * @param elementOrDir DOM element, component or directive instance for which to
   *    retrieve the injector.
   * @returns Injector associated with the element, component or directive instance.
   *
   * @publicApi
   * @globalApi ng
   */
  function getInjector(elementOrDir) {
      const context = getLContext(elementOrDir);
      if (context === null)
          return Injector.NULL;
      const tNode = context.lView[TVIEW].data[context.nodeIndex];
      return new NodeInjector(tNode, context.lView);
  }
  /**
   * Retrieve a set of injection tokens at a given DOM node.
   *
   * @param element Element for which the injection tokens should be retrieved.
   */
  function getInjectionTokens(element) {
      const context = getLContext(element);
      if (context === null)
          return [];
      const lView = context.lView;
      const tView = lView[TVIEW];
      const tNode = tView.data[context.nodeIndex];
      const providerTokens = [];
      const startIndex = tNode.providerIndexes & 1048575 /* ProvidersStartIndexMask */;
      const endIndex = tNode.directiveEnd;
      for (let i = startIndex; i < endIndex; i++) {
          let value = tView.data[i];
          if (isDirectiveDefHack(value)) {
              // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a
              // design flaw.  We should always store same type so that we can be monomorphic. The issue
              // is that for Components/Directives we store the def instead the type. The correct behavior
              // is that we should always be storing injectable type in this location.
              value = value.type;
          }
          providerTokens.push(value);
      }
      return providerTokens;
  }
  /**
   * Retrieves directive instances associated with a given DOM node. Does not include
   * component instances.
   *
   * @usageNotes
   * Given the following DOM structure:
   *
   * ```html
   * <app-root>
   *   <button my-button></button>
   *   <my-comp></my-comp>
   * </app-root>
   * ```
   *
   * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`
   * directive that is associated with the DOM node.
   *
   * Calling `getDirectives` on `<my-comp>` will return an empty array.
   *
   * @param node DOM node for which to get the directives.
   * @returns Array of directives associated with the node.
   *
   * @publicApi
   * @globalApi ng
   */
  function getDirectives(node) {
      // Skip text nodes because we can't have directives associated with them.
      if (node instanceof Text) {
          return [];
      }
      const context = getLContext(node);
      if (context === null) {
          return [];
      }
      const lView = context.lView;
      const tView = lView[TVIEW];
      const nodeIndex = context.nodeIndex;
      if (!tView?.data[nodeIndex]) {
          return [];
      }
      if (context.directives === undefined) {
          context.directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
      }
      // The `directives` in this case are a named array called `LComponentView`. Clone the
      // result so we don't expose an internal data structure in the user's console.
      return context.directives === null ? [] : [...context.directives];
  }
  /**
   * Returns the debug (partial) metadata for a particular directive or component instance.
   * The function accepts an instance of a directive or component and returns the corresponding
   * metadata.
   *
   * @param directiveOrComponentInstance Instance of a directive or component
   * @returns metadata of the passed directive or component
   *
   * @publicApi
   * @globalApi ng
   */
  function getDirectiveMetadata$1(directiveOrComponentInstance) {
      const { constructor } = directiveOrComponentInstance;
      if (!constructor) {
          throw new Error('Unable to find the instance constructor');
      }
      // In case a component inherits from a directive, we may have component and directive metadata
      // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.
      const componentDef = getComponentDef(constructor);
      if (componentDef) {
          return {
              inputs: componentDef.inputs,
              outputs: componentDef.outputs,
              encapsulation: componentDef.encapsulation,
              changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush :
                  ChangeDetectionStrategy.Default
          };
      }
      const directiveDef = getDirectiveDef(constructor);
      if (directiveDef) {
          return { inputs: directiveDef.inputs, outputs: directiveDef.outputs };
      }
      return null;
  }
  /**
   * Retrieve map of local references.
   *
   * The references are retrieved as a map of local reference name to element or directive instance.
   *
   * @param target DOM element, component or directive instance for which to retrieve
   *    the local references.
   */
  function getLocalRefs(target) {
      const context = getLContext(target);
      if (context === null)
          return {};
      if (context.localRefs === undefined) {
          context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);
      }
      return context.localRefs || {};
  }
  /**
   * Retrieves the host element of a component or directive instance.
   * The host element is the DOM element that matched the selector of the directive.
   *
   * @param componentOrDirective Component or directive instance for which the host
   *     element should be retrieved.
   * @returns Host element of the target.
   *
   * @publicApi
   * @globalApi ng
   */
  function getHostElement(componentOrDirective) {
      return getLContext(componentOrDirective).native;
  }
  /**
   * Retrieves the rendered text for a given component.
   *
   * This function retrieves the host element of a component and
   * and then returns the `textContent` for that element. This implies
   * that the text returned will include re-projected content of
   * the component as well.
   *
   * @param component The component to return the content text for.
   */
  function getRenderedText(component) {
      const hostElement = getHostElement(component);
      return hostElement.textContent || '';
  }
  /**
   * Retrieves a list of event listeners associated with a DOM element. The list does include host
   * listeners, but it does not include event listeners defined outside of the Angular context
   * (e.g. through `addEventListener`).
   *
   * @usageNotes
   * Given the following DOM structure:
   *
   * ```html
   * <app-root>
   *   <div (click)="doSomething()"></div>
   * </app-root>
   * ```
   *
   * Calling `getListeners` on `<div>` will return an object that looks as follows:
   *
   * ```ts
   * {
   *   name: 'click',
   *   element: <div>,
   *   callback: () => doSomething(),
   *   useCapture: false
   * }
   * ```
   *
   * @param element Element for which the DOM listeners should be retrieved.
   * @returns Array of event listeners on the DOM element.
   *
   * @publicApi
   * @globalApi ng
   */
  function getListeners(element) {
      assertDomElement(element);
      const lContext = getLContext(element);
      if (lContext === null)
          return [];
      const lView = lContext.lView;
      const tView = lView[TVIEW];
      const lCleanup = lView[CLEANUP];
      const tCleanup = tView.cleanup;
      const listeners = [];
      if (tCleanup && lCleanup) {
          for (let i = 0; i < tCleanup.length;) {
              const firstParam = tCleanup[i++];
              const secondParam = tCleanup[i++];
              if (typeof firstParam === 'string') {
                  const name = firstParam;
                  const listenerElement = unwrapRNode(lView[secondParam]);
                  const callback = lCleanup[tCleanup[i++]];
                  const useCaptureOrIndx = tCleanup[i++];
                  // if useCaptureOrIndx is boolean then report it as is.
                  // if useCaptureOrIndx is positive number then it in unsubscribe method
                  // if useCaptureOrIndx is negative number then it is a Subscription
                  const type = (typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0) ? 'dom' : 'output';
                  const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;
                  if (element == listenerElement) {
                      listeners.push({ element, name, callback, useCapture, type });
                  }
              }
          }
      }
      listeners.sort(sortListeners);
      return listeners;
  }
  function sortListeners(a, b) {
      if (a.name == b.name)
          return 0;
      return a.name < b.name ? -1 : 1;
  }
  /**
   * This function should not exist because it is megamorphic and only mostly correct.
   *
   * See call site for more info.
   */
  function isDirectiveDefHack(obj) {
      return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;
  }
  /**
   * Returns the attached `DebugNode` instance for an element in the DOM.
   *
   * @param element DOM element which is owned by an existing component's view.
   */
  function getDebugNode$1(element) {
      if (ngDevMode && !(element instanceof Node)) {
          throw new Error('Expecting instance of DOM Element');
      }
      const lContext = getLContext(element);
      if (lContext === null) {
          return null;
      }
      const lView = lContext.lView;
      const nodeIndex = lContext.nodeIndex;
      if (nodeIndex !== -1) {
          const valueInLView = lView[nodeIndex];
          // this means that value in the lView is a component with its own
          // data. In this situation the TNode is not accessed at the same spot.
          const tNode = isLView(valueInLView) ? valueInLView[T_HOST] : getTNode(lView[TVIEW], nodeIndex);
          ngDevMode &&
              assertEqual(tNode.index, nodeIndex, 'Expecting that TNode at index is same as index');
          return buildDebugNode(tNode, lView);
      }
      return null;
  }
  /**
   * Retrieve the component `LView` from component/element.
   *
   * NOTE: `LView` is a private and should not be leaked outside.
   *       Don't export this method to `ng.*` on window.
   *
   * @param target DOM element or component instance for which to retrieve the LView.
   */
  function getComponentLView(target) {
      const lContext = getLContext(target);
      const nodeIndx = lContext.nodeIndex;
      const lView = lContext.lView;
      const componentLView = lView[nodeIndx];
      ngDevMode && assertLView(componentLView);
      return componentLView;
  }
  /** Asserts that a value is a DOM Element. */
  function assertDomElement(value) {
      if (typeof Element !== 'undefined' && !(value instanceof Element)) {
          throw new Error('Expecting instance of DOM Element');
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Marks a component for check (in case of OnPush components) and synchronously
   * performs change detection on the application this component belongs to.
   *
   * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.
   *
   * @publicApi
   * @globalApi ng
   */
  function applyChanges(component) {
      markDirty(component);
      getRootComponents(component).forEach(rootComponent => detectChanges(rootComponent));
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * This file introduces series of globally accessible debug tools
   * to allow for the Angular debugging story to function.
   *
   * To see this in action run the following command:
   *
   *   bazel run //packages/core/test/bundling/todo:devserver
   *
   *  Then load `localhost:5432` and start using the console tools.
   */
  /**
   * This value reflects the property on the window where the dev
   * tools are patched (window.ng).
   * */
  const GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';
  let _published = false;
  /**
   * Publishes a collection of default debug tools onto`window.ng`.
   *
   * These functions are available globally when Angular is in development
   * mode and are automatically stripped away from prod mode is on.
   */
  function publishDefaultGlobalUtils$1() {
      if (!_published) {
          _published = true;
          /**
           * Warning: this function is *INTERNAL* and should not be relied upon in application's code.
           * The contract of the function might be changed in any release and/or the function can be
           * removed completely.
           */
          publishGlobalUtil('ÉµsetProfiler', setProfiler);
          publishGlobalUtil('getDirectiveMetadata', getDirectiveMetadata$1);
          publishGlobalUtil('getComponent', getComponent$1);
          publishGlobalUtil('getContext', getContext);
          publishGlobalUtil('getListeners', getListeners);
          publishGlobalUtil('getOwningComponent', getOwningComponent);
          publishGlobalUtil('getHostElement', getHostElement);
          publishGlobalUtil('getInjector', getInjector);
          publishGlobalUtil('getRootComponents', getRootComponents);
          publishGlobalUtil('getDirectives', getDirectives);
          publishGlobalUtil('applyChanges', applyChanges);
      }
  }
  /**
   * Publishes the given function to `window.ng` so that it can be
   * used from the browser console when an application is not in production.
   */
  function publishGlobalUtil(name, fn) {
      if (typeof COMPILED === 'undefined' || !COMPILED) {
          // Note: we can't export `ng` when using closure enhanced optimization as:
          // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
          // - we can't declare a closure extern as the namespace `ng` is already used within Google
          //   for typings for AngularJS (via `goog.provide('ng....')`).
          const w = _global;
          ngDevMode && assertDefined(fn, 'function not defined');
          if (w) {
              let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];
              if (!container) {
                  container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};
              }
              container[name] = fn;
          }
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // TODO: A hack to not pull in the NullInjector from @angular/core.
  const NULL_INJECTOR = {
      get: (token, notFoundValue) => {
          throwProviderNotFoundError(token, 'NullInjector');
      }
  };
  /**
   * Bootstraps a Component into an existing host element and returns an instance
   * of the component.
   *
   * Use this function to bootstrap a component into the DOM tree. Each invocation
   * of this function will create a separate tree of components, injectors and
   * change detection cycles and lifetimes. To dynamically insert a new component
   * into an existing tree such that it shares the same injection, change detection
   * and object lifetime, use {@link ViewContainer#createComponent}.
   *
   * @param componentType Component to bootstrap
   * @param options Optional parameters which control bootstrapping
   */
  function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts = {}) {
      ngDevMode && publishDefaultGlobalUtils$1();
      ngDevMode && assertComponentType(componentType);
      const rendererFactory = opts.rendererFactory || domRendererFactory3;
      const sanitizer = opts.sanitizer || null;
      const componentDef = getComponentDef(componentType);
      if (componentDef.type != componentType)
          componentDef.type = componentType;
      // The first index of the first selector is the tag name.
      const componentTag = componentDef.selectors[0][0];
      const hostRenderer = rendererFactory.createRenderer(null, null);
      const hostRNode = locateHostElement(hostRenderer, opts.host || componentTag, componentDef.encapsulation);
      const rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :
          16 /* CheckAlways */ | 512 /* IsRoot */;
      const rootContext = createRootContext(opts.scheduler, opts.playerHandler);
      const renderer = rendererFactory.createRenderer(hostRNode, componentDef);
      const rootTView = createTView(0 /* Root */, null, null, 1, 0, null, null, null, null, null);
      const rootView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, null, opts.injector || null);
      enterView(rootView);
      let component;
      try {
          if (rendererFactory.begin)
              rendererFactory.begin();
          const componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);
          component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);
          // create mode pass
          renderView(rootTView, rootView, null);
          // update mode pass
          refreshView(rootTView, rootView, null, null);
      }
      finally {
          leaveView();
          if (rendererFactory.end)
              rendererFactory.end();
      }
      return component;
  }
  /**
   * Creates the root component view and the root component node.
   *
   * @param rNode Render host element.
   * @param def ComponentDef
   * @param rootView The parent view where the host node is stored
   * @param rendererFactory Factory to be used for creating child renderers.
   * @param hostRenderer The current renderer
   * @param sanitizer The sanitizer, if provided
   *
   * @returns Component view created
   */
  function createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {
      const tView = rootView[TVIEW];
      const index = HEADER_OFFSET;
      ngDevMode && assertIndexInRange(rootView, index);
      rootView[index] = rNode;
      // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at
      // the same time we want to communicate the debug `TNode` that this is a special `TNode`
      // representing a host element.
      const tNode = getOrCreateTNode(tView, index, 2 /* Element */, '#host', null);
      const mergedAttrs = tNode.mergedAttrs = def.hostAttrs;
      if (mergedAttrs !== null) {
          computeStaticStyling(tNode, mergedAttrs, true);
          if (rNode !== null) {
              setUpAttributes(hostRenderer, rNode, mergedAttrs);
              if (tNode.classes !== null) {
                  writeDirectClass(hostRenderer, rNode, tNode.classes);
              }
              if (tNode.styles !== null) {
                  writeDirectStyle(hostRenderer, rNode, tNode.styles);
              }
          }
      }
      const viewRenderer = rendererFactory.createRenderer(rNode, def);
      const componentView = createLView(rootView, getOrCreateTComponentView(def), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[index], tNode, rendererFactory, viewRenderer, sanitizer || null, null);
      if (tView.firstCreatePass) {
          diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);
          markAsComponentHost(tView, tNode);
          initTNodeFlags(tNode, rootView.length, 1);
      }
      addToViewTree(rootView, componentView);
      // Store component view at node index, with node as the HOST
      return rootView[index] = componentView;
  }
  /**
   * Creates a root component and sets it up with features and host bindings. Shared by
   * renderComponent() and ViewContainerRef.createComponent().
   */
  function createRootComponent(componentView, componentDef, rootLView, rootContext, hostFeatures) {
      const tView = rootLView[TVIEW];
      // Create directive instance with factory() and store at next index in viewData
      const component = instantiateRootComponent(tView, rootLView, componentDef);
      rootContext.components.push(component);
      componentView[CONTEXT] = component;
      hostFeatures && hostFeatures.forEach((feature) => feature(component, componentDef));
      // We want to generate an empty QueryList for root content queries for backwards
      // compatibility with ViewEngine.
      if (componentDef.contentQueries) {
          const tNode = getCurrentTNode();
          ngDevMode && assertDefined(tNode, 'TNode expected');
          componentDef.contentQueries(1 /* Create */, component, tNode.directiveStart);
      }
      const rootTNode = getCurrentTNode();
      ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');
      if (tView.firstCreatePass &&
          (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {
          setSelectedIndex(rootTNode.index);
          const rootTView = rootLView[TVIEW];
          registerHostBindingOpCodes(rootTView, rootTNode, rootLView, rootTNode.directiveStart, rootTNode.directiveEnd, componentDef);
          invokeHostBindingsInCreationMode(componentDef, component);
      }
      return component;
  }
  function createRootContext(scheduler, playerHandler) {
      return {
          components: [],
          scheduler: scheduler || defaultScheduler,
          clean: CLEAN_PROMISE,
          playerHandler: playerHandler || null,
          flags: 0 /* Empty */
      };
  }
  /**
   * Used to enable lifecycle hooks on the root component.
   *
   * Include this feature when calling `renderComponent` if the root component
   * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't
   * be called properly.
   *
   * Example:
   *
   * ```
   * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});
   * ```
   */
  function LifecycleHooksFeature(component, def) {
      const lView = readPatchedLView(component);
      ngDevMode && assertDefined(lView, 'LView is required');
      const tView = lView[TVIEW];
      const tNode = getCurrentTNode();
      ngDevMode && assertDefined(tNode, 'TNode is required');
      registerPostOrderHooks(tView, tNode);
  }
  /**
   * Wait on component until it is rendered.
   *
   * This function returns a `Promise` which is resolved when the component's
   * change detection is executed. This is determined by finding the scheduler
   * associated with the `component`'s render tree and waiting until the scheduler
   * flushes. If nothing is scheduled, the function returns a resolved promise.
   *
   * Example:
   * ```
   * await whenRendered(myComponent);
   * ```
   *
   * @param component Component to wait upon
   * @returns Promise which resolves when the component is rendered.
   */
  function whenRendered(component) {
      return getRootContext(component).clean;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function getSuperType(type) {
      return Object.getPrototypeOf(type.prototype).constructor;
  }
  /**
   * Merges the definition from a super class to a sub class.
   * @param definition The definition that is a SubClass of another directive of component
   *
   * @codeGenApi
   */
  function ÉµÉµInheritDefinitionFeature(definition) {
      let superType = getSuperType(definition.type);
      let shouldInheritFields = true;
      const inheritanceChain = [definition];
      while (superType) {
          let superDef = undefined;
          if (isComponentDef(definition)) {
              // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
              superDef = superType.Éµcmp || superType.Éµdir;
          }
          else {
              if (superType.Éµcmp) {
                  const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                      `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}` :
                      '';
                  throw new RuntimeError(903 /* INVALID_INHERITANCE */, errorMessage);
              }
              // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
              superDef = superType.Éµdir;
          }
          if (superDef) {
              if (shouldInheritFields) {
                  inheritanceChain.push(superDef);
                  // Some fields in the definition may be empty, if there were no values to put in them that
                  // would've justified object creation. Unwrap them if necessary.
                  const writeableDef = definition;
                  writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
                  writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
                  writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);
                  // Merge hostBindings
                  const superHostBindings = superDef.hostBindings;
                  superHostBindings && inheritHostBindings(definition, superHostBindings);
                  // Merge queries
                  const superViewQuery = superDef.viewQuery;
                  const superContentQueries = superDef.contentQueries;
                  superViewQuery && inheritViewQuery(definition, superViewQuery);
                  superContentQueries && inheritContentQueries(definition, superContentQueries);
                  // Merge inputs and outputs
                  fillProperties(definition.inputs, superDef.inputs);
                  fillProperties(definition.declaredInputs, superDef.declaredInputs);
                  fillProperties(definition.outputs, superDef.outputs);
                  // Merge animations metadata.
                  // If `superDef` is a Component, the `data` field is present (defaults to an empty object).
                  if (isComponentDef(superDef) && superDef.data.animation) {
                      // If super def is a Component, the `definition` is also a Component, since Directives can
                      // not inherit Components (we throw an error above and cannot reach this code).
                      const defData = definition.data;
                      defData.animation = (defData.animation || []).concat(superDef.data.animation);
                  }
              }
              // Run parent features
              const features = superDef.features;
              if (features) {
                  for (let i = 0; i < features.length; i++) {
                      const feature = features[i];
                      if (feature && feature.ngInherit) {
                          feature(definition);
                      }
                      // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this
                      // def already has all the necessary information inherited from its super class(es), so we
                      // can stop merging fields from super classes. However we need to iterate through the
                      // prototype chain to look for classes that might contain other "features" (like
                      // NgOnChanges), which we should invoke for the original `definition`. We set the
                      // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance
                      // logic and only invoking functions from the "features" list.
                      if (feature === ÉµÉµInheritDefinitionFeature) {
                          shouldInheritFields = false;
                      }
                  }
              }
          }
          superType = Object.getPrototypeOf(superType);
      }
      mergeHostAttrsAcrossInheritance(inheritanceChain);
  }
  /**
   * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.
   *
   * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing
   * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child
   * type.
   */
  function mergeHostAttrsAcrossInheritance(inheritanceChain) {
      let hostVars = 0;
      let hostAttrs = null;
      // We process the inheritance order from the base to the leaves here.
      for (let i = inheritanceChain.length - 1; i >= 0; i--) {
          const def = inheritanceChain[i];
          // For each `hostVars`, we need to add the superclass amount.
          def.hostVars = (hostVars += def.hostVars);
          // for each `hostAttrs` we need to merge it with superclass.
          def.hostAttrs =
              mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
      }
  }
  function maybeUnwrapEmpty(value) {
      if (value === EMPTY_OBJ) {
          return {};
      }
      else if (value === EMPTY_ARRAY) {
          return [];
      }
      else {
          return value;
      }
  }
  function inheritViewQuery(definition, superViewQuery) {
      const prevViewQuery = definition.viewQuery;
      if (prevViewQuery) {
          definition.viewQuery = (rf, ctx) => {
              superViewQuery(rf, ctx);
              prevViewQuery(rf, ctx);
          };
      }
      else {
          definition.viewQuery = superViewQuery;
      }
  }
  function inheritContentQueries(definition, superContentQueries) {
      const prevContentQueries = definition.contentQueries;
      if (prevContentQueries) {
          definition.contentQueries = (rf, ctx, directiveIndex) => {
              superContentQueries(rf, ctx, directiveIndex);
              prevContentQueries(rf, ctx, directiveIndex);
          };
      }
      else {
          definition.contentQueries = superContentQueries;
      }
  }
  function inheritHostBindings(definition, superHostBindings) {
      const prevHostBindings = definition.hostBindings;
      if (prevHostBindings) {
          definition.hostBindings = (rf, ctx) => {
              superHostBindings(rf, ctx);
              prevHostBindings(rf, ctx);
          };
      }
      else {
          definition.hostBindings = superHostBindings;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Fields which exist on either directive or component definitions, and need to be copied from
   * parent to child classes by the `ÉµÉµCopyDefinitionFeature`.
   */
  const COPY_DIRECTIVE_FIELDS = [
      // The child class should use the providers of its parent.
      'providersResolver',
      // Not listed here are any fields which are handled by the `ÉµÉµInheritDefinitionFeature`, such
      // as inputs, outputs, and host binding functions.
  ];
  /**
   * Fields which exist only on component definitions, and need to be copied from parent to child
   * classes by the `ÉµÉµCopyDefinitionFeature`.
   *
   * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,
   * since those should go in `COPY_DIRECTIVE_FIELDS` above.
   */
  const COPY_COMPONENT_FIELDS = [
      // The child class should use the template function of its parent, including all template
      // semantics.
      'template',
      'decls',
      'consts',
      'vars',
      'onPush',
      'ngContentSelectors',
      // The child class should use the CSS styles of its parent, including all styling semantics.
      'styles',
      'encapsulation',
      // The child class should be checked by the runtime in the same way as its parent.
      'schemas',
  ];
  /**
   * Copies the fields not handled by the `ÉµÉµInheritDefinitionFeature` from the supertype of a
   * definition.
   *
   * This exists primarily to support ngcc migration of an existing View Engine pattern, where an
   * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it
   * generates a skeleton definition on the child class, and applies this feature.
   *
   * The `ÉµÉµCopyDefinitionFeature` then copies any needed fields from the parent class' definition,
   * including things like the component template function.
   *
   * @param definition The definition of a child class which inherits from a parent class with its
   * own definition.
   *
   * @codeGenApi
   */
  function ÉµÉµCopyDefinitionFeature(definition) {
      let superType = getSuperType(definition.type);
      let superDef = undefined;
      if (isComponentDef(definition)) {
          // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
          superDef = superType.Éµcmp;
      }
      else {
          // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
          superDef = superType.Éµdir;
      }
      // Needed because `definition` fields are readonly.
      const defAny = definition;
      // Copy over any fields that apply to either directives or components.
      for (const field of COPY_DIRECTIVE_FIELDS) {
          defAny[field] = superDef[field];
      }
      if (isComponentDef(superDef)) {
          // Copy over any component-specific fields.
          for (const field of COPY_COMPONENT_FIELDS) {
              defAny[field] = superDef[field];
          }
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  let _symbolIterator = null;
  function core_getSymbolIterator() {
      if (!_symbolIterator) {
          const Symbol = _global['Symbol'];
          if (Symbol && Symbol.iterator) {
              _symbolIterator = Symbol.iterator;
          }
          else {
              // es6-shim specific logic
              const keys = Object.getOwnPropertyNames(Map.prototype);
              for (let i = 0; i < keys.length; ++i) {
                  const key = keys[i];
                  if (key !== 'entries' && key !== 'size' &&
                      Map.prototype[key] === Map.prototype['entries']) {
                      _symbolIterator = key;
                  }
              }
          }
      }
      return _symbolIterator;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function devModeEqual(a, b) {
      const isListLikeIterableA = isListLikeIterable(a);
      const isListLikeIterableB = isListLikeIterable(b);
      if (isListLikeIterableA && isListLikeIterableB) {
          return areIterablesEqual(a, b, devModeEqual);
      }
      else {
          const isAObject = a && (typeof a === 'object' || typeof a === 'function');
          const isBObject = b && (typeof b === 'object' || typeof b === 'function');
          if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
              return true;
          }
          else {
              return Object.is(a, b);
          }
      }
  }
  function isListLikeIterable(obj) {
      if (!isJsObject(obj))
          return false;
      return Array.isArray(obj) ||
          (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
              core_getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
  }
  function areIterablesEqual(a, b, comparator) {
      const iterator1 = a[core_getSymbolIterator()]();
      const iterator2 = b[core_getSymbolIterator()]();
      while (true) {
          const item1 = iterator1.next();
          const item2 = iterator2.next();
          if (item1.done && item2.done)
              return true;
          if (item1.done || item2.done)
              return false;
          if (!comparator(item1.value, item2.value))
              return false;
      }
  }
  function iterateListLike(obj, fn) {
      if (Array.isArray(obj)) {
          for (let i = 0; i < obj.length; i++) {
              fn(obj[i]);
          }
      }
      else {
          const iterator = obj[core_getSymbolIterator()]();
          let item;
          while (!((item = iterator.next()).done)) {
              fn(item.value);
          }
      }
  }
  function isJsObject(o) {
      return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // TODO(misko): consider inlining
  /** Updates binding and returns the value. */
  function updateBinding(lView, bindingIndex, value) {
      return lView[bindingIndex] = value;
  }
  /** Gets the current binding value. */
  function getBinding(lView, bindingIndex) {
      ngDevMode && assertIndexInRange(lView, bindingIndex);
      ngDevMode &&
          assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');
      return lView[bindingIndex];
  }
  /**
   * Updates binding if changed, then returns whether it was updated.
   *
   * This function also checks the `CheckNoChangesMode` and throws if changes are made.
   * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE
   * behavior.
   *
   * @param lView current `LView`
   * @param bindingIndex The binding in the `LView` to check
   * @param value New value to check against `lView[bindingIndex]`
   * @returns `true` if the bindings has changed. (Throws if binding has changed during
   *          `CheckNoChangesMode`)
   */
  function bindingUpdated(lView, bindingIndex, value) {
      ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
      ngDevMode &&
          assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);
      const oldValue = lView[bindingIndex];
      if (Object.is(oldValue, value)) {
          return false;
      }
      else {
          if (ngDevMode && isInCheckNoChangesMode()) {
              // View engine didn't report undefined values as changed on the first checkNoChanges pass
              // (before the change detection was run).
              const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;
              if (!devModeEqual(oldValueToCompare, value)) {
                  const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
                  throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);
              }
              // There was a change, but the `devModeEqual` decided that the change is exempt from an error.
              // For this reason we exit as if no change. The early exit is needed to prevent the changed
              // value to be written into `LView` (If we would write the new value that we would not see it
              // as change on next CD.)
              return false;
          }
          lView[bindingIndex] = value;
          return true;
      }
  }
  /** Updates 2 bindings if changed, then returns whether either was updated. */
  function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
      const different = bindingUpdated(lView, bindingIndex, exp1);
      return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
  }
  /** Updates 3 bindings if changed, then returns whether any was updated. */
  function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
      const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
      return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
  }
  /** Updates 4 bindings if changed, then returns whether any was updated. */
  function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
      const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
      return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Updates the value of or removes a bound attribute on an Element.
   *
   * Used in the case of `[attr.title]="value"`
   *
   * @param name name The name of the attribute.
   * @param value value The attribute is removed when value is `null` or `undefined`.
   *                  Otherwise the attribute value is set to the stringified value.
   * @param sanitizer An optional function used to sanitize the value.
   * @param namespace Optional namespace to use when setting the attribute.
   *
   * @codeGenApi
   */
  function ÉµÉµattribute(name, value, sanitizer, namespace) {
      const lView = getLView();
      const bindingIndex = nextBindingIndex();
      if (bindingUpdated(lView, bindingIndex, value)) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);
      }
      return ÉµÉµattribute;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Create interpolation bindings with a variable number of expressions.
   *
   * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.
   * Those are faster because there is no need to create an array of expressions and iterate over it.
   *
   * `values`:
   * - has static text at even indexes,
   * - has evaluated expressions at odd indexes.
   *
   * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.
   */
  function interpolationV(lView, values) {
      ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');
      ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');
      let isBindingUpdated = false;
      let bindingIndex = getBindingIndex();
      for (let i = 1; i < values.length; i += 2) {
          // Check if bindings (odd indexes) have changed
          isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
      }
      setBindingIndex(bindingIndex);
      if (!isBindingUpdated) {
          return NO_CHANGE;
      }
      // Build the updated content
      let content = values[0];
      for (let i = 1; i < values.length; i += 2) {
          content += renderStringify(values[i]) + values[i + 1];
      }
      return content;
  }
  /**
   * Creates an interpolation binding with 1 expression.
   *
   * @param prefix static value used for concatenation only.
   * @param v0 value checked for change.
   * @param suffix static value used for concatenation only.
   */
  function interpolation1(lView, prefix, v0, suffix) {
      const different = bindingUpdated(lView, nextBindingIndex(), v0);
      return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
  }
  /**
   * Creates an interpolation binding with 2 expressions.
   */
  function interpolation2(lView, prefix, v0, i0, v1, suffix) {
      const bindingIndex = getBindingIndex();
      const different = bindingUpdated2(lView, bindingIndex, v0, v1);
      incrementBindingIndex(2);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
  }
  /**
   * Creates an interpolation binding with 3 expressions.
   */
  function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
      const bindingIndex = getBindingIndex();
      const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
      incrementBindingIndex(3);
      return different ?
          prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :
          NO_CHANGE;
  }
  /**
   * Create an interpolation binding with 4 expressions.
   */
  function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
      const bindingIndex = getBindingIndex();
      const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      incrementBindingIndex(4);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +
          renderStringify(v2) + i2 + renderStringify(v3) + suffix :
          NO_CHANGE;
  }
  /**
   * Creates an interpolation binding with 5 expressions.
   */
  function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
      const bindingIndex = getBindingIndex();
      let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
      incrementBindingIndex(5);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +
          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix :
          NO_CHANGE;
  }
  /**
   * Creates an interpolation binding with 6 expressions.
   */
  function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
      const bindingIndex = getBindingIndex();
      let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
      incrementBindingIndex(6);
      return different ?
          prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +
              renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :
          NO_CHANGE;
  }
  /**
   * Creates an interpolation binding with 7 expressions.
   */
  function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
      const bindingIndex = getBindingIndex();
      let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
      incrementBindingIndex(7);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +
          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +
          renderStringify(v5) + i5 + renderStringify(v6) + suffix :
          NO_CHANGE;
  }
  /**
   * Creates an interpolation binding with 8 expressions.
   */
  function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
      const bindingIndex = getBindingIndex();
      let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
      incrementBindingIndex(8);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +
          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +
          renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix :
          NO_CHANGE;
  }
  
  /**
   *
   * Update an interpolated attribute on an element with single bound value surrounded by text.
   *
   * Used when the value passed to a property has 1 interpolated value in it:
   *
   * ```html
   * <div attr.title="prefix{{v0}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµattributeInterpolate1('title', 'prefix', v0, 'suffix');
   * ```
   *
   * @param attrName The name of the attribute to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
      const lView = getLView();
      const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode &&
              storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);
      }
      return ÉµÉµattributeInterpolate1;
  }
  /**
   *
   * Update an interpolated attribute on an element with 2 bound values surrounded by text.
   *
   * Used when the value passed to a property has 2 interpolated values in it:
   *
   * ```html
   * <div attr.title="prefix{{v0}}-{{v1}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
   * ```
   *
   * @param attrName The name of the attribute to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
      const lView = getLView();
      const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode &&
              storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);
      }
      return ÉµÉµattributeInterpolate2;
  }
  /**
   *
   * Update an interpolated attribute on an element with 3 bound values surrounded by text.
   *
   * Used when the value passed to a property has 3 interpolated values in it:
   *
   * ```html
   * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµattributeInterpolate3(
   * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
   * ```
   *
   * @param attrName The name of the attribute to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
      const lView = getLView();
      const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode &&
              storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
      }
      return ÉµÉµattributeInterpolate3;
  }
  /**
   *
   * Update an interpolated attribute on an element with 4 bound values surrounded by text.
   *
   * Used when the value passed to a property has 4 interpolated values in it:
   *
   * ```html
   * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµattributeInterpolate4(
   * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
   * ```
   *
   * @param attrName The name of the attribute to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
      const lView = getLView();
      const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode &&
              storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
      }
      return ÉµÉµattributeInterpolate4;
  }
  /**
   *
   * Update an interpolated attribute on an element with 5 bound values surrounded by text.
   *
   * Used when the value passed to a property has 5 interpolated values in it:
   *
   * ```html
   * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµattributeInterpolate5(
   * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
   * ```
   *
   * @param attrName The name of the attribute to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
      const lView = getLView();
      const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode &&
              storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
      }
      return ÉµÉµattributeInterpolate5;
  }
  /**
   *
   * Update an interpolated attribute on an element with 6 bound values surrounded by text.
   *
   * Used when the value passed to a property has 6 interpolated values in it:
   *
   * ```html
   * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµattributeInterpolate6(
   *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
   * ```
   *
   * @param attrName The name of the attribute to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
      const lView = getLView();
      const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode &&
              storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
      }
      return ÉµÉµattributeInterpolate6;
  }
  /**
   *
   * Update an interpolated attribute on an element with 7 bound values surrounded by text.
   *
   * Used when the value passed to a property has 7 interpolated values in it:
   *
   * ```html
   * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµattributeInterpolate7(
   *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
   * ```
   *
   * @param attrName The name of the attribute to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
      const lView = getLView();
      const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode &&
              storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
      }
      return ÉµÉµattributeInterpolate7;
  }
  /**
   *
   * Update an interpolated attribute on an element with 8 bound values surrounded by text.
   *
   * Used when the value passed to a property has 8 interpolated values in it:
   *
   * ```html
   * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµattributeInterpolate8(
   *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
   * ```
   *
   * @param attrName The name of the attribute to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param i6 Static value used for concatenation only.
   * @param v7 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
      const lView = getLView();
      const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
          ngDevMode &&
              storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
      }
      return ÉµÉµattributeInterpolate8;
  }
  /**
   * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.
   *
   * Used when the number of interpolated values exceeds 8.
   *
   * ```html
   * <div
   *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµattributeInterpolateV(
   *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
   *  'suffix']);
   * ```
   *
   * @param attrName The name of the attribute to update.
   * @param values The collection of values and the strings in-between those values, beginning with
   * a string prefix and ending with a string suffix.
   * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµattributeInterpolateV(attrName, values, sanitizer, namespace) {
      const lView = getLView();
      const interpolated = interpolationV(lView, values);
      if (interpolated !== NO_CHANGE) {
          const tNode = getSelectedTNode();
          elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);
          if (ngDevMode) {
              const interpolationInBetween = [values[0]]; // prefix
              for (let i = 2; i < values.length; i += 2) {
                  interpolationInBetween.push(values[i]);
              }
              storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
          }
      }
      return ÉµÉµattributeInterpolateV;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {
      ngDevMode && assertFirstCreatePass(tView);
      ngDevMode && ngDevMode.firstCreatePass++;
      const tViewConsts = tView.consts;
      // TODO(pk): refactor getOrCreateTNode to have the "create" only version
      const tNode = getOrCreateTNode(tView, index, 4 /* Container */, tagName || null, getConstant(tViewConsts, attrsIndex));
      resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
      registerPostOrderHooks(tView, tNode);
      const embeddedTView = tNode.tViews = createTView(2 /* Embedded */, tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);
      if (tView.queries !== null) {
          tView.queries.template(tView, tNode);
          embeddedTView.queries = tView.queries.embeddedTView(tNode);
      }
      return tNode;
  }
  /**
   * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.
   *
   * <ng-template #foo>
   *    <div></div>
   * </ng-template>
   *
   * @param index The index of the container in the data array
   * @param templateFn Inline template
   * @param decls The number of nodes, local refs, and pipes for this template
   * @param vars The number of bindings for this template
   * @param tagName The name of the container element, if applicable
   * @param attrsIndex Index of template attributes in the `consts` array.
   * @param localRefs Index of the local references in the `consts` array.
   * @param localRefExtractor A function which extracts local-refs values from the template.
   *        Defaults to the current element associated with the local-ref.
   *
   * @codeGenApi
   */
  function ÉµÉµtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
      const lView = getLView();
      const tView = getTView();
      const adjustedIndex = index + HEADER_OFFSET;
      const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) :
          tView.data[adjustedIndex];
      setCurrentTNode(tNode, false);
      const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');
      appendChild(tView, lView, comment, tNode);
      attachPatchData(comment, lView);
      addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));
      if (isDirectiveHost(tNode)) {
          createDirectivesInstances(tView, lView, tNode);
      }
      if (localRefsIndex != null) {
          saveResolvedLocalsInData(lView, tNode, localRefExtractor);
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /** Store a value in the `data` at a given `index`. */
  function store(tView, lView, index, value) {
      // We don't store any static data for local variables, so the first time
      // we see the template, we should store as null to avoid a sparse array
      if (index >= tView.data.length) {
          tView.data[index] = null;
          tView.blueprint[index] = null;
      }
      lView[index] = value;
  }
  /**
   * Retrieves a local reference from the current contextViewData.
   *
   * If the reference to retrieve is in a parent view, this instruction is used in conjunction
   * with a nextContext() call, which walks up the tree and updates the contextViewData instance.
   *
   * @param index The index of the local ref in contextViewData.
   *
   * @codeGenApi
   */
  function ÉµÉµreference(index) {
      const contextLView = getContextLView();
      return load(contextLView, HEADER_OFFSET + index);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
   *
   * This should be kept up to date with the public exports of @angular/core.
   */
  const angularCoreDiEnv = {
      'ÉµÉµdefineInjectable': ÉµÉµdefineInjectable,
      'ÉµÉµdefineInjector': ÉµÉµdefineInjector,
      'ÉµÉµinject': ÉµÉµinject,
      'ÉµÉµinvalidFactoryDep': ÉµÉµinvalidFactoryDep,
      'resolveForwardRef': resolveForwardRef,
  };
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting
   * injectable def (`Éµprov`) onto the injectable type.
   */
  function compileInjectable(type, meta) {
      let ngInjectableDef = null;
      let ngFactoryDef = null;
      // if NG_PROV_DEF is already defined on this class then don't overwrite it
      if (!type.hasOwnProperty(NG_PROV_DEF)) {
          Object.defineProperty(type, NG_PROV_DEF, {
              get: () => {
                  if (ngInjectableDef === null) {
                      const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'injectable', type });
                      ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/Éµprov.js`, getInjectableMetadata(type, meta));
                  }
                  return ngInjectableDef;
              },
          });
      }
      // if NG_FACTORY_DEF is already defined on this class then don't overwrite it
      if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
          Object.defineProperty(type, NG_FACTORY_DEF, {
              get: () => {
                  if (ngFactoryDef === null) {
                      const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'injectable', type });
                      ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/Éµfac.js`, {
                          name: type.name,
                          type,
                          typeArgumentCount: 0,
                          deps: reflectDependencies(type),
                          target: compiler.FactoryTarget.Injectable
                      });
                  }
                  return ngFactoryDef;
              },
              // Leave this configurable so that the factories from directives or pipes can take precedence.
              configurable: true
          });
      }
  }
  const USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });
  function isUseClassProvider(meta) {
      return meta.useClass !== undefined;
  }
  function isUseValueProvider(meta) {
      return USE_VALUE in meta;
  }
  function isUseFactoryProvider(meta) {
      return meta.useFactory !== undefined;
  }
  function isUseExistingProvider(meta) {
      return meta.useExisting !== undefined;
  }
  function getInjectableMetadata(type, srcMeta) {
      // Allow the compilation of a class with a `@Injectable()` decorator without parameters
      const meta = srcMeta || { providedIn: null };
      const compilerMeta = {
          name: type.name,
          type: type,
          typeArgumentCount: 0,
          providedIn: meta.providedIn,
      };
      if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {
          compilerMeta.deps = convertDependencies(meta.deps);
      }
      // Check to see if the user explicitly provided a `useXxxx` property.
      if (isUseClassProvider(meta)) {
          compilerMeta.useClass = meta.useClass;
      }
      else if (isUseValueProvider(meta)) {
          compilerMeta.useValue = meta.useValue;
      }
      else if (isUseFactoryProvider(meta)) {
          compilerMeta.useFactory = meta.useFactory;
      }
      else if (isUseExistingProvider(meta)) {
          compilerMeta.useExisting = meta.useExisting;
      }
      return compilerMeta;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Injectable decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function findFirstClosedCycle(keys) {
      const res = [];
      for (let i = 0; i < keys.length; ++i) {
          if (res.indexOf(keys[i]) > -1) {
              res.push(keys[i]);
              return res;
          }
          res.push(keys[i]);
      }
      return res;
  }
  function constructResolvingPath(keys) {
      if (keys.length > 1) {
          const reversed = findFirstClosedCycle(keys.slice().reverse());
          const tokenStrs = reversed.map(k => stringify(k.token));
          return ' (' + tokenStrs.join(' -> ') + ')';
      }
      return '';
  }
  function injectionError(injector, key, constructResolvingMessage, originalError) {
      const keys = [key];
      const errMsg = constructResolvingMessage(keys);
      const error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));
      error.addKey = addKey;
      error.keys = keys;
      error.injectors = [injector];
      error.constructResolvingMessage = constructResolvingMessage;
      error[ERROR_ORIGINAL_ERROR] = originalError;
      return error;
  }
  function addKey(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key);
      // Note: This updated message won't be reflected in the `.stack` property
      this.message = this.constructResolvingMessage(this.keys);
  }
  /**
   * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
   * {@link Injector} does not have a {@link Provider} for the given key.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * class A {
   *   constructor(b:B) {}
   * }
   *
   * expect(() => Injector.resolveAndCreate([A])).toThrowError();
   * ```
   */
  function noProviderError(injector, key) {
      return injectionError(injector, key, function (keys) {
          const first = stringify(keys[0].token);
          return `No provider for ${first}!${constructResolvingPath(keys)}`;
      });
  }
  /**
   * Thrown when dependencies form a cycle.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * var injector = Injector.resolveAndCreate([
   *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
   *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
   * ]);
   *
   * expect(() => injector.get("one")).toThrowError();
   * ```
   *
   * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
   */
  function cyclicDependencyError(injector, key) {
      return injectionError(injector, key, function (keys) {
          return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;
      });
  }
  /**
   * Thrown when a constructing type returns with an Error.
   *
   * The `InstantiationError` class contains the original error plus the dependency graph which caused
   * this object to be instantiated.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * class A {
   *   constructor() {
   *     throw new Error('message');
   *   }
   * }
   *
   * var injector = Injector.resolveAndCreate([A]);
  
   * try {
   *   injector.get(A);
   * } catch (e) {
   *   expect(e instanceof InstantiationError).toBe(true);
   *   expect(e.originalException.message).toEqual("message");
   *   expect(e.originalStack).toBeDefined();
   * }
   * ```
   */
  function instantiationError(injector, originalException, originalStack, key) {
      return injectionError(injector, key, function (keys) {
          const first = stringify(keys[0].token);
          return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;
      }, originalException);
  }
  /**
   * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
   * creation.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
   * ```
   */
  function invalidProviderError(provider) {
      return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);
  }
  /**
   * Thrown when the class has no annotation information.
   *
   * Lack of annotation information prevents the {@link Injector} from determining which dependencies
   * need to be injected into the constructor.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * class A {
   *   constructor(b) {}
   * }
   *
   * expect(() => Injector.resolveAndCreate([A])).toThrowError();
   * ```
   *
   * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
   *
   * ```typescript
   * class B {}
   *
   * class A {
   *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
   * }
   *
   * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
   * ```
   *
   */
  function noAnnotationError(typeOrFunc, params) {
      const signature = [];
      for (let i = 0, ii = params.length; i < ii; i++) {
          const parameter = params[i];
          if (!parameter || parameter.length == 0) {
              signature.push('?');
          }
          else {
              signature.push(parameter.map(stringify).join(' '));
          }
      }
      return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
          signature.join(', ') + '). ' +
          'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
          stringify(typeOrFunc) + '\' is decorated with Injectable.');
  }
  /**
   * Thrown when getting an object by index.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * class A {}
   *
   * var injector = Injector.resolveAndCreate([A]);
   *
   * expect(() => injector.getAt(100)).toThrowError();
   * ```
   *
   */
  function outOfBoundsError(index) {
      return Error(`Index ${index} is out-of-bounds.`);
  }
  // TODO: add a working example after alpha38 is released
  /**
   * Thrown when a multi provider and a regular provider are bound to the same token.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * expect(() => Injector.resolveAndCreate([
   *   { provide: "Strings", useValue: "string1", multi: true},
   *   { provide: "Strings", useValue: "string2", multi: false}
   * ])).toThrowError();
   * ```
   */
  function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
      return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A unique object used for retrieving items from the {@link ReflectiveInjector}.
   *
   * Keys have:
   * - a system-wide unique `id`.
   * - a `token`.
   *
   * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
   * the
   * injector to store created objects in a more efficient way.
   *
   * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
   * resolving
   * providers.
   *
   * @deprecated No replacement
   * @publicApi
   */
  class ReflectiveKey {
      /**
       * Private
       */
      constructor(token, id) {
          this.token = token;
          this.id = id;
          if (!token) {
              throw new Error('Token must be defined!');
          }
          this.displayName = stringify(this.token);
      }
      /**
       * Retrieves a `Key` for a token.
       */
      static get(token) {
          return _globalKeyRegistry.get(resolveForwardRef(token));
      }
      /**
       * @returns the number of keys registered in the system.
       */
      static get numberOfKeys() {
          return _globalKeyRegistry.numberOfKeys;
      }
  }
  class KeyRegistry {
      constructor() {
          this._allKeys = new Map();
      }
      get(token) {
          if (token instanceof ReflectiveKey)
              return token;
          if (this._allKeys.has(token)) {
              return this._allKeys.get(token);
          }
          const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
          this._allKeys.set(token, newKey);
          return newKey;
      }
      get numberOfKeys() {
          return this._allKeys.size;
      }
  }
  const _globalKeyRegistry = new KeyRegistry();
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Provides access to reflection data about symbols. Used internally by Angular
   * to power dependency injection and compilation.
   */
  class Reflector {
      constructor(reflectionCapabilities) {
          this.reflectionCapabilities = reflectionCapabilities;
      }
      updateCapabilities(caps) {
          this.reflectionCapabilities = caps;
      }
      factory(type) {
          return this.reflectionCapabilities.factory(type);
      }
      parameters(typeOrFunc) {
          return this.reflectionCapabilities.parameters(typeOrFunc);
      }
      annotations(typeOrFunc) {
          return this.reflectionCapabilities.annotations(typeOrFunc);
      }
      propMetadata(typeOrFunc) {
          return this.reflectionCapabilities.propMetadata(typeOrFunc);
      }
      hasLifecycleHook(type, lcProperty) {
          return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
      }
      getter(name) {
          return this.reflectionCapabilities.getter(name);
      }
      setter(name) {
          return this.reflectionCapabilities.setter(name);
      }
      method(name) {
          return this.reflectionCapabilities.method(name);
      }
      importUri(type) {
          return this.reflectionCapabilities.importUri(type);
      }
      resourceUri(type) {
          return this.reflectionCapabilities.resourceUri(type);
      }
      resolveIdentifier(name, moduleUrl, members, runtime) {
          return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
      }
      resolveEnum(identifier, name) {
          return this.reflectionCapabilities.resolveEnum(identifier, name);
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * The {@link Reflector} used internally in Angular to access metadata
   * about symbols.
   */
  const reflector = new Reflector(new ReflectionCapabilities());
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * `Dependency` is used by the framework to extend DI.
   * This is internal to Angular and should not be used directly.
   */
  class ReflectiveDependency {
      constructor(key, optional, visibility) {
          this.key = key;
          this.optional = optional;
          this.visibility = visibility;
      }
      static fromKey(key) {
          return new ReflectiveDependency(key, false, null);
      }
  }
  const _EMPTY_LIST = [];
  class ResolvedReflectiveProvider_ {
      constructor(key, resolvedFactories, multiProvider) {
          this.key = key;
          this.resolvedFactories = resolvedFactories;
          this.multiProvider = multiProvider;
          this.resolvedFactory = this.resolvedFactories[0];
      }
  }
  /**
   * An internal resolved representation of a factory function created by resolving `Provider`.
   * @publicApi
   */
  class ResolvedReflectiveFactory {
      constructor(
      /**
       * Factory function which can return an instance of an object represented by a key.
       */
      factory, 
      /**
       * Arguments (dependencies) to the `factory` function.
       */
      dependencies) {
          this.factory = factory;
          this.dependencies = dependencies;
      }
  }
  /**
   * Resolve a single provider.
   */
  function resolveReflectiveFactory(provider) {
      let factoryFn;
      let resolvedDeps;
      if (provider.useClass) {
          const useClass = resolveForwardRef(provider.useClass);
          factoryFn = reflector.factory(useClass);
          resolvedDeps = _dependenciesFor(useClass);
      }
      else if (provider.useExisting) {
          factoryFn = (aliasInstance) => aliasInstance;
          resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
      }
      else if (provider.useFactory) {
          factoryFn = provider.useFactory;
          resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
      }
      else {
          factoryFn = () => provider.useValue;
          resolvedDeps = _EMPTY_LIST;
      }
      return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
  }
  /**
   * Converts the `Provider` into `ResolvedProvider`.
   *
   * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider
   * syntax.
   */
  function resolveReflectiveProvider(provider) {
      return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
  }
  /**
   * Resolve a list of Providers.
   */
  function resolveReflectiveProviders(providers) {
      const normalized = _normalizeProviders(providers, []);
      const resolved = normalized.map(resolveReflectiveProvider);
      const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
      return Array.from(resolvedProviderMap.values());
  }
  /**
   * Merges a list of ResolvedProviders into a list where each key is contained exactly once and
   * multi providers have been merged.
   */
  function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
      for (let i = 0; i < providers.length; i++) {
          const provider = providers[i];
          const existing = normalizedProvidersMap.get(provider.key.id);
          if (existing) {
              if (provider.multiProvider !== existing.multiProvider) {
                  throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
              }
              if (provider.multiProvider) {
                  for (let j = 0; j < provider.resolvedFactories.length; j++) {
                      existing.resolvedFactories.push(provider.resolvedFactories[j]);
                  }
              }
              else {
                  normalizedProvidersMap.set(provider.key.id, provider);
              }
          }
          else {
              let resolvedProvider;
              if (provider.multiProvider) {
                  resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
              }
              else {
                  resolvedProvider = provider;
              }
              normalizedProvidersMap.set(provider.key.id, resolvedProvider);
          }
      }
      return normalizedProvidersMap;
  }
  function _normalizeProviders(providers, res) {
      providers.forEach(b => {
          if (b instanceof Type) {
              res.push({ provide: b, useClass: b });
          }
          else if (b && typeof b == 'object' && b.provide !== undefined) {
              res.push(b);
          }
          else if (Array.isArray(b)) {
              _normalizeProviders(b, res);
          }
          else {
              throw invalidProviderError(b);
          }
      });
      return res;
  }
  function constructDependencies(typeOrFunc, dependencies) {
      if (!dependencies) {
          return _dependenciesFor(typeOrFunc);
      }
      else {
          const params = dependencies.map(t => [t]);
          return dependencies.map(t => _extractToken(typeOrFunc, t, params));
      }
  }
  function _dependenciesFor(typeOrFunc) {
      const params = reflector.parameters(typeOrFunc);
      if (!params)
          return [];
      if (params.some(p => p == null)) {
          throw noAnnotationError(typeOrFunc, params);
      }
      return params.map(p => _extractToken(typeOrFunc, p, params));
  }
  function _extractToken(typeOrFunc, metadata, params) {
      let token = null;
      let optional = false;
      if (!Array.isArray(metadata)) {
          if (metadata instanceof Inject) {
              return _createDependency(metadata.token, optional, null);
          }
          else {
              return _createDependency(metadata, optional, null);
          }
      }
      let visibility = null;
      for (let i = 0; i < metadata.length; ++i) {
          const paramMetadata = metadata[i];
          if (paramMetadata instanceof Type) {
              token = paramMetadata;
          }
          else if (paramMetadata instanceof Inject) {
              token = paramMetadata.token;
          }
          else if (paramMetadata instanceof Optional) {
              optional = true;
          }
          else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
              visibility = paramMetadata;
          }
          else if (paramMetadata instanceof InjectionToken) {
              token = paramMetadata;
          }
      }
      token = resolveForwardRef(token);
      if (token != null) {
          return _createDependency(token, optional, visibility);
      }
      else {
          throw noAnnotationError(typeOrFunc, params);
      }
  }
  function _createDependency(token, optional, visibility) {
      return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // Threshold for the dynamic version
  const UNDEFINED = {};
  /**
   * A ReflectiveDependency injection container used for instantiating objects and resolving
   * dependencies.
   *
   * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
   * constructor dependencies.
   *
   * In typical use, application code asks for the dependencies in the constructor and they are
   * resolved by the `Injector`.
   *
   * @usageNotes
   * ### Example
   *
   * The following example creates an `Injector` configured to create `Engine` and `Car`.
   *
   * ```typescript
   * @Injectable()
   * class Engine {
   * }
   *
   * @Injectable()
   * class Car {
   *   constructor(public engine:Engine) {}
   * }
   *
   * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
   * var car = injector.get(Car);
   * expect(car instanceof Car).toBe(true);
   * expect(car.engine instanceof Engine).toBe(true);
   * ```
   *
   * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
   * resolve all of the object's dependencies automatically.
   *
   * TODO: delete in v14.
   *
   * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
   * @publicApi
   */
  class ReflectiveInjector {
      /**
       * Turns an array of provider definitions into an array of resolved providers.
       *
       * A resolution is a process of flattening multiple nested arrays and converting individual
       * providers into an array of `ResolvedReflectiveProvider`s.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * @Injectable()
       * class Engine {
       * }
       *
       * @Injectable()
       * class Car {
       *   constructor(public engine:Engine) {}
       * }
       *
       * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
       *
       * expect(providers.length).toEqual(2);
       *
       * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
       * expect(providers[0].key.displayName).toBe("Car");
       * expect(providers[0].dependencies.length).toEqual(1);
       * expect(providers[0].factory).toBeDefined();
       *
       * expect(providers[1].key.displayName).toBe("Engine");
       * });
       * ```
       *
       */
      static resolve(providers) {
          return resolveReflectiveProviders(providers);
      }
      /**
       * Resolves an array of providers and creates an injector from those providers.
       *
       * The passed-in providers can be an array of `Type`, `Provider`,
       * or a recursive array of more providers.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * @Injectable()
       * class Engine {
       * }
       *
       * @Injectable()
       * class Car {
       *   constructor(public engine:Engine) {}
       * }
       *
       * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
       * expect(injector.get(Car) instanceof Car).toBe(true);
       * ```
       */
      static resolveAndCreate(providers, parent) {
          const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
      }
      /**
       * Creates an injector from previously resolved providers.
       *
       * This API is the recommended way to construct injectors in performance-sensitive parts.
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * @Injectable()
       * class Engine {
       * }
       *
       * @Injectable()
       * class Car {
       *   constructor(public engine:Engine) {}
       * }
       *
       * var providers = ReflectiveInjector.resolve([Car, Engine]);
       * var injector = ReflectiveInjector.fromResolvedProviders(providers);
       * expect(injector.get(Car) instanceof Car).toBe(true);
       * ```
       */
      static fromResolvedProviders(providers, parent) {
          return new ReflectiveInjector_(providers, parent);
      }
  }
  class ReflectiveInjector_ {
      /**
       * Private
       */
      constructor(_providers, _parent) {
          /** @internal */
          this._constructionCounter = 0;
          this._providers = _providers;
          this.parent = _parent || null;
          const len = _providers.length;
          this.keyIds = [];
          this.objs = [];
          for (let i = 0; i < len; i++) {
              this.keyIds[i] = _providers[i].key.id;
              this.objs[i] = UNDEFINED;
          }
      }
      get(token, notFoundValue = THROW_IF_NOT_FOUND) {
          return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
      }
      resolveAndCreateChild(providers) {
          const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return this.createChildFromResolved(ResolvedReflectiveProviders);
      }
      createChildFromResolved(providers) {
          const inj = new ReflectiveInjector_(providers);
          inj.parent = this;
          return inj;
      }
      resolveAndInstantiate(provider) {
          return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
      }
      instantiateResolved(provider) {
          return this._instantiateProvider(provider);
      }
      getProviderAtIndex(index) {
          if (index < 0 || index >= this._providers.length) {
              throw outOfBoundsError(index);
          }
          return this._providers[index];
      }
      /** @internal */
      _new(provider) {
          if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
              throw cyclicDependencyError(this, provider.key);
          }
          return this._instantiateProvider(provider);
      }
      _getMaxNumberOfObjects() {
          return this.objs.length;
      }
      _instantiateProvider(provider) {
          if (provider.multiProvider) {
              const res = [];
              for (let i = 0; i < provider.resolvedFactories.length; ++i) {
                  res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
              }
              return res;
          }
          else {
              return this._instantiate(provider, provider.resolvedFactories[0]);
          }
      }
      _instantiate(provider, ResolvedReflectiveFactory) {
          const factory = ResolvedReflectiveFactory.factory;
          let deps;
          try {
              deps =
                  ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));
          }
          catch (e) {
              if (e.addKey) {
                  e.addKey(this, provider.key);
              }
              throw e;
          }
          let obj;
          try {
              obj = factory(...deps);
          }
          catch (e) {
              throw instantiationError(this, e, e.stack, provider.key);
          }
          return obj;
      }
      _getByReflectiveDependency(dep) {
          return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
      }
      _getByKey(key, visibility, notFoundValue) {
          if (key === ReflectiveInjector_.INJECTOR_KEY) {
              return this;
          }
          if (visibility instanceof Self) {
              return this._getByKeySelf(key, notFoundValue);
          }
          else {
              return this._getByKeyDefault(key, notFoundValue, visibility);
          }
      }
      _getObjByKeyId(keyId) {
          for (let i = 0; i < this.keyIds.length; i++) {
              if (this.keyIds[i] === keyId) {
                  if (this.objs[i] === UNDEFINED) {
                      this.objs[i] = this._new(this._providers[i]);
                  }
                  return this.objs[i];
              }
          }
          return UNDEFINED;
      }
      /** @internal */
      _throwOrNull(key, notFoundValue) {
          if (notFoundValue !== THROW_IF_NOT_FOUND) {
              return notFoundValue;
          }
          else {
              throw noProviderError(this, key);
          }
      }
      /** @internal */
      _getByKeySelf(key, notFoundValue) {
          const obj = this._getObjByKeyId(key.id);
          return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
      }
      /** @internal */
      _getByKeyDefault(key, notFoundValue, visibility) {
          let inj;
          if (visibility instanceof SkipSelf) {
              inj = this.parent;
          }
          else {
              inj = this;
          }
          while (inj instanceof ReflectiveInjector_) {
              const inj_ = inj;
              const obj = inj_._getObjByKeyId(key.id);
              if (obj !== UNDEFINED)
                  return obj;
              inj = inj_.parent;
          }
          if (inj !== null) {
              return inj.get(key.token, notFoundValue);
          }
          else {
              return this._throwOrNull(key, notFoundValue);
          }
      }
      get displayName() {
          const providers = _mapProviders(this, (b) => ' "' + b.key.displayName + '" ')
              .join(', ');
          return `ReflectiveInjector(providers: [${providers}])`;
      }
      toString() {
          return this.displayName;
      }
  }
  ReflectiveInjector_.INJECTOR_KEY = ( /* @__PURE__ */ReflectiveKey.get(Injector));
  function _mapProviders(injector, fn) {
      const res = [];
      for (let i = 0; i < injector._providers.length; ++i) {
          res[i] = fn(injector.getProviderAtIndex(i));
      }
      return res;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function ÉµÉµdirectiveInject(token, flags = InjectFlags.Default) {
      const lView = getLView();
      // Fall back to inject() if view hasn't been created. This situation can happen in tests
      // if inject utilities are used before bootstrapping.
      if (lView === null) {
          // Verify that we will not get into infinite loop.
          ngDevMode && assertInjectImplementationNotEqual(ÉµÉµdirectiveInject);
          return ÉµÉµinject(token, flags);
      }
      const tNode = getCurrentTNode();
      return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
  }
  /**
   * Throws an error indicating that a factory function could not be generated by the compiler for a
   * particular class.
   *
   * This instruction allows the actual error message to be optimized away when ngDevMode is turned
   * off, saving bytes of generated code while still providing a good experience in dev mode.
   *
   * The name of the class is not mentioned here, but will be in the generated factory function name
   * and thus in the stack trace.
   *
   * @codeGenApi
   */
  function ÉµÉµinvalidFactory() {
      const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';
      throw new Error(msg);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Update a property on a selected element.
   *
   * Operates on the element selected by index via the {@link select} instruction.
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled
   *
   * @param propName Name of property. Because it is going to DOM, this is not subject to
   *        renaming as part of minification.
   * @param value New value to write.
   * @param sanitizer An optional function used to sanitize the value.
   * @returns This function returns itself so that it may be chained
   * (e.g. `property('name', ctx.name)('title', ctx.title)`)
   *
   * @codeGenApi
   */
  function ÉµÉµproperty(propName, value, sanitizer) {
      const lView = getLView();
      const bindingIndex = nextBindingIndex();
      if (bindingUpdated(lView, bindingIndex, value)) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
      }
      return ÉµÉµproperty;
  }
  /**
   * Given `<div style="..." my-dir>` and `MyDir` with `@Input('style')` we need to write to
   * directive input.
   */
  function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
      const inputs = tNode.inputs;
      const property = isClassBased ? 'class' : 'style';
      // We support both 'class' and `className` hence the fallback.
      setInputsForProperty(tView, lView, inputs[property], property, value);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function elementStartFirstCreatePass(index, tView, lView, native, name, attrsIndex, localRefsIndex) {
      ngDevMode && assertFirstCreatePass(tView);
      ngDevMode && ngDevMode.firstCreatePass++;
      const tViewConsts = tView.consts;
      const attrs = getConstant(tViewConsts, attrsIndex);
      const tNode = getOrCreateTNode(tView, index, 2 /* Element */, name, attrs);
      const hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
      ngDevMode && validateElementIsKnown(native, tNode.value, tView.schemas, hasDirectives);
      if (tNode.attrs !== null) {
          computeStaticStyling(tNode, tNode.attrs, false);
      }
      if (tNode.mergedAttrs !== null) {
          computeStaticStyling(tNode, tNode.mergedAttrs, true);
      }
      if (tView.queries !== null) {
          tView.queries.elementStart(tView, tNode);
      }
      return tNode;
  }
  /**
   * Create DOM element. The instruction must later be followed by `elementEnd()` call.
   *
   * @param index Index of the element in the LView array
   * @param name Name of the DOM Node
   * @param attrsIndex Index of the element's attributes in the `consts` array.
   * @param localRefsIndex Index of the element's local references in the `consts` array.
   * @returns This function returns itself so that it may be chained.
   *
   * Attributes and localRefs are passed as an array of strings where elements with an even index
   * hold an attribute name and elements with an odd index hold an attribute value, ex.:
   * ['id', 'warning5', 'class', 'alert']
   *
   * @codeGenApi
   */
  function ÉµÉµelementStart(index, name, attrsIndex, localRefsIndex) {
      const lView = getLView();
      const tView = getTView();
      const adjustedIndex = HEADER_OFFSET + index;
      ngDevMode &&
          assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');
      ngDevMode && assertIndexInRange(lView, adjustedIndex);
      const renderer = lView[RENDERER];
      const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace$1());
      const tNode = tView.firstCreatePass ?
          elementStartFirstCreatePass(adjustedIndex, tView, lView, native, name, attrsIndex, localRefsIndex) :
          tView.data[adjustedIndex];
      setCurrentTNode(tNode, true);
      const mergedAttrs = tNode.mergedAttrs;
      if (mergedAttrs !== null) {
          setUpAttributes(renderer, native, mergedAttrs);
      }
      const classes = tNode.classes;
      if (classes !== null) {
          writeDirectClass(renderer, native, classes);
      }
      const styles = tNode.styles;
      if (styles !== null) {
          writeDirectStyle(renderer, native, styles);
      }
      if ((tNode.flags & 64 /* isDetached */) !== 64 /* isDetached */) {
          // In the i18n case, the translation may have removed this element, so only add it if it is not
          // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.
          appendChild(tView, lView, native, tNode);
      }
      // any immediate children of a component or template container must be pre-emptively
      // monkey-patched with the component view data so that the element can be inspected
      // later on using any element discovery utility methods (see `element_discovery.ts`)
      if (getElementDepthCount() === 0) {
          attachPatchData(native, lView);
      }
      increaseElementDepthCount();
      if (isDirectiveHost(tNode)) {
          createDirectivesInstances(tView, lView, tNode);
          executeContentQueries(tView, tNode, lView);
      }
      if (localRefsIndex !== null) {
          saveResolvedLocalsInData(lView, tNode);
      }
      return ÉµÉµelementStart;
  }
  /**
   * Mark the end of the element.
   * @returns This function returns itself so that it may be chained.
   *
   * @codeGenApi
   */
  function ÉµÉµelementEnd() {
      let currentTNode = getCurrentTNode();
      ngDevMode && assertDefined(currentTNode, 'No parent node to close.');
      if (isCurrentTNodeParent()) {
          setCurrentTNodeAsNotParent();
      }
      else {
          ngDevMode && assertHasParent(getCurrentTNode());
          currentTNode = currentTNode.parent;
          setCurrentTNode(currentTNode, false);
      }
      const tNode = currentTNode;
      ngDevMode && assertTNodeType(tNode, 3 /* AnyRNode */);
      decreaseElementDepthCount();
      const tView = getTView();
      if (tView.firstCreatePass) {
          registerPostOrderHooks(tView, currentTNode);
          if (isContentQueryHost(currentTNode)) {
              tView.queries.elementEnd(currentTNode);
          }
      }
      if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
          setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
      }
      if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
          setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
      }
      return ÉµÉµelementEnd;
  }
  /**
   * Creates an empty element using {@link elementStart} and {@link elementEnd}
   *
   * @param index Index of the element in the data array
   * @param name Name of the DOM Node
   * @param attrsIndex Index of the element's attributes in the `consts` array.
   * @param localRefsIndex Index of the element's local references in the `consts` array.
   * @returns This function returns itself so that it may be chained.
   *
   * @codeGenApi
   */
  function ÉµÉµelement(index, name, attrsIndex, localRefsIndex) {
      ÉµÉµelementStart(index, name, attrsIndex, localRefsIndex);
      ÉµÉµelementEnd();
      return ÉµÉµelement;
  }
  /**
   * Validates that the element is known at runtime and produces
   * an error if it's not the case.
   * This check is relevant for JIT-compiled components (for AOT-compiled
   * ones this check happens at build time).
   *
   * The element is considered known if either:
   * - it's a known HTML element
   * - it's a known custom element
   * - the element matches any directive
   * - the element is allowed by one of the schemas
   *
   * @param element Element to validate
   * @param tagName Name of the tag to check
   * @param schemas Array of schemas
   * @param hasDirectives Boolean indicating that the element matches any directive
   */
  function validateElementIsKnown(element, tagName, schemas, hasDirectives) {
      // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
      // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
      // defined as an array (as an empty array in case `schemas` field is not defined) and we should
      // execute the check below.
      if (schemas === null)
          return;
      // If the element matches any directive, it's considered as valid.
      if (!hasDirectives && tagName !== null) {
          // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered
          // as a custom element. Note that unknown elements with a dash in their name won't be instances
          // of HTMLUnknownElement in browsers that support web components.
          const isUnknown = 
          // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,
          // because while most browsers return 'function', IE returns 'object'.
          (typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement &&
              element instanceof HTMLUnknownElement) ||
              (typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 &&
                  !customElements.get(tagName));
          if (isUnknown && !matchingSchemas(schemas, tagName)) {
              let message = `'${tagName}' is not a known element:\n`;
              message += `1. If '${tagName}' is an Angular component, then verify that it is part of this module.\n`;
              if (tagName && tagName.indexOf('-') > -1) {
                  message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;
              }
              else {
                  message +=
                      `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;
              }
              console.error(formatRuntimeError(304 /* UNKNOWN_ELEMENT */, message));
          }
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
      ngDevMode && ngDevMode.firstCreatePass++;
      const tViewConsts = tView.consts;
      const attrs = getConstant(tViewConsts, attrsIndex);
      const tNode = getOrCreateTNode(tView, index, 8 /* ElementContainer */, 'ng-container', attrs);
      // While ng-container doesn't necessarily support styling, we use the style context to identify
      // and execute directives on the ng-container.
      if (attrs !== null) {
          computeStaticStyling(tNode, attrs, true);
      }
      const localRefs = getConstant(tViewConsts, localRefsIndex);
      resolveDirectives(tView, lView, tNode, localRefs);
      if (tView.queries !== null) {
          tView.queries.elementStart(tView, tNode);
      }
      return tNode;
  }
  /**
   * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.
   * The instruction must later be followed by `elementContainerEnd()` call.
   *
   * @param index Index of the element in the LView array
   * @param attrsIndex Index of the container attributes in the `consts` array.
   * @param localRefsIndex Index of the container's local references in the `consts` array.
   * @returns This function returns itself so that it may be chained.
   *
   * Even if this instruction accepts a set of attributes no actual attribute values are propagated to
   * the DOM (as a comment node can't have attributes). Attributes are here only for directive
   * matching purposes and setting initial inputs of directives.
   *
   * @codeGenApi
   */
  function ÉµÉµelementContainerStart(index, attrsIndex, localRefsIndex) {
      const lView = getLView();
      const tView = getTView();
      const adjustedIndex = index + HEADER_OFFSET;
      ngDevMode && assertIndexInRange(lView, adjustedIndex);
      ngDevMode &&
          assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');
      const tNode = tView.firstCreatePass ?
          elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) :
          tView.data[adjustedIndex];
      setCurrentTNode(tNode, true);
      ngDevMode && ngDevMode.rendererCreateComment++;
      const native = lView[adjustedIndex] =
          lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');
      appendChild(tView, lView, native, tNode);
      attachPatchData(native, lView);
      if (isDirectiveHost(tNode)) {
          createDirectivesInstances(tView, lView, tNode);
          executeContentQueries(tView, tNode, lView);
      }
      if (localRefsIndex != null) {
          saveResolvedLocalsInData(lView, tNode);
      }
      return ÉµÉµelementContainerStart;
  }
  /**
   * Mark the end of the <ng-container>.
   * @returns This function returns itself so that it may be chained.
   *
   * @codeGenApi
   */
  function ÉµÉµelementContainerEnd() {
      let currentTNode = getCurrentTNode();
      const tView = getTView();
      if (isCurrentTNodeParent()) {
          setCurrentTNodeAsNotParent();
      }
      else {
          ngDevMode && assertHasParent(currentTNode);
          currentTNode = currentTNode.parent;
          setCurrentTNode(currentTNode, false);
      }
      ngDevMode && assertTNodeType(currentTNode, 8 /* ElementContainer */);
      if (tView.firstCreatePass) {
          registerPostOrderHooks(tView, currentTNode);
          if (isContentQueryHost(currentTNode)) {
              tView.queries.elementEnd(currentTNode);
          }
      }
      return ÉµÉµelementContainerEnd;
  }
  /**
   * Creates an empty logical container using {@link elementContainerStart}
   * and {@link elementContainerEnd}
   *
   * @param index Index of the element in the LView array
   * @param attrsIndex Index of the container attributes in the `consts` array.
   * @param localRefsIndex Index of the container's local references in the `consts` array.
   * @returns This function returns itself so that it may be chained.
   *
   * @codeGenApi
   */
  function ÉµÉµelementContainer(index, attrsIndex, localRefsIndex) {
      ÉµÉµelementContainerStart(index, attrsIndex, localRefsIndex);
      ÉµÉµelementContainerEnd();
      return ÉµÉµelementContainer;
  }
  
  /**
   * Returns the current OpaqueViewState instance.
   *
   * Used in conjunction with the restoreView() instruction to save a snapshot
   * of the current view and restore it when listeners are invoked. This allows
   * walking the declaration view tree in listeners to get vars from parent views.
   *
   * @codeGenApi
   */
  function ÉµÉµgetCurrentView() {
      return getLView();
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Determine if the argument is shaped like a Promise
   */
  function core_isPromise(obj) {
      // allow any Promise/A+ compliant thenable.
      // It's up to the caller to ensure that obj.then conforms to the spec
      return !!obj && typeof obj.then === 'function';
  }
  /**
   * Determine if the argument is a Subscribable
   */
  function isSubscribable(obj) {
      return !!obj && typeof obj.subscribe === 'function';
  }
  /**
   * Determine if the argument is an Observable
   *
   * Strictly this tests that the `obj` is `Subscribable`, since `Observable`
   * types need additional methods, such as `lift()`. But it is adequate for our
   * needs since within the Angular framework code we only ever need to use the
   * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects
   * into `Observable` as needed.
   */
  const isObservable = isSubscribable;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Adds an event listener to the current node.
   *
   * If an output exists on one of the node's directives, it also subscribes to the output
   * and saves the subscription for later cleanup.
   *
   * @param eventName Name of the event
   * @param listenerFn The function to be called when event emits
   * @param useCapture Whether or not to use capture in event listener
   * @param eventTargetResolver Function that returns global target information in case this listener
   * should be attached to a global object like window, document or body
   *
   * @codeGenApi
   */
  function ÉµÉµlistener(eventName, listenerFn, useCapture, eventTargetResolver) {
      const lView = getLView();
      const tView = getTView();
      const tNode = getCurrentTNode();
      listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, !!useCapture, eventTargetResolver);
      return ÉµÉµlistener;
  }
  /**
   * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.
   *
   * This instruction is for compatibility purposes and is designed to ensure that a
   * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered
   * in the component's renderer. Normally all host listeners are evaluated with the
   * parent component's renderer, but, in the case of animation @triggers, they need
   * to be evaluated with the sub component's renderer (because that's where the
   * animation triggers are defined).
   *
   * Do not use this instruction as a replacement for `listener`. This instruction
   * only exists to ensure compatibility with the ViewEngine's host binding behavior.
   *
   * @param eventName Name of the event
   * @param listenerFn The function to be called when event emits
   * @param useCapture Whether or not to use capture in event listener
   * @param eventTargetResolver Function that returns global target information in case this listener
   * should be attached to a global object like window, document or body
   *
   * @codeGenApi
   */
  function ÉµÉµsyntheticHostListener(eventName, listenerFn) {
      const tNode = getCurrentTNode();
      const lView = getLView();
      const tView = getTView();
      const currentDef = getCurrentDirectiveDef(tView.data);
      const renderer = loadComponentRenderer(currentDef, tNode, lView);
      listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, false);
      return ÉµÉµsyntheticHostListener;
  }
  /**
   * A utility function that checks if a given element has already an event handler registered for an
   * event with a specified name. The TView.cleanup data structure is used to find out which events
   * are registered for a given element.
   */
  function findExistingListener(tView, lView, eventName, tNodeIdx) {
      const tCleanup = tView.cleanup;
      if (tCleanup != null) {
          for (let i = 0; i < tCleanup.length - 1; i += 2) {
              const cleanupEventName = tCleanup[i];
              if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
                  // We have found a matching event name on the same node but it might not have been
                  // registered yet, so we must explicitly verify entries in the LView cleanup data
                  // structures.
                  const lCleanup = lView[CLEANUP];
                  const listenerIdxInLCleanup = tCleanup[i + 2];
                  return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
              }
              // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or
              // 2-element entries (for directive and queries destroy hooks). As such we can encounter
              // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements
              // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check
              // documentation of TView.cleanup for more details of this data structure layout.
              if (typeof cleanupEventName === 'string') {
                  i += 2;
              }
          }
      }
      return null;
  }
  function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver) {
      const isTNodeDirectiveHost = isDirectiveHost(tNode);
      const firstCreatePass = tView.firstCreatePass;
      const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);
      const context = lView[CONTEXT];
      // When the ÉµÉµlistener instruction was generated and is executed we know that there is either a
      // native listener or a directive output on this element. As such we we know that we will have to
      // register a listener and store its cleanup function on LView.
      const lCleanup = getOrCreateLViewCleanup(lView);
      ngDevMode && assertTNodeType(tNode, 3 /* AnyRNode */ | 12 /* AnyContainer */);
      let processOutputs = true;
      // Adding a native event listener is applicable when:
      // - The corresponding TNode represents a DOM element.
      // - The event target has a resolver (usually resulting in a global object,
      //   such as `window` or `document`).
      if ((tNode.type & 3 /* AnyRNode */) || eventTargetResolver) {
          const native = getNativeByTNode(tNode, lView);
          const target = eventTargetResolver ? eventTargetResolver(native) : native;
          const lCleanupIndex = lCleanup.length;
          const idxOrTargetGetter = eventTargetResolver ?
              (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) :
              tNode.index;
          // In order to match current behavior, native DOM event listeners must be added for all
          // events (including outputs).
          if (isProceduralRenderer(renderer)) {
              // There might be cases where multiple directives on the same element try to register an event
              // handler function for the same event. In this situation we want to avoid registration of
              // several native listeners as each registration would be intercepted by NgZone and
              // trigger change detection. This would mean that a single user action would result in several
              // change detections being invoked. To avoid this situation we want to have only one call to
              // native handler registration (for the same element and same type of event).
              //
              // In order to have just one native event handler in presence of multiple handler functions,
              // we just register a first handler function as a native event listener and then chain
              // (coalesce) other handler functions on top of the first native handler function.
              let existingListener = null;
              // Please note that the coalescing described here doesn't happen for events specifying an
              // alternative target (ex. (document:click)) - this is to keep backward compatibility with the
              // view engine.
              // Also, we don't have to search for existing listeners is there are no directives
              // matching on a given node as we can't register multiple event handlers for the same event in
              // a template (this would mean having duplicate attributes).
              if (!eventTargetResolver && isTNodeDirectiveHost) {
                  existingListener = findExistingListener(tView, lView, eventName, tNode.index);
              }
              if (existingListener !== null) {
                  // Attach a new listener to coalesced listeners list, maintaining the order in which
                  // listeners are registered. For performance reasons, we keep a reference to the last
                  // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through
                  // the entire set each time we need to add a new listener.
                  const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
                  lastListenerFn.__ngNextListenerFn__ = listenerFn;
                  existingListener.__ngLastListenerFn__ = listenerFn;
                  processOutputs = false;
              }
              else {
                  listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);
                  const cleanupFn = renderer.listen(target, eventName, listenerFn);
                  ngDevMode && ngDevMode.rendererAddEventListener++;
                  lCleanup.push(listenerFn, cleanupFn);
                  tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
              }
          }
          else {
              listenerFn = wrapListener(tNode, lView, context, listenerFn, true /** preventDefault */);
              target.addEventListener(eventName, listenerFn, useCapture);
              ngDevMode && ngDevMode.rendererAddEventListener++;
              lCleanup.push(listenerFn);
              tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);
          }
      }
      else {
          // Even if there is no native listener to add, we still need to wrap the listener so that OnPush
          // ancestors are marked dirty when an event occurs.
          listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);
      }
      // subscribe to directive outputs
      const outputs = tNode.outputs;
      let props;
      if (processOutputs && outputs !== null && (props = outputs[eventName])) {
          const propsLength = props.length;
          if (propsLength) {
              for (let i = 0; i < propsLength; i += 2) {
                  const index = props[i];
                  ngDevMode && assertIndexInRange(lView, index);
                  const minifiedName = props[i + 1];
                  const directiveInstance = lView[index];
                  const output = directiveInstance[minifiedName];
                  if (ngDevMode && !isObservable(output)) {
                      throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);
                  }
                  const subscription = output.subscribe(listenerFn);
                  const idx = lCleanup.length;
                  lCleanup.push(listenerFn, subscription);
                  tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
              }
          }
      }
  }
  function executeListenerWithErrorHandling(lView, context, listenerFn, e) {
      try {
          profiler(6 /* OutputStart */, context, listenerFn);
          // Only explicitly returning false from a listener should preventDefault
          return listenerFn(e) !== false;
      }
      catch (error) {
          handleError(lView, error);
          return false;
      }
      finally {
          profiler(7 /* OutputEnd */, context, listenerFn);
      }
  }
  /**
   * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,
   * if applicable.
   *
   * @param tNode The TNode associated with this listener
   * @param lView The LView that contains this listener
   * @param listenerFn The listener function to call
   * @param wrapWithPreventDefault Whether or not to prevent default behavior
   * (the procedural renderer does this already, so in those cases, we should skip)
   */
  function wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {
      // Note: we are performing most of the work in the listener function itself
      // to optimize listener registration.
      return function wrapListenerIn_markDirtyAndPreventDefault(e) {
          // Ivy uses `Function` as a special token that allows us to unwrap the function
          // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.
          if (e === Function) {
              return listenerFn;
          }
          // In order to be backwards compatible with View Engine, events on component host nodes
          // must also mark the component view itself dirty (i.e. the view that it owns).
          const startView = tNode.flags & 2 /* isComponentHost */ ?
              getComponentLViewByIndex(tNode.index, lView) :
              lView;
          // See interfaces/view.ts for more on LViewFlags.ManualOnPush
          if ((lView[FLAGS] & 32 /* ManualOnPush */) === 0) {
              markViewDirty(startView);
          }
          let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);
          // A just-invoked listener function might have coalesced listeners so we need to check for
          // their presence and invoke as needed.
          let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;
          while (nextListenerFn) {
              // We should prevent default if any of the listeners explicitly return false
              result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;
              nextListenerFn = nextListenerFn.__ngNextListenerFn__;
          }
          if (wrapWithPreventDefault && result === false) {
              e.preventDefault();
              // Necessary for legacy browsers that don't support preventDefault (e.g. IE)
              e.returnValue = false;
          }
          return result;
      };
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Retrieves a context at the level specified and saves it as the global, contextViewData.
   * Will get the next level up if level is not specified.
   *
   * This is used to save contexts of parent views so they can be bound in embedded views, or
   * in conjunction with reference() to bind a ref from a parent view.
   *
   * @param level The relative level of the view from which to grab context compared to contextVewData
   * @returns context
   *
   * @codeGenApi
   */
  function ÉµÉµnextContext(level = 1) {
      return nextContextImpl(level);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Checks a given node against matching projection slots and returns the
   * determined slot index. Returns "null" if no slot matched the given node.
   *
   * This function takes into account the parsed ngProjectAs selector from the
   * node's attributes. If present, it will check whether the ngProjectAs selector
   * matches any of the projection slot selectors.
   */
  function matchingProjectionSlotIndex(tNode, projectionSlots) {
      let wildcardNgContentIndex = null;
      const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);
      for (let i = 0; i < projectionSlots.length; i++) {
          const slotValue = projectionSlots[i];
          // The last wildcard projection slot should match all nodes which aren't matching
          // any selector. This is necessary to be backwards compatible with view engine.
          if (slotValue === '*') {
              wildcardNgContentIndex = i;
              continue;
          }
          // If we ran into an `ngProjectAs` attribute, we should match its parsed selector
          // to the list of selectors, otherwise we fall back to matching against the node.
          if (ngProjectAsAttrVal === null ?
              isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :
              isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
              return i; // first matching selector "captures" a given node
          }
      }
      return wildcardNgContentIndex;
  }
  /**
   * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.
   * It takes all the selectors from the entire component's template and decides where
   * each projected node belongs (it re-distributes nodes among "buckets" where each "bucket" is
   * backed by a selector).
   *
   * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,
   * un-parsed form.
   *
   * The parsed form is needed for efficient matching of a node against a given CSS selector.
   * The un-parsed, textual form is needed for support of the ngProjectAs attribute.
   *
   * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more
   * drawbacks:
   * - having only a textual form would require runtime parsing of CSS selectors;
   * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a
   * template author).
   *
   * @param projectionSlots? A collection of projection slots. A projection slot can be based
   *        on a parsed CSS selectors or set to the wildcard selector ("*") in order to match
   *        all nodes which do not match any selector. If not specified, a single wildcard
   *        selector projection slot will be defined.
   *
   * @codeGenApi
   */
  function ÉµÉµprojectionDef(projectionSlots) {
      const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];
      if (!componentNode.projection) {
          // If no explicit projection slots are defined, fall back to a single
          // projection slot with the wildcard selector.
          const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
          const projectionHeads = componentNode.projection =
              newArray(numProjectionSlots, null);
          const tails = projectionHeads.slice();
          let componentChild = componentNode.child;
          while (componentChild !== null) {
              const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;
              if (slotIndex !== null) {
                  if (tails[slotIndex]) {
                      tails[slotIndex].projectionNext = componentChild;
                  }
                  else {
                      projectionHeads[slotIndex] = componentChild;
                  }
                  tails[slotIndex] = componentChild;
              }
              componentChild = componentChild.next;
          }
      }
  }
  /**
   * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call
   * to the projectionDef instruction.
   *
   * @param nodeIndex
   * @param selectorIndex:
   *        - 0 when the selector is `*` (or unspecified as this is the default value),
   *        - 1 based index of the selector from the {@link projectionDef}
   *
   * @codeGenApi
   */
  function ÉµÉµprojection(nodeIndex, selectorIndex = 0, attrs) {
      const lView = getLView();
      const tView = getTView();
      const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* Projection */, null, attrs || null);
      // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.
      if (tProjectionNode.projection === null)
          tProjectionNode.projection = selectorIndex;
      // `<ng-content>` has no content
      setCurrentTNodeAsNotParent();
      if ((tProjectionNode.flags & 64 /* isDetached */) !== 64 /* isDetached */) {
          // re-distribution of projectable nodes is stored on a component's view level
          applyProjection(tView, lView, tProjectionNode);
      }
  }
  
  /**
   *
   * Update an interpolated property on an element with a lone bound value
   *
   * Used when the value passed to a property has 1 interpolated value in it, an no additional text
   * surrounds that interpolated value:
   *
   * ```html
   * <div title="{{v0}}"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolate('title', v0);
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolate(propName, v0, sanitizer) {
      ÉµÉµpropertyInterpolate1(propName, '', v0, '', sanitizer);
      return ÉµÉµpropertyInterpolate;
  }
  /**
   *
   * Update an interpolated property on an element with single bound value surrounded by text.
   *
   * Used when the value passed to a property has 1 interpolated value in it:
   *
   * ```html
   * <div title="prefix{{v0}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolate1('title', 'prefix', v0, 'suffix');
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
      const lView = getLView();
      const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode &&
              storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
      }
      return ÉµÉµpropertyInterpolate1;
  }
  /**
   *
   * Update an interpolated property on an element with 2 bound values surrounded by text.
   *
   * Used when the value passed to a property has 2 interpolated values in it:
   *
   * ```html
   * <div title="prefix{{v0}}-{{v1}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
      const lView = getLView();
      const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode &&
              storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
      }
      return ÉµÉµpropertyInterpolate2;
  }
  /**
   *
   * Update an interpolated property on an element with 3 bound values surrounded by text.
   *
   * Used when the value passed to a property has 3 interpolated values in it:
   *
   * ```html
   * <div title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolate3(
   * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
      const lView = getLView();
      const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode &&
              storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
      }
      return ÉµÉµpropertyInterpolate3;
  }
  /**
   *
   * Update an interpolated property on an element with 4 bound values surrounded by text.
   *
   * Used when the value passed to a property has 4 interpolated values in it:
   *
   * ```html
   * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolate4(
   * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
      const lView = getLView();
      const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode &&
              storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
      }
      return ÉµÉµpropertyInterpolate4;
  }
  /**
   *
   * Update an interpolated property on an element with 5 bound values surrounded by text.
   *
   * Used when the value passed to a property has 5 interpolated values in it:
   *
   * ```html
   * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolate5(
   * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
      const lView = getLView();
      const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode &&
              storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
      }
      return ÉµÉµpropertyInterpolate5;
  }
  /**
   *
   * Update an interpolated property on an element with 6 bound values surrounded by text.
   *
   * Used when the value passed to a property has 6 interpolated values in it:
   *
   * ```html
   * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolate6(
   *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
      const lView = getLView();
      const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode &&
              storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
      }
      return ÉµÉµpropertyInterpolate6;
  }
  /**
   *
   * Update an interpolated property on an element with 7 bound values surrounded by text.
   *
   * Used when the value passed to a property has 7 interpolated values in it:
   *
   * ```html
   * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolate7(
   *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
      const lView = getLView();
      const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode &&
              storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
      }
      return ÉµÉµpropertyInterpolate7;
  }
  /**
   *
   * Update an interpolated property on an element with 8 bound values surrounded by text.
   *
   * Used when the value passed to a property has 8 interpolated values in it:
   *
   * ```html
   * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolate8(
   *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param i6 Static value used for concatenation only.
   * @param v7 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
      const lView = getLView();
      const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
      if (interpolatedValue !== NO_CHANGE) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          ngDevMode &&
              storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
      }
      return ÉµÉµpropertyInterpolate8;
  }
  /**
   * Update an interpolated property on an element with 9 or more bound values surrounded by text.
   *
   * Used when the number of interpolated values exceeds 8.
   *
   * ```html
   * <div
   *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
   * ```
   *
   * Its compiled representation is::
   *
   * ```ts
   * ÉµÉµpropertyInterpolateV(
   *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
   *  'suffix']);
   * ```
   *
   * If the property name also exists as an input property on one of the element's directives,
   * the component property will be set instead of the element property. This check must
   * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
   *
   * @param propName The name of the property to update.
   * @param values The collection of values and the strings inbetween those values, beginning with a
   * string prefix and ending with a string suffix.
   * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
   * @param sanitizer An optional sanitizer function
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµpropertyInterpolateV(propName, values, sanitizer) {
      const lView = getLView();
      const interpolatedValue = interpolationV(lView, values);
      if (interpolatedValue !== NO_CHANGE) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
          if (ngDevMode) {
              const interpolationInBetween = [values[0]]; // prefix
              for (let i = 2; i < values.length; i += 2) {
                  interpolationInBetween.push(values[i]);
              }
              storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
          }
      }
      return ÉµÉµpropertyInterpolateV;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * NOTE: The word `styling` is used interchangeably as style or class styling.
   *
   * This file contains code to link styling instructions together so that they can be replayed in
   * priority order. The file exists because Ivy styling instruction execution order does not match
   * that of the priority order. The purpose of this code is to create a linked list so that the
   * instructions can be traversed in priority order when computing the styles.
   *
   * Assume we are dealing with the following code:
   * ```
   * @Component({
   *   template: `
   *     <my-cmp [style]=" {color: '#001'} "
   *             [style.color]=" #002 "
   *             dir-style-color-1
   *             dir-style-color-2> `
   * })
   * class ExampleComponent {
   *   static ngComp = ... {
   *     ...
   *     // Compiler ensures that `ÉµÉµstyleProp` is after `ÉµÉµstyleMap`
   *     ÉµÉµstyleMap({color: '#001'});
   *     ÉµÉµstyleProp('color', '#002');
   *     ...
   *   }
   * }
   *
   * @Directive({
   *   selector: `[dir-style-color-1]',
   * })
   * class Style1Directive {
   *   @HostBinding('style') style = {color: '#005'};
   *   @HostBinding('style.color') color = '#006';
   *
   *   static ngDir = ... {
   *     ...
   *     // Compiler ensures that `ÉµÉµstyleProp` is after `ÉµÉµstyleMap`
   *     ÉµÉµstyleMap({color: '#005'});
   *     ÉµÉµstyleProp('color', '#006');
   *     ...
   *   }
   * }
   *
   * @Directive({
   *   selector: `[dir-style-color-2]',
   * })
   * class Style2Directive {
   *   @HostBinding('style') style = {color: '#007'};
   *   @HostBinding('style.color') color = '#008';
   *
   *   static ngDir = ... {
   *     ...
   *     // Compiler ensures that `ÉµÉµstyleProp` is after `ÉµÉµstyleMap`
   *     ÉµÉµstyleMap({color: '#007'});
   *     ÉµÉµstyleProp('color', '#008');
   *     ...
   *   }
   * }
   *
   * @Directive({
   *   selector: `my-cmp',
   * })
   * class MyComponent {
   *   @HostBinding('style') style = {color: '#003'};
   *   @HostBinding('style.color') color = '#004';
   *
   *   static ngComp = ... {
   *     ...
   *     // Compiler ensures that `ÉµÉµstyleProp` is after `ÉµÉµstyleMap`
   *     ÉµÉµstyleMap({color: '#003'});
   *     ÉµÉµstyleProp('color', '#004');
   *     ...
   *   }
   * }
   * ```
   *
   * The Order of instruction execution is:
   *
   * NOTE: the comment binding location is for illustrative purposes only.
   *
   * ```
   * // Template: (ExampleComponent)
   *     ÉµÉµstyleMap({color: '#001'});   // Binding index: 10
   *     ÉµÉµstyleProp('color', '#002');  // Binding index: 12
   * // MyComponent
   *     ÉµÉµstyleMap({color: '#003'});   // Binding index: 20
   *     ÉµÉµstyleProp('color', '#004');  // Binding index: 22
   * // Style1Directive
   *     ÉµÉµstyleMap({color: '#005'});   // Binding index: 24
   *     ÉµÉµstyleProp('color', '#006');  // Binding index: 26
   * // Style2Directive
   *     ÉµÉµstyleMap({color: '#007'});   // Binding index: 28
   *     ÉµÉµstyleProp('color', '#008');  // Binding index: 30
   * ```
   *
   * The correct priority order of concatenation is:
   *
   * ```
   * // MyComponent
   *     ÉµÉµstyleMap({color: '#003'});   // Binding index: 20
   *     ÉµÉµstyleProp('color', '#004');  // Binding index: 22
   * // Style1Directive
   *     ÉµÉµstyleMap({color: '#005'});   // Binding index: 24
   *     ÉµÉµstyleProp('color', '#006');  // Binding index: 26
   * // Style2Directive
   *     ÉµÉµstyleMap({color: '#007'});   // Binding index: 28
   *     ÉµÉµstyleProp('color', '#008');  // Binding index: 30
   * // Template: (ExampleComponent)
   *     ÉµÉµstyleMap({color: '#001'});   // Binding index: 10
   *     ÉµÉµstyleProp('color', '#002');  // Binding index: 12
   * ```
   *
   * What color should be rendered?
   *
   * Once the items are correctly sorted in the list, the answer is simply the last item in the
   * concatenation list which is `#002`.
   *
   * To do so we keep a linked list of all of the bindings which pertain to this element.
   * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows
   * us to traverse them in the order of priority.
   *
   * |Idx|`TView.data`|`LView`          | Notes
   * |---|------------|-----------------|--------------
   * |...|            |                 |
   * |10 |`null`      |`{color: '#001'}`| `ÉµÉµstyleMap('color', {color: '#001'})`
   * |11 |`30 | 12`   | ...             |
   * |12 |`color`     |`'#002'`         | `ÉµÉµstyleProp('color', '#002')`
   * |13 |`10 | 0`    | ...             |
   * |...|            |                 |
   * |20 |`null`      |`{color: '#003'}`| `ÉµÉµstyleMap('color', {color: '#003'})`
   * |21 |`0 | 22`    | ...             |
   * |22 |`color`     |`'#004'`         | `ÉµÉµstyleProp('color', '#004')`
   * |23 |`20 | 24`   | ...             |
   * |24 |`null`      |`{color: '#005'}`| `ÉµÉµstyleMap('color', {color: '#005'})`
   * |25 |`22 | 26`   | ...             |
   * |26 |`color`     |`'#006'`         | `ÉµÉµstyleProp('color', '#006')`
   * |27 |`24 | 28`   | ...             |
   * |28 |`null`      |`{color: '#007'}`| `ÉµÉµstyleMap('color', {color: '#007'})`
   * |29 |`26 | 30`   | ...             |
   * |30 |`color`     |`'#008'`         | `ÉµÉµstyleProp('color', '#008')`
   * |31 |`28 | 10`   | ...             |
   *
   * The above data structure allows us to re-concatenate the styling no matter which data binding
   * changes.
   *
   * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next
   * duplicate bit. The duplicate bit if true says there either is a binding with the same name or
   * there is a map (which may contain the name). This information is useful in knowing if other
   * styles with higher priority need to be searched for overwrites.
   *
   * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in
   * `tnode_linked_list_spec.ts` for working example.
   */
  let __unused_const_as_closure_does_not_like_standalone_comment_blocks__;
  /**
   * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked
   * list of styles and compute the duplicate flag.
   *
   * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.
   *
   * The function works by keeping track of `tStylingRange` which contains two pointers pointing to
   * the head/tail of the template portion of the styles.
   *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`
   *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`
   *
   * @param tData The `TData` to insert into.
   * @param tNode `TNode` associated with the styling element.
   * @param tStylingKey See `TStylingKey`.
   * @param index location of where `tStyleValue` should be stored (and linked into list.)
   * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of
   *               template.)
   * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
   *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
   */
  function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
      ngDevMode && assertFirstUpdatePass(getTView());
      let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
      let tmplHead = getTStylingRangePrev(tBindings);
      let tmplTail = getTStylingRangeNext(tBindings);
      tData[index] = tStylingKeyWithStatic;
      let isKeyDuplicateOfStatic = false;
      let tStylingKey;
      if (Array.isArray(tStylingKeyWithStatic)) {
          // We are case when the `TStylingKey` contains static fields as well.
          const staticKeyValueArray = tStylingKeyWithStatic;
          tStylingKey = staticKeyValueArray[1]; // unwrap.
          // We need to check if our key is present in the static so that we can mark it as duplicate.
          if (tStylingKey === null ||
              keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
              // tStylingKey is present in the statics, need to mark it as duplicate.
              isKeyDuplicateOfStatic = true;
          }
      }
      else {
          tStylingKey = tStylingKeyWithStatic;
      }
      if (isHostBinding) {
          // We are inserting host bindings
          // If we don't have template bindings then `tail` is 0.
          const hasTemplateBindings = tmplTail !== 0;
          // This is important to know because that means that the `head` can't point to the first
          // template bindings (there are none.) Instead the head points to the tail of the template.
          if (hasTemplateBindings) {
              // template head's "prev" will point to last host binding or to 0 if no host bindings yet
              const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
              tData[index + 1] = toTStylingRange(previousNode, tmplHead);
              // if a host binding has already been registered, we need to update the next of that host
              // binding to point to this one
              if (previousNode !== 0) {
                  // We need to update the template-tail value to point to us.
                  tData[previousNode + 1] =
                      setTStylingRangeNext(tData[previousNode + 1], index);
              }
              // The "previous" of the template binding head should point to this host binding
              tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
          }
          else {
              tData[index + 1] = toTStylingRange(tmplHead, 0);
              // if a host binding has already been registered, we need to update the next of that host
              // binding to point to this one
              if (tmplHead !== 0) {
                  // We need to update the template-tail value to point to us.
                  tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
              }
              // if we don't have template, the head points to template-tail, and needs to be advanced.
              tmplHead = index;
          }
      }
      else {
          // We are inserting in template section.
          // We need to set this binding's "previous" to the current template tail
          tData[index + 1] = toTStylingRange(tmplTail, 0);
          ngDevMode &&
              assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');
          if (tmplHead === 0) {
              tmplHead = index;
          }
          else {
              // We need to update the previous value "next" to point to this binding
              tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
          }
          tmplTail = index;
      }
      // Now we need to update / compute the duplicates.
      // Starting with our location search towards head (least priority)
      if (isKeyDuplicateOfStatic) {
          tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
      }
      markDuplicates(tData, tStylingKey, index, true, isClassBinding);
      markDuplicates(tData, tStylingKey, index, false, isClassBinding);
      markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
      tBindings = toTStylingRange(tmplHead, tmplTail);
      if (isClassBinding) {
          tNode.classBindings = tBindings;
      }
      else {
          tNode.styleBindings = tBindings;
      }
  }
  /**
   * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.
   *
   * @param tNode `TNode` where the residual is stored.
   * @param tStylingKey `TStylingKey` to store.
   * @param tData `TData` associated with the current `LView`.
   * @param index location of where `tStyleValue` should be stored (and linked into list.)
   * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
   *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
   */
  function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
      const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;
      if (residual != null /* or undefined */ && typeof tStylingKey == 'string' &&
          keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
          // We have duplicate in the residual so mark ourselves as duplicate.
          tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
      }
  }
  /**
   * Marks `TStyleValue`s as duplicates if another style binding in the list has the same
   * `TStyleValue`.
   *
   * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once
   * with it set to `false` to search both the previous as well as next items in the list.
   *
   * No duplicate case
   * ```
   *   [style.color]
   *   [style.width.px] <<- index
   *   [style.height.px]
   * ```
   *
   * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no
   * duplicates because `width` is not found in any other part of the linked list.
   *
   * Duplicate case
   * ```
   *   [style.color]
   *   [style.width.em]
   *   [style.width.px] <<- index
   * ```
   * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`
   * because `width` is found in the chain.
   *
   * Map case 1
   * ```
   *   [style.width.px]
   *   [style.color]
   *   [style]  <<- index
   * ```
   * In the above case adding `[style]` will produce a duplicate with any other bindings because
   * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.
   *
   * Map case 2
   * ```
   *   [style]
   *   [style.width.px]
   *   [style.color]  <<- index
   * ```
   * In the above case adding `[style.color]` will produce a duplicate because there is already a
   * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or
   * `width`.
   *
   * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.
   * NOTE: We use `style` as example, but same logic is applied to `class`es as well.
   *
   * @param tData `TData` where the linked list is stored.
   * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in
   *        the linked list.
   * @param index Starting location in the linked list to search from
   * @param isPrevDir Direction.
   *        - `true` for previous (lower priority);
   *        - `false` for next (higher priority).
   */
  function markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {
      const tStylingAtIndex = tData[index + 1];
      const isMap = tStylingKey === null;
      let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
      let foundDuplicate = false;
      // We keep iterating as long as we have a cursor
      // AND either:
      // - we found what we are looking for, OR
      // - we are a map in which case we have to continue searching even after we find what we were
      //   looking for since we are a wild card and everything needs to be flipped to duplicate.
      while (cursor !== 0 && (foundDuplicate === false || isMap)) {
          ngDevMode && assertIndexInRange(tData, cursor);
          const tStylingValueAtCursor = tData[cursor];
          const tStyleRangeAtCursor = tData[cursor + 1];
          if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
              foundDuplicate = true;
              tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) :
                  setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
          }
          cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) :
              getTStylingRangeNext(tStyleRangeAtCursor);
      }
      if (foundDuplicate) {
          // if we found a duplicate, than mark ourselves.
          tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) :
              setTStylingRangeNextDuplicate(tStylingAtIndex);
      }
  }
  /**
   * Determines if two `TStylingKey`s are a match.
   *
   * When computing whether a binding contains a duplicate, we need to compare if the instruction
   * `TStylingKey` has a match.
   *
   * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:
   * - `color`
   *    - `color`    // Match another color
   *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction
   *    - `['', 'color', 'other', true]` // wrapped `color` so match
   *    - `['', null, 'other', true]`       // wrapped `null` so match
   *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`
   * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction
   *
   * @param tStylingKeyCursor
   * @param tStylingKey
   */
  function isStylingMatch(tStylingKeyCursor, tStylingKey) {
      ngDevMode &&
          assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \'tStylingKey\' has been unwrapped');
      if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
          // location so we must assume that we have a match.
          tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
          // contains a match.
          (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) ===
              tStylingKey // If the keys match explicitly than we are a match.
      ) {
          return true;
      }
      else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {
          // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has
          // statics and we need to check those as well.
          return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >=
              0; // see if we are matching the key
      }
      return false;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // Global state of the parser. (This makes parser non-reentrant, but that is not an issue)
  const parserState = {
      textEnd: 0,
      key: 0,
      keyEnd: 0,
      value: 0,
      valueEnd: 0,
  };
  /**
   * Retrieves the last parsed `key` of style.
   * @param text the text to substring the key from.
   */
  function getLastParsedKey(text) {
      return text.substring(parserState.key, parserState.keyEnd);
  }
  /**
   * Retrieves the last parsed `value` of style.
   * @param text the text to substring the key from.
   */
  function getLastParsedValue(text) {
      return text.substring(parserState.value, parserState.valueEnd);
  }
  /**
   * Initializes `className` string for parsing and parses the first token.
   *
   * This function is intended to be used in this format:
   * ```
   * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
   *   const key = getLastParsedKey();
   *   ...
   * }
   * ```
   * @param text `className` to parse
   * @returns index where the next invocation of `parseClassNameNext` should resume.
   */
  function parseClassName(text) {
      resetParserState(text);
      return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
  }
  /**
   * Parses next `className` token.
   *
   * This function is intended to be used in this format:
   * ```
   * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
   *   const key = getLastParsedKey();
   *   ...
   * }
   * ```
   *
   * @param text `className` to parse
   * @param index where the parsing should resume.
   * @returns index where the next invocation of `parseClassNameNext` should resume.
   */
  function parseClassNameNext(text, index) {
      const end = parserState.textEnd;
      if (end === index) {
          return -1;
      }
      index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
      return consumeWhitespace(text, index, end);
  }
  /**
   * Initializes `cssText` string for parsing and parses the first key/values.
   *
   * This function is intended to be used in this format:
   * ```
   * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
   *   const key = getLastParsedKey();
   *   const value = getLastParsedValue();
   *   ...
   * }
   * ```
   * @param text `cssText` to parse
   * @returns index where the next invocation of `parseStyleNext` should resume.
   */
  function parseStyle(text) {
      resetParserState(text);
      return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
  }
  /**
   * Parses the next `cssText` key/values.
   *
   * This function is intended to be used in this format:
   * ```
   * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
   *   const key = getLastParsedKey();
   *   const value = getLastParsedValue();
   *   ...
   * }
   *
   * @param text `cssText` to parse
   * @param index where the parsing should resume.
   * @returns index where the next invocation of `parseStyleNext` should resume.
   */
  function parseStyleNext(text, startIndex) {
      const end = parserState.textEnd;
      let index = parserState.key = consumeWhitespace(text, startIndex, end);
      if (end === index) {
          // we reached an end so just quit
          return -1;
      }
      index = parserState.keyEnd = consumeStyleKey(text, index, end);
      index = consumeSeparator(text, index, end, 58 /* COLON */);
      index = parserState.value = consumeWhitespace(text, index, end);
      index = parserState.valueEnd = consumeStyleValue(text, index, end);
      return consumeSeparator(text, index, end, 59 /* SEMI_COLON */);
  }
  /**
   * Reset the global state of the styling parser.
   * @param text The styling text to parse.
   */
  function resetParserState(text) {
      parserState.key = 0;
      parserState.keyEnd = 0;
      parserState.value = 0;
      parserState.valueEnd = 0;
      parserState.textEnd = text.length;
  }
  /**
   * Returns index of next non-whitespace character.
   *
   * @param text Text to scan
   * @param startIndex Starting index of character where the scan should start.
   * @param endIndex Ending index of character where the scan should end.
   * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at
   *          that location.)
   */
  function consumeWhitespace(text, startIndex, endIndex) {
      while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* SPACE */) {
          startIndex++;
      }
      return startIndex;
  }
  /**
   * Returns index of last char in class token.
   *
   * @param text Text to scan
   * @param startIndex Starting index of character where the scan should start.
   * @param endIndex Ending index of character where the scan should end.
   * @returns Index after last char in class token.
   */
  function consumeClassToken(text, startIndex, endIndex) {
      while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* SPACE */) {
          startIndex++;
      }
      return startIndex;
  }
  /**
   * Consumes all of the characters belonging to style key and token.
   *
   * @param text Text to scan
   * @param startIndex Starting index of character where the scan should start.
   * @param endIndex Ending index of character where the scan should end.
   * @returns Index after last style key character.
   */
  function consumeStyleKey(text, startIndex, endIndex) {
      let ch;
      while (startIndex < endIndex &&
          ((ch = text.charCodeAt(startIndex)) === 45 /* DASH */ || ch === 95 /* UNDERSCORE */ ||
              ((ch & -33 /* UPPER_CASE */) >= 65 /* A */ && (ch & -33 /* UPPER_CASE */) <= 90 /* Z */) ||
              (ch >= 48 /* ZERO */ && ch <= 57 /* NINE */))) {
          startIndex++;
      }
      return startIndex;
  }
  /**
   * Consumes all whitespace and the separator `:` after the style key.
   *
   * @param text Text to scan
   * @param startIndex Starting index of character where the scan should start.
   * @param endIndex Ending index of character where the scan should end.
   * @returns Index after separator and surrounding whitespace.
   */
  function consumeSeparator(text, startIndex, endIndex, separator) {
      startIndex = consumeWhitespace(text, startIndex, endIndex);
      if (startIndex < endIndex) {
          if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
              malformedStyleError(text, String.fromCharCode(separator), startIndex);
          }
          startIndex++;
      }
      return startIndex;
  }
  /**
   * Consumes style value honoring `url()` and `""` text.
   *
   * @param text Text to scan
   * @param startIndex Starting index of character where the scan should start.
   * @param endIndex Ending index of character where the scan should end.
   * @returns Index after last style value character.
   */
  function consumeStyleValue(text, startIndex, endIndex) {
      let ch1 = -1; // 1st previous character
      let ch2 = -1; // 2nd previous character
      let ch3 = -1; // 3rd previous character
      let i = startIndex;
      let lastChIndex = i;
      while (i < endIndex) {
          const ch = text.charCodeAt(i++);
          if (ch === 59 /* SEMI_COLON */) {
              return lastChIndex;
          }
          else if (ch === 34 /* DOUBLE_QUOTE */ || ch === 39 /* SINGLE_QUOTE */) {
              lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
          }
          else if (startIndex ===
              i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
              ch3 === 85 /* U */ &&
              ch2 === 82 /* R */ && ch1 === 76 /* L */ && ch === 40 /* OPEN_PAREN */) {
              lastChIndex = i = consumeQuotedText(text, 41 /* CLOSE_PAREN */, i, endIndex);
          }
          else if (ch > 32 /* SPACE */) {
              // if we have a non-whitespace character then capture its location
              lastChIndex = i;
          }
          ch3 = ch2;
          ch2 = ch1;
          ch1 = ch & -33 /* UPPER_CASE */;
      }
      return lastChIndex;
  }
  /**
   * Consumes all of the quoted characters.
   *
   * @param text Text to scan
   * @param quoteCharCode CharCode of either `"` or `'` quote or `)` for `url(...)`.
   * @param startIndex Starting index of character where the scan should start.
   * @param endIndex Ending index of character where the scan should end.
   * @returns Index after quoted characters.
   */
  function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
      let ch1 = -1; // 1st previous character
      let index = startIndex;
      while (index < endIndex) {
          const ch = text.charCodeAt(index++);
          if (ch == quoteCharCode && ch1 !== 92 /* BACK_SLASH */) {
              return index;
          }
          if (ch == 92 /* BACK_SLASH */ && ch1 === 92 /* BACK_SLASH */) {
              // two back slashes cancel each other out. For example `"\\"` should properly end the
              // quotation. (It should not assume that the last `"` is escaped.)
              ch1 = 0;
          }
          else {
              ch1 = ch;
          }
      }
      throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) :
          new Error();
  }
  function malformedStyleError(text, expecting, index) {
      ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');
      throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' +
          text.substring(index, index + 1) + '<<]' + text.substr(index + 1) +
          `'. Expecting '${expecting}'.`);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Update a style binding on an element with the provided value.
   *
   * If the style value is falsy then it will be removed from the element
   * (or assigned a different value depending if there are any styles placed
   * on the element with `styleMap` or any static styles that are
   * present from when the element was created with `styling`).
   *
   * Note that the styling element is updated as part of `stylingApply`.
   *
   * @param prop A valid CSS property.
   * @param value New value to write (`null` or an empty string to remove).
   * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.
   *
   * Note that this will apply the provided style value to the host element if this function is called
   * within a host binding function.
   *
   * @codeGenApi
   */
  function ÉµÉµstyleProp(prop, value, suffix) {
      checkStylingProperty(prop, value, suffix, false);
      return ÉµÉµstyleProp;
  }
  /**
   * Update a class binding on an element with the provided value.
   *
   * This instruction is meant to handle the `[class.foo]="exp"` case and,
   * therefore, the class binding itself must already be allocated using
   * `styling` within the creation block.
   *
   * @param prop A valid CSS class (only one).
   * @param value A true/false value which will turn the class on or off.
   *
   * Note that this will apply the provided class value to the host element if this function
   * is called within a host binding function.
   *
   * @codeGenApi
   */
  function ÉµÉµclassProp(className, value) {
      checkStylingProperty(className, value, null, true);
      return ÉµÉµclassProp;
  }
  /**
   * Update style bindings using an object literal on an element.
   *
   * This instruction is meant to apply styling via the `[style]="exp"` template bindings.
   * When styles are applied to the element they will then be updated with respect to
   * any styles/classes set via `styleProp`. If any styles are set to falsy
   * then they will be removed from the element.
   *
   * Note that the styling instruction will not be applied until `stylingApply` is called.
   *
   * @param styles A key/value style map of the styles that will be applied to the given element.
   *        Any missing styles (that have already been applied to the element beforehand) will be
   *        removed (unset) from the element's styling.
   *
   * Note that this will apply the provided styleMap value to the host element if this function
   * is called within a host binding.
   *
   * @codeGenApi
   */
  function ÉµÉµstyleMap(styles) {
      checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
  }
  /**
   * Parse text as style and add values to KeyValueArray.
   *
   * This code is pulled out to a separate function so that it can be tree shaken away if it is not
   * needed. It is only referenced from `ÉµÉµstyleMap`.
   *
   * @param keyValueArray KeyValueArray to add parsed values to.
   * @param text text to parse.
   */
  function styleStringParser(keyValueArray, text) {
      for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
          styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
      }
  }
  /**
   * Update class bindings using an object literal or class-string on an element.
   *
   * This instruction is meant to apply styling via the `[class]="exp"` template bindings.
   * When classes are applied to the element they will then be updated with
   * respect to any styles/classes set via `classProp`. If any
   * classes are set to falsy then they will be removed from the element.
   *
   * Note that the styling instruction will not be applied until `stylingApply` is called.
   * Note that this will the provided classMap value to the host element if this function is called
   * within a host binding.
   *
   * @param classes A key/value map or string of CSS classes that will be added to the
   *        given element. Any missing classes (that have already been applied to the element
   *        beforehand) will be removed (unset) from the element's list of CSS classes.
   *
   * @codeGenApi
   */
  function ÉµÉµclassMap(classes) {
      checkStylingMap(keyValueArraySet, classStringParser, classes, true);
  }
  /**
   * Parse text as class and add values to KeyValueArray.
   *
   * This code is pulled out to a separate function so that it can be tree shaken away if it is not
   * needed. It is only referenced from `ÉµÉµclassMap`.
   *
   * @param keyValueArray KeyValueArray to add parsed values to.
   * @param text text to parse.
   */
  function classStringParser(keyValueArray, text) {
      for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
          keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
      }
  }
  /**
   * Common code between `ÉµÉµclassProp` and `ÉµÉµstyleProp`.
   *
   * @param prop property name.
   * @param value binding value.
   * @param suffix suffix for the property (e.g. `em` or `px`)
   * @param isClassBased `true` if `class` change (`false` if `style`)
   */
  function checkStylingProperty(prop, value, suffix, isClassBased) {
      const lView = getLView();
      const tView = getTView();
      // Styling instructions use 2 slots per binding.
      // 1. one for the value / TStylingKey
      // 2. one for the intermittent-value / TStylingRange
      const bindingIndex = incrementBindingIndex(2);
      if (tView.firstUpdatePass) {
          stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
      }
      if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
          const tNode = tView.data[getSelectedIndex()];
          updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
      }
  }
  /**
   * Common code between `ÉµÉµclassMap` and `ÉµÉµstyleMap`.
   *
   * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
   *        function so that `style` can be processed. This is done for tree shaking purposes.
   * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`
   *        have different parsers.)
   * @param value bound value from application
   * @param isClassBased `true` if `class` change (`false` if `style`)
   */
  function checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {
      const tView = getTView();
      const bindingIndex = incrementBindingIndex(2);
      if (tView.firstUpdatePass) {
          stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
      }
      const lView = getLView();
      if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
          // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
          // if so as not to read unnecessarily.
          const tNode = tView.data[getSelectedIndex()];
          if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
              if (ngDevMode) {
                  // verify that if we are shadowing then `TData` is appropriately marked so that we skip
                  // processing this binding in styling resolution.
                  const tStylingKey = tView.data[bindingIndex];
                  assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \'false\'');
              }
              // VE does not concatenate the static portion like we are doing here.
              // Instead VE just ignores the static completely if dynamic binding is present.
              // Because of locality we have already set the static portion because we don't know if there
              // is a dynamic portion until later. If we would ignore the static portion it would look like
              // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong
              // thing as it would think that the static portion was removed. For this reason we
              // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.
              let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
              ngDevMode && isClassBased === false && staticPrefix !== null &&
                  assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \';\'');
              if (staticPrefix !== null) {
                  // We want to make sure that falsy values of `value` become empty strings.
                  value = concatStringsWithSpace(staticPrefix, value ? value : '');
              }
              // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.
              // This takes over the `[style]` binding. (Same for `[class]`)
              setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
          }
          else {
              updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);
          }
      }
  }
  /**
   * Determines when the binding is in `hostBindings` section
   *
   * @param tView Current `TView`
   * @param bindingIndex index of binding which we would like if it is in `hostBindings`
   */
  function isInHostBindings(tView, bindingIndex) {
      // All host bindings are placed after the expando section.
      return bindingIndex >= tView.expandoStartIndex;
  }
  /**
   * Collects the necessary information to insert the binding into a linked list of style bindings
   * using `insertTStylingBinding`.
   *
   * @param tView `TView` where the binding linked list will be stored.
   * @param tStylingKey Property/key of the binding.
   * @param bindingIndex Index of binding associated with the `prop`
   * @param isClassBased `true` if `class` change (`false` if `style`)
   */
  function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
      ngDevMode && assertFirstUpdatePass(tView);
      const tData = tView.data;
      if (tData[bindingIndex + 1] === null) {
          // The above check is necessary because we don't clear first update pass until first successful
          // (no exception) template execution. This prevents the styling instruction from double adding
          // itself to the list.
          // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
          // if so as not to read unnecessarily.
          const tNode = tData[getSelectedIndex()];
          ngDevMode && assertDefined(tNode, 'TNode expected');
          const isHostBindings = isInHostBindings(tView, bindingIndex);
          if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
              // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.
              // If there is a directive which uses `@Input('style')` or `@Input('class')` than
              // we need to neutralize this binding since that directive is shadowing it.
              // We turn this into a noop by setting the key to `false`
              tStylingKey = false;
          }
          tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
          insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
      }
  }
  /**
   * Adds static styling information to the binding if applicable.
   *
   * The linked list of styles not only stores the list and keys, but also stores static styling
   * information on some of the keys. This function determines if the key should contain the styling
   * information and computes it.
   *
   * See `TStylingStatic` for more details.
   *
   * @param tData `TData` where the linked list is stored.
   * @param tNode `TNode` for which the styling is being computed.
   * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`
   * @param isClassBased `true` if `class` (`false` if `style`)
   */
  function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
      const hostDirectiveDef = getCurrentDirectiveDef(tData);
      let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
      if (hostDirectiveDef === null) {
          // We are in template node.
          // If template node already had styling instruction then it has already collected the static
          // styling and there is no need to collect them again. We know that we are the first styling
          // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).
          const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;
          if (isFirstStylingInstructionInTemplate) {
              // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point
              // they are already merged and it would not be possible to figure which property belongs where
              // in the priority.
              stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
              stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);
              // We know that if we have styling binding in template we can't have residual.
              residual = null;
          }
      }
      else {
          // We are in host binding node and there was no binding instruction in template node.
          // This means that we need to compute the residual.
          const directiveStylingLast = tNode.directiveStylingLast;
          const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;
          if (isFirstStylingInstructionInHostBinding) {
              stylingKey =
                  collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);
              if (residual === null) {
                  // - If `null` than either:
                  //    - Template styling instruction already ran and it has consumed the static
                  //      styling into its `TStylingKey` and so there is no need to update residual. Instead
                  //      we need to update the `TStylingKey` associated with the first template node
                  //      instruction. OR
                  //    - Some other styling instruction ran and determined that there are no residuals
                  let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);
                  if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {
                      // Only recompute if `templateStylingKey` had static values. (If no static value found
                      // then there is nothing to do since this operation can only produce less static keys, not
                      // more.)
                      templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);
                      templateStylingKey =
                          collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
                      setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
                  }
              }
              else {
                  // We only need to recompute residual if it is not `null`.
                  // - If existing residual (implies there was no template styling). This means that some of
                  //   the statics may have moved from the residual to the `stylingKey` and so we have to
                  //   recompute.
                  // - If `undefined` this is the first time we are running.
                  residual = collectResidual(tData, tNode, isClassBased);
              }
          }
      }
      if (residual !== undefined) {
          isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);
      }
      return stylingKey;
  }
  /**
   * Retrieve the `TStylingKey` for the template styling instruction.
   *
   * This is needed since `hostBinding` styling instructions are inserted after the template
   * instruction. While the template instruction needs to update the residual in `TNode` the
   * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because
   * the template instruction is downstream from the `hostBindings` instructions.
   *
   * @param tData `TData` where the linked list is stored.
   * @param tNode `TNode` for which the styling is being computed.
   * @param isClassBased `true` if `class` (`false` if `style`)
   * @return `TStylingKey` if found or `undefined` if not found.
   */
  function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
      const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
      if (getTStylingRangeNext(bindings) === 0) {
          // There does not seem to be a styling instruction in the `template`.
          return undefined;
      }
      return tData[getTStylingRangePrev(bindings)];
  }
  /**
   * Update the `TStylingKey` of the first template instruction in `TNode`.
   *
   * Logically `hostBindings` styling instructions are of lower priority than that of the template.
   * However, they execute after the template styling instructions. This means that they get inserted
   * in front of the template styling instructions.
   *
   * If we have a template styling instruction and a new `hostBindings` styling instruction is
   * executed it means that it may need to steal static fields from the template instruction. This
   * method allows us to update the first template instruction `TStylingKey` with a new value.
   *
   * Assume:
   * ```
   * <div my-dir style="color: red" [style.color]="tmplExp"></div>
   *
   * @Directive({
   *   host: {
   *     'style': 'width: 100px',
   *     '[style.color]': 'dirExp',
   *   }
   * })
   * class MyDir {}
   * ```
   *
   * when `[style.color]="tmplExp"` executes it creates this data structure.
   * ```
   *  ['', 'color', 'color', 'red', 'width', '100px'],
   * ```
   *
   * The reason for this is that the template instruction does not know if there are styling
   * instructions and must assume that there are none and must collect all of the static styling.
   * (both
   * `color' and 'width`)
   *
   * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.
   * ```
   *  ['', 'color', 'width', '100px'],  // newly inserted
   *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong
   * ```
   *
   * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to
   * update it like so:
   * ```
   *  ['', 'color', 'width', '100px'],
   *  ['', 'color', 'color', 'red'],    // UPDATE
   * ```
   *
   * @param tData `TData` where the linked list is stored.
   * @param tNode `TNode` for which the styling is being computed.
   * @param isClassBased `true` if `class` (`false` if `style`)
   * @param tStylingKey New `TStylingKey` which is replacing the old one.
   */
  function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
      const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
      ngDevMode &&
          assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');
      tData[getTStylingRangePrev(bindings)] = tStylingKey;
  }
  /**
   * Collect all static values after the current `TNode.directiveStylingLast` index.
   *
   * Collect the remaining styling information which has not yet been collected by an existing
   * styling instruction.
   *
   * @param tData `TData` where the `DirectiveDefs` are stored.
   * @param tNode `TNode` which contains the directive range.
   * @param isClassBased `true` if `class` (`false` if `style`)
   */
  function collectResidual(tData, tNode, isClassBased) {
      let residual = undefined;
      const directiveEnd = tNode.directiveEnd;
      ngDevMode &&
          assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');
      // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are
      // collecting things after the last `hostBindings` directive which had a styling instruction.)
      for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
          const attrs = tData[i].hostAttrs;
          residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
      }
      return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
  }
  /**
   * Collect the static styling information with lower priority than `hostDirectiveDef`.
   *
   * (This is opposite of residual styling.)
   *
   * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static
   *        styling. (Or `null` if template styling)
   * @param tData `TData` where the linked list is stored.
   * @param tNode `TNode` for which the styling is being computed.
   * @param stylingKey Existing `TStylingKey` to update or wrap.
   * @param isClassBased `true` if `class` (`false` if `style`)
   */
  function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
      // We need to loop because there can be directives which have `hostAttrs` but don't have
      // `hostBindings` so this loop catches up to the current directive..
      let currentDirective = null;
      const directiveEnd = tNode.directiveEnd;
      let directiveStylingLast = tNode.directiveStylingLast;
      if (directiveStylingLast === -1) {
          directiveStylingLast = tNode.directiveStart;
      }
      else {
          directiveStylingLast++;
      }
      while (directiveStylingLast < directiveEnd) {
          currentDirective = tData[directiveStylingLast];
          ngDevMode && assertDefined(currentDirective, 'expected to be defined');
          stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
          if (currentDirective === hostDirectiveDef)
              break;
          directiveStylingLast++;
      }
      if (hostDirectiveDef !== null) {
          // we only advance the styling cursor if we are collecting data from host bindings.
          // Template executes before host bindings and so if we would update the index,
          // host bindings would not get their statics.
          tNode.directiveStylingLast = directiveStylingLast;
      }
      return stylingKey;
  }
  /**
   * Convert `TAttrs` into `TStylingStatic`.
   *
   * @param stylingKey existing `TStylingKey` to update or wrap.
   * @param attrs `TAttributes` to process.
   * @param isClassBased `true` if `class` (`false` if `style`)
   */
  function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
      const desiredMarker = isClassBased ? 1 /* Classes */ : 2 /* Styles */;
      let currentMarker = -1 /* ImplicitAttributes */;
      if (attrs !== null) {
          for (let i = 0; i < attrs.length; i++) {
              const item = attrs[i];
              if (typeof item === 'number') {
                  currentMarker = item;
              }
              else {
                  if (currentMarker === desiredMarker) {
                      if (!Array.isArray(stylingKey)) {
                          stylingKey = stylingKey === undefined ? [] : ['', stylingKey];
                      }
                      keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
                  }
              }
          }
      }
      return stylingKey === undefined ? null : stylingKey;
  }
  /**
   * Convert user input to `KeyValueArray`.
   *
   * This function takes user input which could be `string`, Object literal, or iterable and converts
   * it into a consistent representation. The output of this is `KeyValueArray` (which is an array
   * where
   * even indexes contain keys and odd indexes contain values for those keys).
   *
   * The advantage of converting to `KeyValueArray` is that we can perform diff in an input
   * independent
   * way.
   * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be
   * applied)
   *
   * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the
   * difference in linear fashion without the need to allocate any additional data.
   *
   * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine
   * which values need to be deleted, over the new `Map` to determine additions, and we would have to
   * keep additional `Map` to keep track of duplicates or items which have not yet been visited.
   *
   * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
   *        function so that `style` can be processed. This is done
   *        for tree shaking purposes.
   * @param stringParser The parser is passed in so that it will be tree shakable. See
   *        `styleStringParser` and `classStringParser`
   * @param value The value to parse/convert to `KeyValueArray`
   */
  function toStylingKeyValueArray(keyValueArraySet, stringParser, value) {
      if (value == null /*|| value === undefined */ || value === '')
          return EMPTY_ARRAY;
      const styleKeyValueArray = [];
      const unwrappedValue = unwrapSafeValue(value);
      if (Array.isArray(unwrappedValue)) {
          for (let i = 0; i < unwrappedValue.length; i++) {
              keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);
          }
      }
      else if (typeof unwrappedValue === 'object') {
          for (const key in unwrappedValue) {
              if (unwrappedValue.hasOwnProperty(key)) {
                  keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);
              }
          }
      }
      else if (typeof unwrappedValue === 'string') {
          stringParser(styleKeyValueArray, unwrappedValue);
      }
      else {
          ngDevMode &&
              throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);
      }
      return styleKeyValueArray;
  }
  /**
   * Set a `value` for a `key`.
   *
   * See: `keyValueArraySet` for details
   *
   * @param keyValueArray KeyValueArray to add to.
   * @param key Style key to add.
   * @param value The value to set.
   */
  function styleKeyValueArraySet(keyValueArray, key, value) {
      keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
  }
  /**
   * Update map based styling.
   *
   * Map based styling could be anything which contains more than one binding. For example `string`,
   * or object literal. Dealing with all of these types would complicate the logic so
   * instead this function expects that the complex input is first converted into normalized
   * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it
   * very cheap to compute deltas between the previous and current value.
   *
   * @param tView Associated `TView.data` contains the linked list of binding priorities.
   * @param tNode `TNode` where the binding is located.
   * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
   * @param renderer Renderer to use if any updates.
   * @param oldKeyValueArray Previous value represented as `KeyValueArray`
   * @param newKeyValueArray Current value represented as `KeyValueArray`
   * @param isClassBased `true` if `class` (`false` if `style`)
   * @param bindingIndex Binding index of the binding.
   */
  function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
      if (oldKeyValueArray === NO_CHANGE) {
          // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.
          oldKeyValueArray = EMPTY_ARRAY;
      }
      let oldIndex = 0;
      let newIndex = 0;
      let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
      let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;
      while (oldKey !== null || newKey !== null) {
          ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');
          ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');
          const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;
          const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;
          let setKey = null;
          let setValue = undefined;
          if (oldKey === newKey) {
              // UPDATE: Keys are equal => new value is overwriting old value.
              oldIndex += 2;
              newIndex += 2;
              if (oldValue !== newValue) {
                  setKey = newKey;
                  setValue = newValue;
              }
          }
          else if (newKey === null || oldKey !== null && oldKey < newKey) {
              // DELETE: oldKey key is missing or we did not find the oldKey in the newValue
              // (because the keyValueArray is sorted and `newKey` is found later alphabetically).
              // `"background" < "color"` so we need to delete `"background"` because it is not found in the
              // new array.
              oldIndex += 2;
              setKey = oldKey;
          }
          else {
              // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.
              // `"color" > "background"` so we need to add `color` because it is in new array but not in
              // old array.
              ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');
              newIndex += 2;
              setKey = newKey;
              setValue = newValue;
          }
          if (setKey !== null) {
              updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
          }
          oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
          newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
      }
  }
  /**
   * Update a simple (property name) styling.
   *
   * This function takes `prop` and updates the DOM to that value. The function takes the binding
   * value as well as binding priority into consideration to determine which value should be written
   * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks
   * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)
   *
   * @param tView Associated `TView.data` contains the linked list of binding priorities.
   * @param tNode `TNode` where the binding is located.
   * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
   * @param renderer Renderer to use if any updates.
   * @param prop Either style property name or a class name.
   * @param value Either style value for `prop` or `true`/`false` if `prop` is class.
   * @param isClassBased `true` if `class` (`false` if `style`)
   * @param bindingIndex Binding index of the binding.
   */
  function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
      if (!(tNode.type & 3 /* AnyRNode */)) {
          // It is possible to have styling on non-elements (such as ng-container).
          // This is rare, but it does happen. In such a case, just ignore the binding.
          return;
      }
      const tData = tView.data;
      const tRange = tData[bindingIndex + 1];
      const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ?
          findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) :
          undefined;
      if (!isStylingValuePresent(higherPriorityValue)) {
          // We don't have a next duplicate, or we did not find a duplicate value.
          if (!isStylingValuePresent(value)) {
              // We should delete current value or restore to lower priority value.
              if (getTStylingRangePrevDuplicate(tRange)) {
                  // We have a possible prev duplicate, let's retrieve it.
                  value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
              }
          }
          const rNode = getNativeByIndex(getSelectedIndex(), lView);
          applyStyling(renderer, isClassBased, rNode, prop, value);
      }
  }
  /**
   * Search for styling value with higher priority which is overwriting current value, or a
   * value of lower priority to which we should fall back if the value is `undefined`.
   *
   * When value is being applied at a location, related values need to be consulted.
   * - If there is a higher priority binding, we should be using that one instead.
   *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp1`
   *   requires that we check `exp2` to see if it is set to value other than `undefined`.
   * - If there is a lower priority binding and we are changing to `undefined`
   *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp2` to
   *   `undefined` requires that we check `exp1` (and static values) and use that as new value.
   *
   * NOTE: The styling stores two values.
   * 1. The raw value which came from the application is stored at `index + 0` location. (This value
   *    is used for dirty checking).
   * 2. The normalized value is stored at `index + 1`.
   *
   * @param tData `TData` used for traversing the priority.
   * @param tNode `TNode` to use for resolving static styling. Also controls search direction.
   *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
   *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
   *   - `null` search prev and go all the way to end. Return last value where
   *     `isStylingValuePresent(value)` is true.
   * @param lView `LView` used for retrieving the actual values.
   * @param prop Property which we are interested in.
   * @param index Starting index in the linked list of styling bindings where the search should start.
   * @param isClassBased `true` if `class` (`false` if `style`)
   */
  function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
      // `TNode` to use for resolving static styling. Also controls search direction.
      //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
      //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
      //   - `null` search prev and go all the way to end. Return last value where
      //     `isStylingValuePresent(value)` is true.
      const isPrevDirection = tNode === null;
      let value = undefined;
      while (index > 0) {
          const rawKey = tData[index];
          const containsStatics = Array.isArray(rawKey);
          // Unwrap the key if we contain static values.
          const key = containsStatics ? rawKey[1] : rawKey;
          const isStylingMap = key === null;
          let valueAtLViewIndex = lView[index + 1];
          if (valueAtLViewIndex === NO_CHANGE) {
              // In firstUpdatePass the styling instructions create a linked list of styling.
              // On subsequent passes it is possible for a styling instruction to try to read a binding
              // which
              // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that
              // we have `undefined` (or empty array in case of styling-map instruction) instead. This
              // allows the resolution to apply the value (which may later be overwritten when the
              // binding actually executes.)
              valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;
          }
          let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) :
              key === prop ? valueAtLViewIndex : undefined;
          if (containsStatics && !isStylingValuePresent(currentValue)) {
              currentValue = keyValueArrayGet(rawKey, prop);
          }
          if (isStylingValuePresent(currentValue)) {
              value = currentValue;
              if (isPrevDirection) {
                  return value;
              }
          }
          const tRange = tData[index + 1];
          index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
      }
      if (tNode !== null) {
          // in case where we are going in next direction AND we did not find anything, we need to
          // consult residual styling
          let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
          if (residual != null /** OR residual !=== undefined */) {
              value = keyValueArrayGet(residual, prop);
          }
      }
      return value;
  }
  /**
   * Determines if the binding value should be used (or if the value is 'undefined' and hence priority
   * resolution should be used.)
   *
   * @param value Binding style value.
   */
  function isStylingValuePresent(value) {
      // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't
      // have an opinion as to what this binding should be and you should consult other bindings by
      // priority to determine the valid value.
      // This is extracted into a single function so that we have a single place to control this.
      return value !== undefined;
  }
  /**
   * Normalizes and/or adds a suffix to the value.
   *
   * If value is `null`/`undefined` no suffix is added
   * @param value
   * @param suffix
   */
  function normalizeSuffix(value, suffix) {
      if (value == null /** || value === undefined */) {
          // do nothing
      }
      else if (typeof suffix === 'string') {
          value = value + suffix;
      }
      else if (typeof value === 'object') {
          value = stringify(unwrapSafeValue(value));
      }
      return value;
  }
  /**
   * Tests if the `TNode` has input shadow.
   *
   * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or
   * `@Input('class')` as input.
   *
   * @param tNode `TNode` which we would like to see if it has shadow.
   * @param isClassBased `true` if `class` (`false` if `style`)
   */
  function hasStylingInputShadow(tNode, isClassBased) {
      return (tNode.flags & (isClassBased ? 16 /* hasClassInput */ : 32 /* hasStyleInput */)) !== 0;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Create static text node
   *
   * @param index Index of the node in the data array
   * @param value Static string value to write.
   *
   * @codeGenApi
   */
  function ÉµÉµtext(index, value = '') {
      const lView = getLView();
      const tView = getTView();
      const adjustedIndex = index + HEADER_OFFSET;
      ngDevMode &&
          assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');
      ngDevMode && assertIndexInRange(lView, adjustedIndex);
      const tNode = tView.firstCreatePass ?
          getOrCreateTNode(tView, adjustedIndex, 1 /* Text */, value, null) :
          tView.data[adjustedIndex];
      const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);
      appendChild(tView, lView, textNative, tNode);
      // Text nodes are self closing.
      setCurrentTNode(tNode, false);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   *
   * Update text content with a lone bound value
   *
   * Used when a text node has 1 interpolated value in it, an no additional text
   * surrounds that interpolated value:
   *
   * ```html
   * <div>{{v0}}</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolate(v0);
   * ```
   * @returns itself, so that it may be chained.
   * @see textInterpolateV
   * @codeGenApi
   */
  function ÉµÉµtextInterpolate(v0) {
      ÉµÉµtextInterpolate1('', v0, '');
      return ÉµÉµtextInterpolate;
  }
  /**
   *
   * Update text content with single bound value surrounded by other text.
   *
   * Used when a text node has 1 interpolated value in it:
   *
   * ```html
   * <div>prefix{{v0}}suffix</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolate1('prefix', v0, 'suffix');
   * ```
   * @returns itself, so that it may be chained.
   * @see textInterpolateV
   * @codeGenApi
   */
  function ÉµÉµtextInterpolate1(prefix, v0, suffix) {
      const lView = getLView();
      const interpolated = interpolation1(lView, prefix, v0, suffix);
      if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
      }
      return ÉµÉµtextInterpolate1;
  }
  /**
   *
   * Update text content with 2 bound values surrounded by other text.
   *
   * Used when a text node has 2 interpolated values in it:
   *
   * ```html
   * <div>prefix{{v0}}-{{v1}}suffix</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolate2('prefix', v0, '-', v1, 'suffix');
   * ```
   * @returns itself, so that it may be chained.
   * @see textInterpolateV
   * @codeGenApi
   */
  function ÉµÉµtextInterpolate2(prefix, v0, i0, v1, suffix) {
      const lView = getLView();
      const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);
      if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
      }
      return ÉµÉµtextInterpolate2;
  }
  /**
   *
   * Update text content with 3 bound values surrounded by other text.
   *
   * Used when a text node has 3 interpolated values in it:
   *
   * ```html
   * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolate3(
   * 'prefix', v0, '-', v1, '-', v2, 'suffix');
   * ```
   * @returns itself, so that it may be chained.
   * @see textInterpolateV
   * @codeGenApi
   */
  function ÉµÉµtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
      const lView = getLView();
      const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
      if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
      }
      return ÉµÉµtextInterpolate3;
  }
  /**
   *
   * Update text content with 4 bound values surrounded by other text.
   *
   * Used when a text node has 4 interpolated values in it:
   *
   * ```html
   * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolate4(
   * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
   * ```
   * @returns itself, so that it may be chained.
   * @see ÉµÉµtextInterpolateV
   * @codeGenApi
   */
  function ÉµÉµtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
      const lView = getLView();
      const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
      if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
      }
      return ÉµÉµtextInterpolate4;
  }
  /**
   *
   * Update text content with 5 bound values surrounded by other text.
   *
   * Used when a text node has 5 interpolated values in it:
   *
   * ```html
   * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolate5(
   * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
   * ```
   * @returns itself, so that it may be chained.
   * @see textInterpolateV
   * @codeGenApi
   */
  function ÉµÉµtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
      const lView = getLView();
      const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
      if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
      }
      return ÉµÉµtextInterpolate5;
  }
  /**
   *
   * Update text content with 6 bound values surrounded by other text.
   *
   * Used when a text node has 6 interpolated values in it:
   *
   * ```html
   * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolate6(
   *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
   * ```
   *
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change. @returns itself, so that it may be chained.
   * @see textInterpolateV
   * @codeGenApi
   */
  function ÉµÉµtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
      const lView = getLView();
      const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
      if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
      }
      return ÉµÉµtextInterpolate6;
  }
  /**
   *
   * Update text content with 7 bound values surrounded by other text.
   *
   * Used when a text node has 7 interpolated values in it:
   *
   * ```html
   * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolate7(
   *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
   * ```
   * @returns itself, so that it may be chained.
   * @see textInterpolateV
   * @codeGenApi
   */
  function ÉµÉµtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
      const lView = getLView();
      const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
      if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
      }
      return ÉµÉµtextInterpolate7;
  }
  /**
   *
   * Update text content with 8 bound values surrounded by other text.
   *
   * Used when a text node has 8 interpolated values in it:
   *
   * ```html
   * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolate8(
   *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
   * ```
   * @returns itself, so that it may be chained.
   * @see textInterpolateV
   * @codeGenApi
   */
  function ÉµÉµtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
      const lView = getLView();
      const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
      if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
      }
      return ÉµÉµtextInterpolate8;
  }
  /**
   * Update text content with 9 or more bound values other surrounded by text.
   *
   * Used when the number of interpolated values exceeds 8.
   *
   * ```html
   * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµtextInterpolateV(
   *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
   *  'suffix']);
   * ```
   *.
   * @param values The collection of values and the strings in between those values, beginning with
   * a string prefix and ending with a string suffix.
   * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
   *
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµtextInterpolateV(values) {
      const lView = getLView();
      const interpolated = interpolationV(lView, values);
      if (interpolated !== NO_CHANGE) {
          textBindingInternal(lView, getSelectedIndex(), interpolated);
      }
      return ÉµÉµtextInterpolateV;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   *
   * Update an interpolated class on an element with single bound value surrounded by text.
   *
   * Used when the value passed to a property has 1 interpolated value in it:
   *
   * ```html
   * <div class="prefix{{v0}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµclassMapInterpolate1('prefix', v0, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµclassMapInterpolate1(prefix, v0, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  /**
   *
   * Update an interpolated class on an element with 2 bound values surrounded by text.
   *
   * Used when the value passed to a property has 2 interpolated values in it:
   *
   * ```html
   * <div class="prefix{{v0}}-{{v1}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµclassMapInterpolate2(prefix, v0, i0, v1, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  /**
   *
   * Update an interpolated class on an element with 3 bound values surrounded by text.
   *
   * Used when the value passed to a property has 3 interpolated values in it:
   *
   * ```html
   * <div class="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµclassMapInterpolate3(
   * 'prefix', v0, '-', v1, '-', v2, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  /**
   *
   * Update an interpolated class on an element with 4 bound values surrounded by text.
   *
   * Used when the value passed to a property has 4 interpolated values in it:
   *
   * ```html
   * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµclassMapInterpolate4(
   * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  /**
   *
   * Update an interpolated class on an element with 5 bound values surrounded by text.
   *
   * Used when the value passed to a property has 5 interpolated values in it:
   *
   * ```html
   * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµclassMapInterpolate5(
   * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  /**
   *
   * Update an interpolated class on an element with 6 bound values surrounded by text.
   *
   * Used when the value passed to a property has 6 interpolated values in it:
   *
   * ```html
   * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµclassMapInterpolate6(
   *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  /**
   *
   * Update an interpolated class on an element with 7 bound values surrounded by text.
   *
   * Used when the value passed to a property has 7 interpolated values in it:
   *
   * ```html
   * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµclassMapInterpolate7(
   *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  /**
   *
   * Update an interpolated class on an element with 8 bound values surrounded by text.
   *
   * Used when the value passed to a property has 8 interpolated values in it:
   *
   * ```html
   * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµclassMapInterpolate8(
   *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param i6 Static value used for concatenation only.
   * @param v7 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  /**
   * Update an interpolated class on an element with 9 or more bound values surrounded by text.
   *
   * Used when the number of interpolated values exceeds 8.
   *
   * ```html
   * <div
   *  class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµclassMapInterpolateV(
   *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
   *  'suffix']);
   * ```
   *.
   * @param values The collection of values and the strings in-between those values, beginning with
   * a string prefix and ending with a string suffix.
   * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
   * @codeGenApi
   */
  function ÉµÉµclassMapInterpolateV(values) {
      const lView = getLView();
      const interpolatedValue = interpolationV(lView, values);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   *
   * Update an interpolated style on an element with single bound value surrounded by text.
   *
   * Used when the value passed to a property has 1 interpolated value in it:
   *
   * ```html
   * <div style="key: {{v0}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstyleMapInterpolate1('key: ', v0, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµstyleMapInterpolate1(prefix, v0, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
      ÉµÉµstyleMap(interpolatedValue);
  }
  /**
   *
   * Update an interpolated style on an element with 2 bound values surrounded by text.
   *
   * Used when the value passed to a property has 2 interpolated values in it:
   *
   * ```html
   * <div style="key: {{v0}}; key1: {{v1}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
      ÉµÉµstyleMap(interpolatedValue);
  }
  /**
   *
   * Update an interpolated style on an element with 3 bound values surrounded by text.
   *
   * Used when the value passed to a property has 3 interpolated values in it:
   *
   * ```html
   * <div style="key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstyleMapInterpolate3(
   *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
      ÉµÉµstyleMap(interpolatedValue);
  }
  /**
   *
   * Update an interpolated style on an element with 4 bound values surrounded by text.
   *
   * Used when the value passed to a property has 4 interpolated values in it:
   *
   * ```html
   * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstyleMapInterpolate4(
   *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
      ÉµÉµstyleMap(interpolatedValue);
  }
  /**
   *
   * Update an interpolated style on an element with 5 bound values surrounded by text.
   *
   * Used when the value passed to a property has 5 interpolated values in it:
   *
   * ```html
   * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstyleMapInterpolate5(
   *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
      ÉµÉµstyleMap(interpolatedValue);
  }
  /**
   *
   * Update an interpolated style on an element with 6 bound values surrounded by text.
   *
   * Used when the value passed to a property has 6 interpolated values in it:
   *
   * ```html
   * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};
   *             key5: {{v5}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstyleMapInterpolate6(
   *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
   *    'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
      ÉµÉµstyleMap(interpolatedValue);
  }
  /**
   *
   * Update an interpolated style on an element with 7 bound values surrounded by text.
   *
   * Used when the value passed to a property has 7 interpolated values in it:
   *
   * ```html
   * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
   *             key6: {{v6}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstyleMapInterpolate7(
   *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
   *    '; key6: ', v6, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
      ÉµÉµstyleMap(interpolatedValue);
  }
  /**
   *
   * Update an interpolated style on an element with 8 bound values surrounded by text.
   *
   * Used when the value passed to a property has 8 interpolated values in it:
   *
   * ```html
   * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
   *             key6: {{v6}}; key7: {{v7}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstyleMapInterpolate8(
   *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
   *    '; key6: ', v6, '; key7: ', v7, 'suffix');
   * ```
   *
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param i6 Static value used for concatenation only.
   * @param v7 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @codeGenApi
   */
  function ÉµÉµstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
      const lView = getLView();
      const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
      ÉµÉµstyleMap(interpolatedValue);
  }
  /**
   * Update an interpolated style on an element with 9 or more bound values surrounded by text.
   *
   * Used when the number of interpolated values exceeds 8.
   *
   * ```html
   * <div
   *  class="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
   *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstyleMapInterpolateV(
   *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
   *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);
   * ```
   *.
   * @param values The collection of values and the strings in-between those values, beginning with
   * a string prefix and ending with a string suffix.
   * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)
   * @codeGenApi
   */
  function ÉµÉµstyleMapInterpolateV(values) {
      const lView = getLView();
      const interpolatedValue = interpolationV(lView, values);
      ÉµÉµstyleMap(interpolatedValue);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   *
   * Update an interpolated style property on an element with single bound value surrounded by text.
   *
   * Used when the value passed to a property has 1 interpolated value in it:
   *
   * ```html
   * <div style.color="prefix{{v0}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstylePropInterpolate1(0, 'prefix', v0, 'suffix');
   * ```
   *
   * @param styleIndex Index of style to update. This index value refers to the
   *        index of the style in the style bindings array that was passed into
   *        `styling`.
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
      const lView = getLView();
      const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ÉµÉµstylePropInterpolate1;
  }
  /**
   *
   * Update an interpolated style property on an element with 2 bound values surrounded by text.
   *
   * Used when the value passed to a property has 2 interpolated values in it:
   *
   * ```html
   * <div style.color="prefix{{v0}}-{{v1}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');
   * ```
   *
   * @param styleIndex Index of style to update. This index value refers to the
   *        index of the style in the style bindings array that was passed into
   *        `styling`.
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
      const lView = getLView();
      const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ÉµÉµstylePropInterpolate2;
  }
  /**
   *
   * Update an interpolated style property on an element with 3 bound values surrounded by text.
   *
   * Used when the value passed to a property has 3 interpolated values in it:
   *
   * ```html
   * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');
   * ```
   *
   * @param styleIndex Index of style to update. This index value refers to the
   *        index of the style in the style bindings array that was passed into
   *        `styling`.
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
      const lView = getLView();
      const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ÉµÉµstylePropInterpolate3;
  }
  /**
   *
   * Update an interpolated style property on an element with 4 bound values surrounded by text.
   *
   * Used when the value passed to a property has 4 interpolated values in it:
   *
   * ```html
   * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
   * ```
   *
   * @param styleIndex Index of style to update. This index value refers to the
   *        index of the style in the style bindings array that was passed into
   *        `styling`.
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
      const lView = getLView();
      const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ÉµÉµstylePropInterpolate4;
  }
  /**
   *
   * Update an interpolated style property on an element with 5 bound values surrounded by text.
   *
   * Used when the value passed to a property has 5 interpolated values in it:
   *
   * ```html
   * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
   * ```
   *
   * @param styleIndex Index of style to update. This index value refers to the
   *        index of the style in the style bindings array that was passed into
   *        `styling`.
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
      const lView = getLView();
      const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ÉµÉµstylePropInterpolate5;
  }
  /**
   *
   * Update an interpolated style property on an element with 6 bound values surrounded by text.
   *
   * Used when the value passed to a property has 6 interpolated values in it:
   *
   * ```html
   * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
   * ```
   *
   * @param styleIndex Index of style to update. This index value refers to the
   *        index of the style in the style bindings array that was passed into
   *        `styling`.
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
      const lView = getLView();
      const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ÉµÉµstylePropInterpolate6;
  }
  /**
   *
   * Update an interpolated style property on an element with 7 bound values surrounded by text.
   *
   * Used when the value passed to a property has 7 interpolated values in it:
   *
   * ```html
   * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstylePropInterpolate7(
   *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
   * ```
   *
   * @param styleIndex Index of style to update. This index value refers to the
   *        index of the style in the style bindings array that was passed into
   *        `styling`.
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
      const lView = getLView();
      const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ÉµÉµstylePropInterpolate7;
  }
  /**
   *
   * Update an interpolated style property on an element with 8 bound values surrounded by text.
   *
   * Used when the value passed to a property has 8 interpolated values in it:
   *
   * ```html
   * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,
   * '-', v7, 'suffix');
   * ```
   *
   * @param styleIndex Index of style to update. This index value refers to the
   *        index of the style in the style bindings array that was passed into
   *        `styling`.
   * @param prefix Static value used for concatenation only.
   * @param v0 Value checked for change.
   * @param i0 Static value used for concatenation only.
   * @param v1 Value checked for change.
   * @param i1 Static value used for concatenation only.
   * @param v2 Value checked for change.
   * @param i2 Static value used for concatenation only.
   * @param v3 Value checked for change.
   * @param i3 Static value used for concatenation only.
   * @param v4 Value checked for change.
   * @param i4 Static value used for concatenation only.
   * @param v5 Value checked for change.
   * @param i5 Static value used for concatenation only.
   * @param v6 Value checked for change.
   * @param i6 Static value used for concatenation only.
   * @param v7 Value checked for change.
   * @param suffix Static value used for concatenation only.
   * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
      const lView = getLView();
      const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ÉµÉµstylePropInterpolate8;
  }
  /**
   * Update an interpolated style property on an element with 9 or more bound values surrounded by
   * text.
   *
   * Used when the number of interpolated values exceeds 8.
   *
   * ```html
   * <div
   *  style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix">
   * </div>
   * ```
   *
   * Its compiled representation is:
   *
   * ```ts
   * ÉµÉµstylePropInterpolateV(
   *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
   *  'suffix']);
   * ```
   *
   * @param styleIndex Index of style to update. This index value refers to the
   *        index of the style in the style bindings array that was passed into
   *        `styling`..
   * @param values The collection of values and the strings in-between those values, beginning with
   * a string prefix and ending with a string suffix.
   * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
   * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
   * @returns itself, so that it may be chained.
   * @codeGenApi
   */
  function ÉµÉµstylePropInterpolateV(prop, values, valueSuffix) {
      const lView = getLView();
      const interpolatedValue = interpolationV(lView, values);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ÉµÉµstylePropInterpolateV;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Update a property on a host element. Only applies to native node properties, not inputs.
   *
   * Operates on the element selected by index via the {@link select} instruction.
   *
   * @param propName Name of property. Because it is going to DOM, this is not subject to
   *        renaming as part of minification.
   * @param value New value to write.
   * @param sanitizer An optional function used to sanitize the value.
   * @returns This function returns itself so that it may be chained
   * (e.g. `property('name', ctx.name)('title', ctx.title)`)
   *
   * @codeGenApi
   */
  function ÉµÉµhostProperty(propName, value, sanitizer) {
      const lView = getLView();
      const bindingIndex = nextBindingIndex();
      if (bindingUpdated(lView, bindingIndex, value)) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
      }
      return ÉµÉµhostProperty;
  }
  /**
   * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.
   *
   * This instruction is for compatibility purposes and is designed to ensure that a
   * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in
   * the component's renderer. Normally all host bindings are evaluated with the parent
   * component's renderer, but, in the case of animation @triggers, they need to be
   * evaluated with the sub component's renderer (because that's where the animation
   * triggers are defined).
   *
   * Do not use this instruction as a replacement for `elementProperty`. This instruction
   * only exists to ensure compatibility with the ViewEngine's host binding behavior.
   *
   * @param index The index of the element to update in the data array
   * @param propName Name of property. Because it is going to DOM, this is not subject to
   *        renaming as part of minification.
   * @param value New value to write.
   * @param sanitizer An optional function used to sanitize the value.
   *
   * @codeGenApi
   */
  function ÉµÉµsyntheticHostProperty(propName, value, sanitizer) {
      const lView = getLView();
      const bindingIndex = nextBindingIndex();
      if (bindingUpdated(lView, bindingIndex, value)) {
          const tView = getTView();
          const tNode = getSelectedTNode();
          const currentDef = getCurrentDirectiveDef(tView.data);
          const renderer = loadComponentRenderer(currentDef, tNode, lView);
          elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
          ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
      }
      return ÉµÉµsyntheticHostProperty;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.
   */
  if (typeof ngI18nClosureMode === 'undefined') {
      // These property accesses can be ignored because ngI18nClosureMode will be set to false
      // when optimizing code and the whole if statement will be dropped.
      // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.
      // NOTE: we need to have it in IIFE so that the tree-shaker is happy.
      (function () {
          // tslint:disable-next-line:no-toplevel-property-access
          _global['ngI18nClosureMode'] =
              // TODO(FW-1250): validate that this actually, you know, works.
              // tslint:disable-next-line:no-toplevel-property-access
              typeof goog !== 'undefined' && typeof goog.getMsg === 'function';
      })();
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // THIS CODE IS GENERATED - DO NOT MODIFY.
  const u = undefined;
  function plural(val) {
      const n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\.?/, '').length;
      if (i === 1 && v === 0)
          return 1;
      return 5;
  }
  var localeEn = ["en", [["a", "p"], ["AM", "PM"], u], [["AM", "PM"], u, u], [["S", "M", "T", "W", "T", "F", "S"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]], u, [["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]], u, [["B", "A"], ["BC", "AD"], ["Before Christ", "Anno Domini"]], 0, [6, 0], ["M/d/yy", "MMM d, y", "MMMM d, y", "EEEE, MMMM d, y"], ["h:mm a", "h:mm:ss a", "h:mm:ss a z", "h:mm:ss a zzzz"], ["{1}, {0}", u, "{1} 'at' {0}", u], [".", ",", ";", "%", "+", "-", "E", "Ã—", "â€°", "âˆž", "NaN", ":"], ["#,##0.###", "#,##0%", "Â¤#,##0.00", "#E0"], "USD", "$", "US Dollar", {}, "ltr", plural];
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * This const is used to store the locale data registered with `registerLocaleData`
   */
  let LOCALE_DATA = {};
  /**
   * Register locale data to be used internally by Angular. See the
   * ["I18n guide"](guide/i18n-common-format-data-locale) to know how to import additional locale
   * data.
   *
   * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1
   */
  function registerLocaleData(data, localeId, extraData) {
      if (typeof localeId !== 'string') {
          extraData = localeId;
          localeId = data[LocaleDataIndex.LocaleId];
      }
      localeId = localeId.toLowerCase().replace(/_/g, '-');
      LOCALE_DATA[localeId] = data;
      if (extraData) {
          LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;
      }
  }
  /**
   * Finds the locale data for a given locale.
   *
   * @param locale The locale code.
   * @returns The locale data.
   * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
   */
  function findLocaleData(locale) {
      const normalizedLocale = normalizeLocale(locale);
      let match = getLocaleData(normalizedLocale);
      if (match) {
          return match;
      }
      // let's try to find a parent locale
      const parentLocale = normalizedLocale.split('-')[0];
      match = getLocaleData(parentLocale);
      if (match) {
          return match;
      }
      if (parentLocale === 'en') {
          return localeEn;
      }
      throw new Error(`Missing locale data for the locale "${locale}".`);
  }
  /**
   * Retrieves the default currency code for the given locale.
   *
   * The default is defined as the first currency which is still in use.
   *
   * @param locale The code of the locale whose currency code we want.
   * @returns The code of the default currency for the given locale.
   *
   */
  function getLocaleCurrencyCode(locale) {
      const data = findLocaleData(locale);
      return data[LocaleDataIndex.CurrencyCode] || null;
  }
  /**
   * Retrieves the plural function used by ICU expressions to determine the plural case to use
   * for a given locale.
   * @param locale A locale code for the locale format rules to use.
   * @returns The plural function for the locale.
   * @see `NgPlural`
   * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
   */
  function getLocalePluralCase(locale) {
      const data = findLocaleData(locale);
      return data[LocaleDataIndex.PluralCase];
  }
  /**
   * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`
   * or from the global `ng.common.locale`.
   */
  function getLocaleData(normalizedLocale) {
      if (!(normalizedLocale in LOCALE_DATA)) {
          LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales &&
              _global.ng.common.locales[normalizedLocale];
      }
      return LOCALE_DATA[normalizedLocale];
  }
  /**
   * Helper function to remove all the locale data from `LOCALE_DATA`.
   */
  function unregisterAllLocaleData() {
      LOCALE_DATA = {};
  }
  /**
   * Index of each type of locale data from the locale data array
   */
  var LocaleDataIndex;
  (function (LocaleDataIndex) {
      LocaleDataIndex[LocaleDataIndex["LocaleId"] = 0] = "LocaleId";
      LocaleDataIndex[LocaleDataIndex["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
      LocaleDataIndex[LocaleDataIndex["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
      LocaleDataIndex[LocaleDataIndex["DaysFormat"] = 3] = "DaysFormat";
      LocaleDataIndex[LocaleDataIndex["DaysStandalone"] = 4] = "DaysStandalone";
      LocaleDataIndex[LocaleDataIndex["MonthsFormat"] = 5] = "MonthsFormat";
      LocaleDataIndex[LocaleDataIndex["MonthsStandalone"] = 6] = "MonthsStandalone";
      LocaleDataIndex[LocaleDataIndex["Eras"] = 7] = "Eras";
      LocaleDataIndex[LocaleDataIndex["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
      LocaleDataIndex[LocaleDataIndex["WeekendRange"] = 9] = "WeekendRange";
      LocaleDataIndex[LocaleDataIndex["DateFormat"] = 10] = "DateFormat";
      LocaleDataIndex[LocaleDataIndex["TimeFormat"] = 11] = "TimeFormat";
      LocaleDataIndex[LocaleDataIndex["DateTimeFormat"] = 12] = "DateTimeFormat";
      LocaleDataIndex[LocaleDataIndex["NumberSymbols"] = 13] = "NumberSymbols";
      LocaleDataIndex[LocaleDataIndex["NumberFormats"] = 14] = "NumberFormats";
      LocaleDataIndex[LocaleDataIndex["CurrencyCode"] = 15] = "CurrencyCode";
      LocaleDataIndex[LocaleDataIndex["CurrencySymbol"] = 16] = "CurrencySymbol";
      LocaleDataIndex[LocaleDataIndex["CurrencyName"] = 17] = "CurrencyName";
      LocaleDataIndex[LocaleDataIndex["Currencies"] = 18] = "Currencies";
      LocaleDataIndex[LocaleDataIndex["Directionality"] = 19] = "Directionality";
      LocaleDataIndex[LocaleDataIndex["PluralCase"] = 20] = "PluralCase";
      LocaleDataIndex[LocaleDataIndex["ExtraData"] = 21] = "ExtraData";
  })(LocaleDataIndex || (LocaleDataIndex = {}));
  /**
   * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.
   */
  function normalizeLocale(locale) {
      return locale.toLowerCase().replace(/_/g, '-');
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const pluralMapping = ['zero', 'one', 'two', 'few', 'many'];
  /**
   * Returns the plural case based on the locale
   */
  function getPluralCase(value, locale) {
      const plural = getLocalePluralCase(locale)(parseInt(value, 10));
      const result = pluralMapping[plural];
      return (result !== undefined) ? result : 'other';
  }
  /**
   * The locale id that the application is using by default (for translations and ICU expressions).
   */
  const DEFAULT_LOCALE_ID = 'en-US';
  /**
   * USD currency code that the application uses by default for CurrencyPipe when no
   * DEFAULT_CURRENCY_CODE is provided.
   */
  const USD_CURRENCY_CODE = 'USD';
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Marks that the next string is an element name.
   *
   * See `I18nMutateOpCodes` documentation.
   */
  const ELEMENT_MARKER = {
      marker: 'element'
  };
  /**
   * Marks that the next string is comment text need for ICU.
   *
   * See `I18nMutateOpCodes` documentation.
   */
  const ICU_MARKER = {
      marker: 'ICU'
  };
  /**
   * See `I18nCreateOpCodes`
   */
  var I18nCreateOpCode;
  (function (I18nCreateOpCode) {
      /**
       * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and
       * `COMMENT`.
       */
      I18nCreateOpCode[I18nCreateOpCode["SHIFT"] = 2] = "SHIFT";
      /**
       * Should the node be appended to parent imedditatly after creation.
       */
      I18nCreateOpCode[I18nCreateOpCode["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
      /**
       * If set the node should be comment (rather than a text) node.
       */
      I18nCreateOpCode[I18nCreateOpCode["COMMENT"] = 2] = "COMMENT";
  })(I18nCreateOpCode || (I18nCreateOpCode = {}));
  // Note: This hack is necessary so we don't erroneously get a circular dependency
  // failure based on types.
  const unusedValueExportToPlacateAjd$2 = 1;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * The locale id that the application is currently using (for translations and ICU expressions).
   * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
   * but is now defined as a global value.
   */
  let LOCALE_ID$1 = DEFAULT_LOCALE_ID;
  /**
   * Sets the locale id that will be used for translations and ICU expressions.
   * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
   * but is now defined as a global value.
   *
   * @param localeId
   */
  function setLocaleId(localeId) {
      assertDefined(localeId, `Expected localeId to be defined`);
      if (typeof localeId === 'string') {
          LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, '-');
      }
  }
  /**
   * Gets the locale id that will be used for translations and ICU expressions.
   * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
   * but is now defined as a global value.
   */
  function getLocaleId() {
      return LOCALE_ID$1;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).
   *
   * This method determines the `RNode` in front of which we should insert the `currentRNode`. This
   * takes `TNode.insertBeforeIndex` into account.
   *
   * @param parentTNode parent `TNode`
   * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)
   * @param lView current `LView`
   */
  function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
      const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
      const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;
      if (insertBeforeIndex === null) {
          return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
      }
      else {
          ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
          return unwrapRNode(lView[insertBeforeIndex]);
      }
  }
  /**
   * Process `TNode.insertBeforeIndex` by adding i18n text nodes.
   *
   * See `TNode.insertBeforeIndex`
   */
  function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
      const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;
      if (Array.isArray(tNodeInsertBeforeIndex)) {
          // An array indicates that there are i18n nodes that need to be added as children of this
          // `childRNode`. These i18n nodes were created before this `childRNode` was available and so
          // only now can be added. The first element of the array is the normal index where we should
          // insert the `childRNode`. Additional elements are the extra nodes to be added as children of
          // `childRNode`.
          ngDevMode && assertDomNode(childRNode);
          let i18nParent = childRNode;
          let anchorRNode = null;
          if (!(childTNode.type & 3 /* AnyRNode */)) {
              anchorRNode = i18nParent;
              i18nParent = parentRElement;
          }
          if (i18nParent !== null && (childTNode.flags & 2 /* isComponentHost */) === 0) {
              for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {
                  // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.
                  // see `assertDomNode` below.
                  const i18nChild = lView[tNodeInsertBeforeIndex[i]];
                  nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
              }
          }
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list
   * `tNode.insertBeforeIndex`.
   *
   * Things to keep in mind:
   * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the
   *    `ÉµÉµi18nStart` instruction.
   * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by
   *    `ÉµÉµelementStart` instruction.
   * 3. `ÉµÉµelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a
   *    smaller index `TNode` is guaranteed to be created before a larger one)
   *
   * We use the above three invariants to determine `TNode.insertBeforeIndex`.
   *
   * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,
   * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that
   * the next node is not yet created and therefore we can't insert in front of it.
   *
   * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't
   *        know if there will be further `TNode`s inserted after.)
   * Rule2: If `previousTNode` is created after the `tNode` being inserted, then
   *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check
   *        previous to see if we can update its `insertBeforeTNode`)
   *
   * See `TNode.insertBeforeIndex` for more context.
   *
   * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in
   *     reverse order. (If `TNode` would have `previous` this would not be necessary.)
   * @param newTNode A TNode to add to the `previousTNodes` list.
   */
  function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
      // Start with Rule1
      ngDevMode &&
          assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');
      previousTNodes.push(newTNode);
      if (previousTNodes.length > 1) {
          for (let i = previousTNodes.length - 2; i >= 0; i--) {
              const existingTNode = previousTNodes[i];
              // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.
              // It is safe to ignore them.
              if (!isI18nText(existingTNode)) {
                  if (isNewTNodeCreatedBefore(existingTNode, newTNode) &&
                      getInsertBeforeIndex(existingTNode) === null) {
                      // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)
                      // then add the `insertBeforeIndex`.
                      setInsertBeforeIndex(existingTNode, newTNode.index);
                  }
              }
          }
      }
  }
  function isI18nText(tNode) {
      return !(tNode.type & 64 /* Placeholder */);
  }
  function isNewTNodeCreatedBefore(existingTNode, newTNode) {
      return isI18nText(newTNode) || existingTNode.index > newTNode.index;
  }
  function getInsertBeforeIndex(tNode) {
      const index = tNode.insertBeforeIndex;
      return Array.isArray(index) ? index[0] : index;
  }
  function setInsertBeforeIndex(tNode, value) {
      const index = tNode.insertBeforeIndex;
      if (Array.isArray(index)) {
          // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`
          index[0] = value;
      }
      else {
          setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
          tNode.insertBeforeIndex = value;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Retrieve `TIcu` at a given `index`.
   *
   * The `TIcu` can be stored either directly (if it is nested ICU) OR
   * it is stored inside tho `TIcuContainer` if it is top level ICU.
   *
   * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
   * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
   * expressed (parent ICU may have selected a case which does not contain it.)
   *
   * @param tView Current `TView`.
   * @param index Index where the value should be read from.
   */
  function getTIcu(tView, index) {
      const value = tView.data[index];
      if (value === null || typeof value === 'string')
          return null;
      if (ngDevMode &&
          !(value.hasOwnProperty('tViews') || value.hasOwnProperty('currentCaseLViewIndex'))) {
          throwError('We expect to get \'null\'|\'TIcu\'|\'TIcuContainer\', but got: ' + value);
      }
      // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be
      // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it
      // will be just two cases which fits into the browser inline cache (inline cache can take up to
      // 4)
      const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value :
          value.value;
      ngDevMode && assertTIcu(tIcu);
      return tIcu;
  }
  /**
   * Store `TIcu` at a give `index`.
   *
   * The `TIcu` can be stored either directly (if it is nested ICU) OR
   * it is stored inside tho `TIcuContainer` if it is top level ICU.
   *
   * The reason for this is that the top level ICU need a `TNode` so that they are part of the render
   * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is
   * expressed (parent ICU may have selected a case which does not contain it.)
   *
   * @param tView Current `TView`.
   * @param index Index where the value should be stored at in `Tview.data`
   * @param tIcu The TIcu to store.
   */
  function setTIcu(tView, index, tIcu) {
      const tNode = tView.data[index];
      ngDevMode &&
          assertEqual(tNode === null || tNode.hasOwnProperty('tViews'), true, 'We expect to get \'null\'|\'TIcuContainer\'');
      if (tNode === null) {
          tView.data[index] = tIcu;
      }
      else {
          ngDevMode && assertTNodeType(tNode, 32 /* Icu */);
          tNode.value = tIcu;
      }
  }
  /**
   * Set `TNode.insertBeforeIndex` taking the `Array` into account.
   *
   * See `TNode.insertBeforeIndex`
   */
  function setTNodeInsertBeforeIndex(tNode, index) {
      ngDevMode && assertTNode(tNode);
      let insertBeforeIndex = tNode.insertBeforeIndex;
      if (insertBeforeIndex === null) {
          setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
          insertBeforeIndex = tNode.insertBeforeIndex =
              [null /* may be updated to number later */, index];
      }
      else {
          assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');
          insertBeforeIndex.push(index);
      }
  }
  /**
   * Create `TNode.type=TNodeType.Placeholder` node.
   *
   * See `TNodeType.Placeholder` for more information.
   */
  function createTNodePlaceholder(tView, previousTNodes, index) {
      const tNode = createTNodeAtIndex(tView, index, 64 /* Placeholder */, null, null);
      addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
      return tNode;
  }
  /**
   * Returns current ICU case.
   *
   * ICU cases are stored as index into the `TIcu.cases`.
   * At times it is necessary to communicate that the ICU case just switched and that next ICU update
   * should update all bindings regardless of the mask. In such a case the we store negative numbers
   * for cases which have just been switched. This function removes the negative flag.
   */
  function getCurrentICUCaseIndex(tIcu, lView) {
      const currentCase = lView[tIcu.currentCaseLViewIndex];
      return currentCase === null ? currentCase : (currentCase < 0 ? ~currentCase : currentCase);
  }
  function getParentFromIcuCreateOpCode(mergedCode) {
      return mergedCode >>> 17 /* SHIFT_PARENT */;
  }
  function getRefFromIcuCreateOpCode(mergedCode) {
      return (mergedCode & 131070 /* MASK_REF */) >>> 1 /* SHIFT_REF */;
  }
  function getInstructionFromIcuCreateOpCode(mergedCode) {
      return mergedCode & 1 /* MASK_INSTRUCTION */;
  }
  function icuCreateOpCode(opCode, parentIdx, refIdx) {
      ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');
      ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');
      return opCode | parentIdx << 17 /* SHIFT_PARENT */ | refIdx << 1 /* SHIFT_REF */;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Keep track of which input bindings in `ÉµÉµi18nExp` have changed.
   *
   * This is used to efficiently update expressions in i18n only when the corresponding input has
   * changed.
   *
   * 1) Each bit represents which of the `ÉµÉµi18nExp` has changed.
   * 2) There are 32 bits allowed in JS.
   * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more
   * than 32 `ÉµÉµi18nExp` then all changes past 32nd `ÉµÉµi18nExp` will be mapped to same bit. This means
   * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare
   * so in practice it should not be an issue.)
   */
  let changeMask = 0b0;
  /**
   * Keeps track of which bit needs to be updated in `changeMask`
   *
   * This value gets incremented on every call to `ÉµÉµi18nExp`
   */
  let changeMaskCounter = 0;
  /**
   * Keep track of which input bindings in `ÉµÉµi18nExp` have changed.
   *
   * `setMaskBit` gets invoked by each call to `ÉµÉµi18nExp`.
   *
   * @param hasChange did `ÉµÉµi18nExp` detect a change.
   */
  function setMaskBit(hasChange) {
      if (hasChange) {
          changeMask = changeMask | (1 << Math.min(changeMaskCounter, 31));
      }
      changeMaskCounter++;
  }
  function applyI18n(tView, lView, index) {
      if (changeMaskCounter > 0) {
          ngDevMode && assertDefined(tView, `tView should be defined`);
          const tI18n = tView.data[index];
          // When `index` points to an `ÉµÉµi18nAttributes` then we have an array otherwise `TI18n`
          const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
          const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
          applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
      }
      // Reset changeMask & maskBit to default for the next update cycle
      changeMask = 0b0;
      changeMaskCounter = 0;
  }
  /**
   * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.
   *
   * Creates text (and comment) nodes which are internationalized.
   *
   * @param lView Current lView
   * @param createOpCodes Set of op-codes to apply
   * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is
   *     a root node.
   * @param insertInFrontOf DOM node that should be used as an anchor.
   */
  function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
      const renderer = lView[RENDERER];
      for (let i = 0; i < createOpCodes.length; i++) {
          const opCode = createOpCodes[i++];
          const text = createOpCodes[i];
          const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
          const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
          const index = opCode >>> I18nCreateOpCode.SHIFT;
          let rNode = lView[index];
          if (rNode === null) {
              // We only create new DOM nodes if they don't already exist: If ICU switches case back to a
              // case which was already instantiated, no need to create new DOM nodes.
              rNode = lView[index] =
                  isComment ? renderer.createComment(text) : createTextNode(renderer, text);
          }
          if (appendNow && parentRNode !== null) {
              nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
          }
      }
  }
  /**
   * Apply `I18nMutateOpCodes` OpCodes.
   *
   * @param tView Current `TView`
   * @param mutableOpCodes Mutable OpCodes to process
   * @param lView Current `LView`
   * @param anchorRNode place where the i18n node should be inserted.
   */
  function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
      ngDevMode && assertDomNode(anchorRNode);
      const renderer = lView[RENDERER];
      // `rootIdx` represents the node into which all inserts happen.
      let rootIdx = null;
      // `rootRNode` represents the real node into which we insert. This can be different from
      // `lView[rootIdx]` if we have projection.
      //  - null we don't have a parent (as can be the case in when we are inserting into a root of
      //    LView which has no parent.)
      //  - `RElement` The element representing the root after taking projection into account.
      let rootRNode;
      for (let i = 0; i < mutableOpCodes.length; i++) {
          const opCode = mutableOpCodes[i];
          if (typeof opCode == 'string') {
              const textNodeIndex = mutableOpCodes[++i];
              if (lView[textNodeIndex] === null) {
                  ngDevMode && ngDevMode.rendererCreateTextNode++;
                  ngDevMode && assertIndexInRange(lView, textNodeIndex);
                  lView[textNodeIndex] = createTextNode(renderer, opCode);
              }
          }
          else if (typeof opCode == 'number') {
              switch (opCode & 1 /* MASK_INSTRUCTION */) {
                  case 0 /* AppendChild */:
                      const parentIdx = getParentFromIcuCreateOpCode(opCode);
                      if (rootIdx === null) {
                          // The first operation should save the `rootIdx` because the first operation
                          // must insert into the root. (Only subsequent operations can insert into a dynamic
                          // parent)
                          rootIdx = parentIdx;
                          rootRNode = nativeParentNode(renderer, anchorRNode);
                      }
                      let insertInFrontOf;
                      let parentRNode;
                      if (parentIdx === rootIdx) {
                          insertInFrontOf = anchorRNode;
                          parentRNode = rootRNode;
                      }
                      else {
                          insertInFrontOf = null;
                          parentRNode = unwrapRNode(lView[parentIdx]);
                      }
                      // FIXME(misko): Refactor with `processI18nText`
                      if (parentRNode !== null) {
                          // This can happen if the `LView` we are adding to is not attached to a parent `LView`.
                          // In such a case there is no "root" we can attach to. This is fine, as we still need to
                          // create the elements. When the `LView` gets later added to a parent these "root" nodes
                          // get picked up and added.
                          ngDevMode && assertDomNode(parentRNode);
                          const refIdx = getRefFromIcuCreateOpCode(opCode);
                          ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');
                          // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n
                          // which can't have components.
                          const child = lView[refIdx];
                          ngDevMode && assertDomNode(child);
                          nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
                          const tIcu = getTIcu(tView, refIdx);
                          if (tIcu !== null && typeof tIcu === 'object') {
                              // If we just added a comment node which has ICU then that ICU may have already been
                              // rendered and therefore we need to re-add it here.
                              ngDevMode && assertTIcu(tIcu);
                              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);
                              if (caseIndex !== null) {
                                  applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
                              }
                          }
                      }
                      break;
                  case 1 /* Attr */:
                      const elementNodeIndex = opCode >>> 1 /* SHIFT_REF */;
                      const attrName = mutableOpCodes[++i];
                      const attrValue = mutableOpCodes[++i];
                      // This code is used for ICU expressions only, since we don't support
                      // directives/components in ICUs, we don't need to worry about inputs here
                      setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
                      break;
                  default:
                      if (ngDevMode) {
                          throw new RuntimeError(700 /* INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for "${opCode}"`);
                      }
              }
          }
          else {
              switch (opCode) {
                  case ICU_MARKER:
                      const commentValue = mutableOpCodes[++i];
                      const commentNodeIndex = mutableOpCodes[++i];
                      if (lView[commentNodeIndex] === null) {
                          ngDevMode &&
                              assertEqual(typeof commentValue, 'string', `Expected "${commentValue}" to be a comment node value`);
                          ngDevMode && ngDevMode.rendererCreateComment++;
                          ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
                          const commentRNode = lView[commentNodeIndex] =
                              createCommentNode(renderer, commentValue);
                          // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)
                          attachPatchData(commentRNode, lView);
                      }
                      break;
                  case ELEMENT_MARKER:
                      const tagName = mutableOpCodes[++i];
                      const elementNodeIndex = mutableOpCodes[++i];
                      if (lView[elementNodeIndex] === null) {
                          ngDevMode &&
                              assertEqual(typeof tagName, 'string', `Expected "${tagName}" to be an element node tag name`);
                          ngDevMode && ngDevMode.rendererCreateElement++;
                          ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);
                          const elementRNode = lView[elementNodeIndex] =
                              createElementNode(renderer, tagName, null);
                          // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)
                          attachPatchData(elementRNode, lView);
                      }
                      break;
                  default:
                      ngDevMode &&
                          throwError(`Unable to determine the type of mutate operation for "${opCode}"`);
              }
          }
      }
  }
  /**
   * Apply `I18nUpdateOpCodes` OpCodes
   *
   * @param tView Current `TView`
   * @param lView Current `LView`
   * @param updateOpCodes OpCodes to process
   * @param bindingsStartIndex Location of the first `ÉµÉµi18nApply`
   * @param changeMask Each bit corresponds to a `ÉµÉµi18nExp` (Counting backwards from
   *     `bindingsStartIndex`)
   */
  function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {
      for (let i = 0; i < updateOpCodes.length; i++) {
          // bit code to check if we should apply the next update
          const checkBit = updateOpCodes[i];
          // Number of opCodes to skip until next set of update codes
          const skipCodes = updateOpCodes[++i];
          if (checkBit & changeMask) {
              // The value has been updated since last checked
              let value = '';
              for (let j = i + 1; j <= (i + skipCodes); j++) {
                  const opCode = updateOpCodes[j];
                  if (typeof opCode == 'string') {
                      value += opCode;
                  }
                  else if (typeof opCode == 'number') {
                      if (opCode < 0) {
                          // Negative opCode represent `i18nExp` values offset.
                          value += renderStringify(lView[bindingsStartIndex - opCode]);
                      }
                      else {
                          const nodeIndex = (opCode >>> 2 /* SHIFT_REF */);
                          switch (opCode & 3 /* MASK_OPCODE */) {
                              case 1 /* Attr */:
                                  const propName = updateOpCodes[++j];
                                  const sanitizeFn = updateOpCodes[++j];
                                  const tNodeOrTagName = tView.data[nodeIndex];
                                  ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');
                                  if (typeof tNodeOrTagName === 'string') {
                                      // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does
                                      // not have TNode), in which case we know that there are no directives, and hence
                                      // we use attribute setting.
                                      setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                                  }
                                  else {
                                      elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);
                                  }
                                  break;
                              case 0 /* Text */:
                                  const rText = lView[nodeIndex];
                                  rText !== null && updateTextNode(lView[RENDERER], rText, value);
                                  break;
                              case 2 /* IcuSwitch */:
                                  applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                                  break;
                              case 3 /* IcuUpdate */:
                                  applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                                  break;
                          }
                      }
                  }
              }
          }
          else {
              const opCode = updateOpCodes[i + 1];
              if (opCode > 0 && (opCode & 3 /* MASK_OPCODE */) === 3 /* IcuUpdate */) {
                  // Special case for the `icuUpdateCase`. It could be that the mask did not match, but
                  // we still need to execute `icuUpdateCase` because the case has changed recently due to
                  // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in
                  // pairs.)
                  const nodeIndex = (opCode >>> 2 /* SHIFT_REF */);
                  const tIcu = getTIcu(tView, nodeIndex);
                  const currentIndex = lView[tIcu.currentCaseLViewIndex];
                  if (currentIndex < 0) {
                      applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
                  }
              }
          }
          i += skipCodes;
      }
  }
  /**
   * Apply OpCodes associated with updating an existing ICU.
   *
   * @param tView Current `TView`
   * @param tIcu Current `TIcu`
   * @param bindingsStartIndex Location of the first `ÉµÉµi18nApply`
   * @param lView Current `LView`
   */
  function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
      ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
      let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];
      if (activeCaseIndex !== null) {
          let mask = changeMask;
          if (activeCaseIndex < 0) {
              // Clear the flag.
              // Negative number means that the ICU was freshly created and we need to force the update.
              activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;
              // -1 is same as all bits on, which simulates creation since it marks all bits dirty
              mask = -1;
          }
          applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
      }
  }
  /**
   * Apply OpCodes associated with switching a case on ICU.
   *
   * This involves tearing down existing case and than building up a new case.
   *
   * @param tView Current `TView`
   * @param tIcu Current `TIcu`
   * @param lView Current `LView`
   * @param value Value of the case to update to.
   */
  function applyIcuSwitchCase(tView, tIcu, lView, value) {
      // Rebuild a new case for this ICU
      const caseIndex = getCaseIndex(tIcu, value);
      let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
      if (activeCaseIndex !== caseIndex) {
          applyIcuSwitchCaseRemove(tView, tIcu, lView);
          lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;
          if (caseIndex !== null) {
              // Add the nodes for the new case
              const anchorRNode = lView[tIcu.anchorIdx];
              if (anchorRNode) {
                  ngDevMode && assertDomNode(anchorRNode);
                  applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
              }
          }
      }
  }
  /**
   * Apply OpCodes associated with tearing ICU case.
   *
   * This involves tearing down existing case and than building up a new case.
   *
   * @param tView Current `TView`
   * @param tIcu Current `TIcu`
   * @param lView Current `LView`
   */
  function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
      let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
      if (activeCaseIndex !== null) {
          const removeCodes = tIcu.remove[activeCaseIndex];
          for (let i = 0; i < removeCodes.length; i++) {
              const nodeOrIcuIndex = removeCodes[i];
              if (nodeOrIcuIndex > 0) {
                  // Positive numbers are `RNode`s.
                  const rNode = getNativeByIndex(nodeOrIcuIndex, lView);
                  rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
              }
              else {
                  // Negative numbers are ICUs
                  applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
              }
          }
      }
  }
  /**
   * Returns the index of the current case of an ICU expression depending on the main binding value
   *
   * @param icuExpression
   * @param bindingValue The value of the main binding used by this ICU expression
   */
  function getCaseIndex(icuExpression, bindingValue) {
      let index = icuExpression.cases.indexOf(bindingValue);
      if (index === -1) {
          switch (icuExpression.type) {
              case 1 /* plural */: {
                  const resolvedCase = getPluralCase(bindingValue, getLocaleId());
                  index = icuExpression.cases.indexOf(resolvedCase);
                  if (index === -1 && resolvedCase !== 'other') {
                      index = icuExpression.cases.indexOf('other');
                  }
                  break;
              }
              case 0 /* select */: {
                  index = icuExpression.cases.indexOf('other');
                  break;
              }
          }
      }
      return index === -1 ? null : index;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function loadIcuContainerVisitor() {
      const _stack = [];
      let _index = -1;
      let _lView;
      let _removes;
      /**
       * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`
       * to determine which root belong to the ICU.
       *
       * Example of usage.
       * ```
       * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);
       * let rNode: RNode|null;
       * while(rNode = nextRNode()) {
       *   console.log(rNode);
       * }
       * ```
       *
       * @param tIcuContainerNode Current `TIcuContainerNode`
       * @param lView `LView` where the `RNode`s should be looked up.
       */
      function icuContainerIteratorStart(tIcuContainerNode, lView) {
          _lView = lView;
          while (_stack.length)
              _stack.pop();
          ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
          enterIcu(tIcuContainerNode.value, lView);
          return icuContainerIteratorNext;
      }
      function enterIcu(tIcu, lView) {
          _index = 0;
          const currentCase = getCurrentICUCaseIndex(tIcu, lView);
          if (currentCase !== null) {
              ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
              _removes = tIcu.remove[currentCase];
          }
          else {
              _removes = EMPTY_ARRAY;
          }
      }
      function icuContainerIteratorNext() {
          if (_index < _removes.length) {
              const removeOpCode = _removes[_index++];
              ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');
              if (removeOpCode > 0) {
                  const rNode = _lView[removeOpCode];
                  ngDevMode && assertDomNode(rNode);
                  return rNode;
              }
              else {
                  _stack.push(_index, _removes);
                  // ICUs are represented by negative indices
                  const tIcuIndex = ~removeOpCode;
                  const tIcu = _lView[TVIEW].data[tIcuIndex];
                  ngDevMode && assertTIcu(tIcu);
                  enterIcu(tIcu, _lView);
                  return icuContainerIteratorNext();
              }
          }
          else {
              if (_stack.length === 0) {
                  return null;
              }
              else {
                  _removes = _stack.pop();
                  _index = _stack.pop();
                  return icuContainerIteratorNext();
              }
          }
      }
      return icuContainerIteratorStart;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Converts `I18nCreateOpCodes` array into a human readable format.
   *
   * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.
   * This function provides a human readable view of the opcodes. This is useful when debugging the
   * application as well as writing more readable tests.
   *
   * @param this `I18nCreateOpCodes` if attached as a method.
   * @param opcodes `I18nCreateOpCodes` if invoked as a function.
   */
  function i18nCreateOpCodesToString(opcodes) {
      const createOpCodes = opcodes || (Array.isArray(this) ? this : []);
      let lines = [];
      for (let i = 0; i < createOpCodes.length; i++) {
          const opCode = createOpCodes[i++];
          const text = createOpCodes[i];
          const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
          const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
          const index = opCode >>> I18nCreateOpCode.SHIFT;
          lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);
          if (appendNow) {
              lines.push(`parent.appendChild(lView[${index}]);`);
          }
      }
      return lines;
  }
  /**
   * Converts `I18nUpdateOpCodes` array into a human readable format.
   *
   * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.
   * This function provides a human readable view of the opcodes. This is useful when debugging the
   * application as well as writing more readable tests.
   *
   * @param this `I18nUpdateOpCodes` if attached as a method.
   * @param opcodes `I18nUpdateOpCodes` if invoked as a function.
   */
  function i18nUpdateOpCodesToString(opcodes) {
      const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
      let lines = [];
      function consumeOpCode(value) {
          const ref = value >>> 2 /* SHIFT_REF */;
          const opCode = value & 3 /* MASK_OPCODE */;
          switch (opCode) {
              case 0 /* Text */:
                  return `(lView[${ref}] as Text).textContent = $$$`;
              case 1 /* Attr */:
                  const attrName = parser.consumeString();
                  const sanitizationFn = parser.consumeFunction();
                  const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';
                  return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;
              case 2 /* IcuSwitch */:
                  return `icuSwitchCase(${ref}, $$$)`;
              case 3 /* IcuUpdate */:
                  return `icuUpdateCase(${ref})`;
          }
          throw new Error('unexpected OpCode');
      }
      while (parser.hasMore()) {
          let mask = parser.consumeNumber();
          let size = parser.consumeNumber();
          const end = parser.i + size;
          const statements = [];
          let statement = '';
          while (parser.i < end) {
              let value = parser.consumeNumberOrString();
              if (typeof value === 'string') {
                  statement += value;
              }
              else if (value < 0) {
                  // Negative numbers are ref indexes
                  // Here `i` refers to current binding index. It is to signify that the value is relative,
                  // rather than absolute.
                  statement += '${lView[i' + value + ']}';
              }
              else {
                  // Positive numbers are operations.
                  const opCodeText = consumeOpCode(value);
                  statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');
                  statement = '';
              }
          }
          lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);
      }
      return lines;
  }
  /**
   * Converts `I18nCreateOpCodes` array into a human readable format.
   *
   * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This
   * function provides a human readable view of the opcodes. This is useful when debugging the
   * application as well as writing more readable tests.
   *
   * @param this `I18nCreateOpCodes` if attached as a method.
   * @param opcodes `I18nCreateOpCodes` if invoked as a function.
   */
  function icuCreateOpCodesToString(opcodes) {
      const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
      let lines = [];
      function consumeOpCode(opCode) {
          const parent = getParentFromIcuCreateOpCode(opCode);
          const ref = getRefFromIcuCreateOpCode(opCode);
          switch (getInstructionFromIcuCreateOpCode(opCode)) {
              case 0 /* AppendChild */:
                  return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;
              case 1 /* Attr */:
                  return `(lView[${ref}] as Element).setAttribute("${parser.consumeString()}", "${parser.consumeString()}")`;
          }
          throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));
      }
      let lastRef = -1;
      while (parser.hasMore()) {
          let value = parser.consumeNumberStringOrMarker();
          if (value === ICU_MARKER) {
              const text = parser.consumeString();
              lastRef = parser.consumeNumber();
              lines.push(`lView[${lastRef}] = document.createComment("${text}")`);
          }
          else if (value === ELEMENT_MARKER) {
              const text = parser.consumeString();
              lastRef = parser.consumeNumber();
              lines.push(`lView[${lastRef}] = document.createElement("${text}")`);
          }
          else if (typeof value === 'string') {
              lastRef = parser.consumeNumber();
              lines.push(`lView[${lastRef}] = document.createTextNode("${value}")`);
          }
          else if (typeof value === 'number') {
              const line = consumeOpCode(value);
              line && lines.push(line);
          }
          else {
              throw new Error('Unexpected value');
          }
      }
      return lines;
  }
  /**
   * Converts `I18nRemoveOpCodes` array into a human readable format.
   *
   * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This
   * function provides a human readable view of the opcodes. This is useful when debugging the
   * application as well as writing more readable tests.
   *
   * @param this `I18nRemoveOpCodes` if attached as a method.
   * @param opcodes `I18nRemoveOpCodes` if invoked as a function.
   */
  function i18nRemoveOpCodesToString(opcodes) {
      const removeCodes = opcodes || (Array.isArray(this) ? this : []);
      let lines = [];
      for (let i = 0; i < removeCodes.length; i++) {
          const nodeOrIcuIndex = removeCodes[i];
          if (nodeOrIcuIndex > 0) {
              // Positive numbers are `RNode`s.
              lines.push(`remove(lView[${nodeOrIcuIndex}])`);
          }
          else {
              // Negative numbers are ICUs
              lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);
          }
      }
      return lines;
  }
  class OpCodeParser {
      constructor(codes) {
          this.i = 0;
          this.codes = codes;
      }
      hasMore() {
          return this.i < this.codes.length;
      }
      consumeNumber() {
          let value = this.codes[this.i++];
          assertNumber(value, 'expecting number in OpCode');
          return value;
      }
      consumeString() {
          let value = this.codes[this.i++];
          assertString(value, 'expecting string in OpCode');
          return value;
      }
      consumeFunction() {
          let value = this.codes[this.i++];
          if (value === null || typeof value === 'function') {
              return value;
          }
          throw new Error('expecting function in OpCode');
      }
      consumeNumberOrString() {
          let value = this.codes[this.i++];
          if (typeof value === 'string') {
              return value;
          }
          assertNumber(value, 'expecting number or string in OpCode');
          return value;
      }
      consumeNumberStringOrMarker() {
          let value = this.codes[this.i++];
          if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER ||
              value == ELEMENT_MARKER) {
              return value;
          }
          assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');
          return value;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const BINDING_REGEXP = /ï¿½(\d+):?\d*ï¿½/gi;
  const ICU_REGEXP = /({\s*ï¿½\d+:?\d*ï¿½\s*,\s*\S{6}\s*,[\s\S]*})/gi;
  const NESTED_ICU = /ï¿½(\d+)ï¿½/;
  const ICU_BLOCK_REGEXP = /^\s*(ï¿½\d+:?\d*ï¿½)\s*,\s*(select|plural)\s*,/;
  const MARKER = `ï¿½`;
  const SUBTEMPLATE_REGEXP = /ï¿½\/?\*(\d+:\d+)ï¿½/gi;
  const PH_REGEXP = /ï¿½(\/?[#*]\d+):?\d*ï¿½/gi;
  /**
   * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
   * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
   * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
   * and later on replaced by a space. We are re-implementing the same idea here, since translations
   * might contain this special character.
   */
  const NGSP_UNICODE_REGEXP = /\uE500/g;
  function replaceNgsp(value) {
      return value.replace(NGSP_UNICODE_REGEXP, ' ');
  }
  /**
   * Create dynamic nodes from i18n translation block.
   *
   * - Text nodes are created synchronously
   * - TNodes are linked into tree lazily
   *
   * @param tView Current `TView`
   * @parentTNodeIndex index to the parent TNode of this i18n block
   * @param lView Current `LView`
   * @param index Index of `ÉµÉµi18nStart` instruction.
   * @param message Message to translate.
   * @param subTemplateIndex Index into the sub template of message translation. (ie in case of
   *     `ngIf`) (-1 otherwise)
   */
  function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
      const rootTNode = getCurrentParentTNode();
      const createOpCodes = [];
      const updateOpCodes = [];
      const existingTNodeStack = [[]];
      if (ngDevMode) {
          attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
          attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
      }
      message = getTranslationForTemplate(message, subTemplateIndex);
      const msgParts = replaceNgsp(message).split(PH_REGEXP);
      for (let i = 0; i < msgParts.length; i++) {
          let value = msgParts[i];
          if ((i & 1) === 0) {
              // Even indexes are text (including bindings & ICU expressions)
              const parts = i18nParseTextIntoPartsAndICU(value);
              for (let j = 0; j < parts.length; j++) {
                  let part = parts[j];
                  if ((j & 1) === 0) {
                      // `j` is odd therefore `part` is string
                      const text = part;
                      ngDevMode && assertString(text, 'Parsed ICU part should be string');
                      if (text !== '') {
                          i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);
                      }
                  }
                  else {
                      // `j` is Even therefor `part` is an `ICUExpression`
                      const icuExpression = part;
                      // Verify that ICU expression has the right shape. Translations might contain invalid
                      // constructions (while original messages were correct), so ICU parsing at runtime may
                      // not succeed (thus `icuExpression` remains a string).
                      // Note: we intentionally retain the error here by not using `ngDevMode`, because
                      // the value can change based on the locale and users aren't guaranteed to hit
                      // an invalid string while they're developing.
                      if (typeof icuExpression !== 'object') {
                          throw new Error(`Unable to parse ICU expression in "${message}" message.`);
                      }
                      const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);
                      const icuNodeIndex = icuContainerTNode.index;
                      ngDevMode &&
                          assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');
                      icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
                  }
              }
          }
          else {
              // Odd indexes are placeholders (elements and sub-templates)
              // At this point value is something like: '/#1:2' (originally coming from 'ï¿½/#1:2ï¿½')
              const isClosing = value.charCodeAt(0) === 47 /* SLASH */;
              const type = value.charCodeAt(isClosing ? 1 : 0);
              ngDevMode && assertOneOf(type, 42 /* STAR */, 35 /* HASH */);
              const index = HEADER_OFFSET + Number.parseInt(value.substring((isClosing ? 2 : 1)));
              if (isClosing) {
                  existingTNodeStack.shift();
                  setCurrentTNode(getCurrentParentTNode(), false);
              }
              else {
                  const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);
                  existingTNodeStack.unshift([]);
                  setCurrentTNode(tNode, true);
              }
          }
      }
      tView.data[index] = {
          create: createOpCodes,
          update: updateOpCodes,
      };
  }
  /**
   * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.
   *
   * @param tView Current `TView` needed to allocate space in i18n range.
   * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be
   *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.
   * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
   * @param lView Current `LView` needed to allocate space in i18n range.
   * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.
   * @param text Text to be added when the `Text` or `Comment` node will be created.
   * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.
   */
  function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {
      const i18nNodeIdx = allocExpando(tView, lView, 1, null);
      let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
      let parentTNode = getCurrentParentTNode();
      if (rootTNode === parentTNode) {
          // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.
          // (there is no parent), but in some circumstances (because we are inconsistent about how we set
          // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.
          parentTNode = null;
      }
      if (parentTNode === null) {
          // If we don't have a parent that means that we can eagerly add nodes.
          // If we have a parent than these nodes can't be added now (as the parent has not been created
          // yet) and instead the `parentTNode` is responsible for adding it. See
          // `TNode.insertBeforeIndex`
          opCode |= I18nCreateOpCode.APPEND_EAGERLY;
      }
      if (isICU) {
          opCode |= I18nCreateOpCode.COMMENT;
          ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
      }
      createOpCodes.push(opCode, text === null ? '' : text);
      // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the
      // bindings are.
      const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* Icu */ : 1 /* Text */, text === null ? (ngDevMode ? '{{?}}' : '') : text, null);
      addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
      const tNodeIdx = tNode.index;
      setCurrentTNode(tNode, false /* Text nodes are self closing */);
      if (parentTNode !== null && rootTNode !== parentTNode) {
          // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)
          // We have to make sure to add ourselves to the parent.
          setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
      }
      return tNode;
  }
  /**
   * Processes text node in i18n block.
   *
   * Text nodes can have:
   * - Create instruction in `createOpCodes` for creating the text node.
   * - Allocate spec for text node in i18n range of `LView`
   * - If contains binding:
   *    - bindings => allocate space in i18n range of `LView` to store the binding value.
   *    - populate `updateOpCodes` with update instructions.
   *
   * @param tView Current `TView`
   * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will
   *     be added as part of the `i18nStart` instruction or as part of the
   *     `TNode.insertBeforeIndex`.
   * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.
   * @param createOpCodes Location where the creation OpCodes will be stored.
   * @param lView Current `LView`
   * @param text The translated text (which may contain binding)
   */
  function i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {
      const hasBinding = text.match(BINDING_REGEXP);
      const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);
      if (hasBinding) {
          generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);
      }
  }
  /**
   * See `i18nAttributes` above.
   */
  function i18nAttributesFirstPass(tView, index, values) {
      const previousElement = getCurrentTNode();
      const previousElementIndex = previousElement.index;
      const updateOpCodes = [];
      if (ngDevMode) {
          attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
      }
      if (tView.firstCreatePass && tView.data[index] === null) {
          for (let i = 0; i < values.length; i += 2) {
              const attrName = values[i];
              const message = values[i + 1];
              if (message !== '') {
                  // Check if attribute value contains an ICU and throw an error if that's the case.
                  // ICUs in element attributes are not supported.
                  // Note: we intentionally retain the error here by not using `ngDevMode`, because
                  // the `value` can change based on the locale and users aren't guaranteed to hit
                  // an invalid string while they're developing.
                  if (ICU_REGEXP.test(message)) {
                      throw new Error(`ICU expressions are not supported in attributes. Message: "${message}".`);
                  }
                  // i18n attributes that hit this code path are guaranteed to have bindings, because
                  // the compiler treats static i18n attributes as regular attribute bindings.
                  // Since this may not be the first i18n attribute on this element we need to pass in how
                  // many previous bindings there have already been.
                  generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);
              }
          }
          tView.data[index] = updateOpCodes;
      }
  }
  /**
   * Generate the OpCodes to update the bindings of a string.
   *
   * @param updateOpCodes Place where the update opcodes will be stored.
   * @param str The string containing the bindings.
   * @param destinationNode Index of the destination node which will receive the binding.
   * @param attrName Name of the attribute, if the string belongs to an attribute.
   * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.
   * @param bindingStart The lView index of the next expression that can be bound via an opCode.
   * @returns The mask value for these bindings
   */
  function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {
      ngDevMode &&
          assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');
      const maskIndex = updateOpCodes.length; // Location of mask
      const sizeIndex = maskIndex + 1; // location of size for skipping
      updateOpCodes.push(null, null); // Alloc space for mask and size
      const startIndex = maskIndex + 2; // location of first allocation.
      if (ngDevMode) {
          attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
      }
      const textParts = str.split(BINDING_REGEXP);
      let mask = 0;
      for (let j = 0; j < textParts.length; j++) {
          const textValue = textParts[j];
          if (j & 1) {
              // Odd indexes are bindings
              const bindingIndex = bindingStart + parseInt(textValue, 10);
              updateOpCodes.push(-1 - bindingIndex);
              mask = mask | toMaskBit(bindingIndex);
          }
          else if (textValue !== '') {
              // Even indexes are text
              updateOpCodes.push(textValue);
          }
      }
      updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |
          (attrName ? 1 /* Attr */ : 0 /* Text */));
      if (attrName) {
          updateOpCodes.push(attrName, sanitizeFn);
      }
      updateOpCodes[maskIndex] = mask;
      updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
      return mask;
  }
  /**
   * Count the number of bindings in the given `opCodes`.
   *
   * It could be possible to speed this up, by passing the number of bindings found back from
   * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more
   * complexity in the code and/or transient objects to be created.
   *
   * Since this function is only called once when the template is instantiated, is trivial in the
   * first instance (since `opCodes` will be an empty array), and it is not common for elements to
   * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.
   */
  function countBindings(opCodes) {
      let count = 0;
      for (let i = 0; i < opCodes.length; i++) {
          const opCode = opCodes[i];
          // Bindings are negative numbers.
          if (typeof opCode === 'number' && opCode < 0) {
              count++;
          }
      }
      return count;
  }
  /**
   * Convert binding index to mask bit.
   *
   * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make
   * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to
   * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner
   * case is that we will execute binding code more often than necessary. (penalty of performance)
   */
  function toMaskBit(bindingIndex) {
      return 1 << Math.min(bindingIndex, 31);
  }
  function isRootTemplateMessage(subTemplateIndex) {
      return subTemplateIndex === -1;
  }
  /**
   * Removes everything inside the sub-templates of a message.
   */
  function removeInnerTemplateTranslation(message) {
      let match;
      let res = '';
      let index = 0;
      let inTemplate = false;
      let tagMatched;
      while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
          if (!inTemplate) {
              res += message.substring(index, match.index + match[0].length);
              tagMatched = match[1];
              inTemplate = true;
          }
          else {
              if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {
                  index = match.index;
                  inTemplate = false;
              }
          }
      }
      ngDevMode &&
          assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation "${message}"`);
      res += message.substr(index);
      return res;
  }
  /**
   * Extracts a part of a message and removes the rest.
   *
   * This method is used for extracting a part of the message associated with a template. A
   * translated message can span multiple templates.
   *
   * Example:
   * ```
   * <div i18n>Translate <span *ngIf>me</span>!</div>
   * ```
   *
   * @param message The message to crop
   * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the
   * external template and removes all sub-templates.
   */
  function getTranslationForTemplate(message, subTemplateIndex) {
      if (isRootTemplateMessage(subTemplateIndex)) {
          // We want the root template message, ignore all sub-templates
          return removeInnerTemplateTranslation(message);
      }
      else {
          // We want a specific sub-template
          const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;
          const end = message.search(new RegExp(`${MARKER}\\/\\*\\d+:${subTemplateIndex}${MARKER}`));
          return removeInnerTemplateTranslation(message.substring(start, end));
      }
  }
  /**
   * Generate the OpCodes for ICU expressions.
   *
   * @param icuExpression
   * @param index Index where the anchor is stored and an optional `TIcuContainerNode`
   *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.
   *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)
   */
  function icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
      ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');
      let bindingMask = 0;
      const tIcu = {
          type: icuExpression.type,
          currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
          anchorIdx,
          cases: [],
          create: [],
          remove: [],
          update: []
      };
      addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
      setTIcu(tView, anchorIdx, tIcu);
      const values = icuExpression.values;
      for (let i = 0; i < values.length; i++) {
          // Each value is an array of strings & other ICU expressions
          const valueArr = values[i];
          const nestedIcus = [];
          for (let j = 0; j < valueArr.length; j++) {
              const value = valueArr[j];
              if (typeof value !== 'string') {
                  // It is an nested ICU expression
                  const icuIndex = nestedIcus.push(value) - 1;
                  // Replace nested ICU expression by a comment node
                  valueArr[j] = `<!--ï¿½${icuIndex}ï¿½-->`;
              }
          }
          bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) |
              bindingMask;
      }
      if (bindingMask) {
          addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
      }
  }
  /**
   * Parses text containing an ICU expression and produces a JSON object for it.
   * Original code from closure library, modified for Angular.
   *
   * @param pattern Text containing an ICU expression that needs to be parsed.
   *
   */
  function parseICUBlock(pattern) {
      const cases = [];
      const values = [];
      let icuType = 1 /* plural */;
      let mainBinding = 0;
      pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {
          if (type === 'select') {
              icuType = 0 /* select */;
          }
          else {
              icuType = 1 /* plural */;
          }
          mainBinding = parseInt(binding.substr(1), 10);
          return '';
      });
      const parts = i18nParseTextIntoPartsAndICU(pattern);
      // Looking for (key block)+ sequence. One of the keys has to be "other".
      for (let pos = 0; pos < parts.length;) {
          let key = parts[pos++].trim();
          if (icuType === 1 /* plural */) {
              // Key can be "=x", we just want "x"
              key = key.replace(/\s*(?:=)?(\w+)\s*/, '$1');
          }
          if (key.length) {
              cases.push(key);
          }
          const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);
          if (cases.length > values.length) {
              values.push(blocks);
          }
      }
      // TODO(ocombe): support ICU expressions in attributes, see #21615
      return { type: icuType, mainBinding: mainBinding, cases, values };
  }
  /**
   * Breaks pattern into strings and top level {...} blocks.
   * Can be used to break a message into text and ICU expressions, or to break an ICU expression
   * into keys and cases. Original code from closure library, modified for Angular.
   *
   * @param pattern (sub)Pattern to be broken.
   * @returns An `Array<string|IcuExpression>` where:
   *   - odd positions: `string` => text between ICU expressions
   *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.
   */
  function i18nParseTextIntoPartsAndICU(pattern) {
      if (!pattern) {
          return [];
      }
      let prevPos = 0;
      const braceStack = [];
      const results = [];
      const braces = /[{}]/g;
      // lastIndex doesn't get set to 0 so we have to.
      braces.lastIndex = 0;
      let match;
      while (match = braces.exec(pattern)) {
          const pos = match.index;
          if (match[0] == '}') {
              braceStack.pop();
              if (braceStack.length == 0) {
                  // End of the block.
                  const block = pattern.substring(prevPos, pos);
                  if (ICU_BLOCK_REGEXP.test(block)) {
                      results.push(parseICUBlock(block));
                  }
                  else {
                      results.push(block);
                  }
                  prevPos = pos + 1;
              }
          }
          else {
              if (braceStack.length == 0) {
                  const substring = pattern.substring(prevPos, pos);
                  results.push(substring);
                  prevPos = pos + 1;
              }
              braceStack.push('{');
          }
      }
      const substring = pattern.substring(prevPos);
      results.push(substring);
      return results;
  }
  /**
   * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.
   *
   */
  function parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
      const create = [];
      const remove = [];
      const update = [];
      if (ngDevMode) {
          attachDebugGetter(create, icuCreateOpCodesToString);
          attachDebugGetter(remove, i18nRemoveOpCodesToString);
          attachDebugGetter(update, i18nUpdateOpCodesToString);
      }
      tIcu.cases.push(caseName);
      tIcu.create.push(create);
      tIcu.remove.push(remove);
      tIcu.update.push(update);
      const inertBodyHelper = getInertBodyHelper(getDocument());
      const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);
      ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');
      const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;
      if (inertRootNode) {
          return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);
      }
      else {
          return 0;
      }
  }
  function walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {
      let bindingMask = 0;
      let currentNode = parentNode.firstChild;
      while (currentNode) {
          const newIndex = allocExpando(tView, lView, 1, null);
          switch (currentNode.nodeType) {
              case Node.ELEMENT_NODE:
                  const element = currentNode;
                  const tagName = element.tagName.toLowerCase();
                  if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
                      addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
                      tView.data[newIndex] = tagName;
                      const elAttrs = element.attributes;
                      for (let i = 0; i < elAttrs.length; i++) {
                          const attr = elAttrs.item(i);
                          const lowerAttrName = attr.name.toLowerCase();
                          const hasBinding = !!attr.value.match(BINDING_REGEXP);
                          // we assume the input string is safe, unless it's using a binding
                          if (hasBinding) {
                              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                                  if (URI_ATTRS[lowerAttrName]) {
                                      generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);
                                  }
                                  else if (SRCSET_ATTRS[lowerAttrName]) {
                                      generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, sanitizeSrcset);
                                  }
                                  else {
                                      generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);
                                  }
                              }
                              else {
                                  ngDevMode &&
                                      console.warn(`WARNING: ignoring unsafe attribute value ` +
                                          `${lowerAttrName} on element ${tagName} ` +
                                          `(see https://g.co/ng/security#xss)`);
                              }
                          }
                          else {
                              addCreateAttribute(create, newIndex, attr);
                          }
                      }
                      // Parse the children of this node (if any)
                      bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) |
                          bindingMask;
                      addRemoveNode(remove, newIndex, depth);
                  }
                  break;
              case Node.TEXT_NODE:
                  const value = currentNode.textContent || '';
                  const hasBinding = value.match(BINDING_REGEXP);
                  addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);
                  addRemoveNode(remove, newIndex, depth);
                  if (hasBinding) {
                      bindingMask =
                          generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;
                  }
                  break;
              case Node.COMMENT_NODE:
                  // Check if the comment node is a placeholder for a nested ICU
                  const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');
                  if (isNestedIcu) {
                      const nestedIcuIndex = parseInt(isNestedIcu[1], 10);
                      const icuExpression = nestedIcus[nestedIcuIndex];
                      // Create the comment node that will anchor the ICU expression
                      addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);
                      icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
                      addRemoveNestedIcu(remove, newIndex, depth);
                  }
                  break;
          }
          currentNode = currentNode.nextSibling;
      }
      return bindingMask;
  }
  function addRemoveNode(remove, index, depth) {
      if (depth === 0) {
          remove.push(index);
      }
  }
  function addRemoveNestedIcu(remove, index, depth) {
      if (depth === 0) {
          remove.push(~index); // remove ICU at `index`
          remove.push(index); // remove ICU comment at `index`
      }
  }
  function addUpdateIcuSwitch(update, icuExpression, index) {
      update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */);
  }
  function addUpdateIcuUpdate(update, bindingMask, index) {
      update.push(bindingMask, 1, index << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */);
  }
  function addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {
      if (marker !== null) {
          create.push(marker);
      }
      create.push(text, createAtIdx, icuCreateOpCode(0 /* AppendChild */, appendToParentIdx, createAtIdx));
  }
  function addCreateAttribute(create, newIndex, attr) {
      create.push(newIndex << 1 /* SHIFT_REF */ | 1 /* Attr */, attr.name, attr.value);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // i18nPostprocess consts
  const ROOT_TEMPLATE_ID = 0;
  const PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(ï¿½.+?ï¿½?)\]/;
  const PP_PLACEHOLDERS_REGEXP = /\[(ï¿½.+?ï¿½?)\]|(ï¿½\/?\*\d+:\d+ï¿½)/g;
  const PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
  const PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
  const PP_ICUS_REGEXP = /ï¿½I18N_EXP_(ICU(_\d+)?)ï¿½/g;
  const PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
  const PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
  /**
   * Handles message string post-processing for internationalization.
   *
   * Handles message string post-processing by transforming it from intermediate
   * format (that might contain some markers that we need to replace) to the final
   * form, consumable by i18nStart instruction. Post processing steps include:
   *
   * 1. Resolve all multi-value cases (like [ï¿½*1:1ï¿½ï¿½#2:1ï¿½|ï¿½#4:1ï¿½|ï¿½5ï¿½])
   * 2. Replace all ICU vars (like "VAR_PLURAL")
   * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
   * 4. Replace all ICU references with corresponding values (like ï¿½ICU_EXP_ICU_1ï¿½)
   *    in case multiple ICUs have the same placeholder name
   *
   * @param message Raw translation string for post processing
   * @param replacements Set of replacements that should be applied
   *
   * @returns Transformed string that can be consumed by i18nStart instruction
   *
   * @codeGenApi
   */
  function i18nPostprocess(message, replacements = {}) {
      /**
       * Step 1: resolve all multi-value placeholders like [ï¿½#5ï¿½|ï¿½*1:1ï¿½ï¿½#2:1ï¿½|ï¿½#4:1ï¿½]
       *
       * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically
       * grouped by templates, for example: [ï¿½#5ï¿½|ï¿½#6ï¿½|ï¿½#1:1ï¿½|ï¿½#3:2ï¿½] where ï¿½#5ï¿½ and ï¿½#6ï¿½ belong to root
       * template, ï¿½#1:1ï¿½ belong to nested template with index 1 and ï¿½#1:2ï¿½ - nested template with index
       * 3. However in real templates the order might be different: i.e. ï¿½#1:1ï¿½ and/or ï¿½#3:2ï¿½ may go in
       * front of ï¿½#6ï¿½. The post processing step restores the right order by keeping track of the
       * template id stack and looks for placeholders that belong to the currently active template.
       */
      let result = message;
      if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
          const matches = {};
          const templateIdsStack = [ROOT_TEMPLATE_ID];
          result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {
              const content = phs || tmpl;
              const placeholders = matches[content] || [];
              if (!placeholders.length) {
                  content.split('|').forEach((placeholder) => {
                      const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);
                      const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;
                      const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);
                      placeholders.push([templateId, isCloseTemplateTag, placeholder]);
                  });
                  matches[content] = placeholders;
              }
              if (!placeholders.length) {
                  throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);
              }
              const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
              let idx = 0;
              // find placeholder index that matches current template id
              for (let i = 0; i < placeholders.length; i++) {
                  if (placeholders[i][0] === currentTemplateId) {
                      idx = i;
                      break;
                  }
              }
              // update template id stack based on the current tag extracted
              const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];
              if (isCloseTemplateTag) {
                  templateIdsStack.pop();
              }
              else if (currentTemplateId !== templateId) {
                  templateIdsStack.push(templateId);
              }
              // remove processed tag from the list
              placeholders.splice(idx, 1);
              return placeholder;
          });
      }
      // return current result if no replacements specified
      if (!Object.keys(replacements).length) {
          return result;
      }
      /**
       * Step 2: replace all ICU vars (like "VAR_PLURAL")
       */
      result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {
          return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;
      });
      /**
       * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
       */
      result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {
          return replacements.hasOwnProperty(key) ? replacements[key] : match;
      });
      /**
       * Step 4: replace all ICU references with corresponding values (like ï¿½ICU_EXP_ICU_1ï¿½) in case
       * multiple ICUs have the same placeholder name
       */
      result = result.replace(PP_ICUS_REGEXP, (match, key) => {
          if (replacements.hasOwnProperty(key)) {
              const list = replacements[key];
              if (!list.length) {
                  throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);
              }
              return list.shift();
          }
          return match;
      });
      return result;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Marks a block of text as translatable.
   *
   * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.
   * The translation `message` is the value which is locale specific. The translation string may
   * contain placeholders which associate inner elements and sub-templates within the translation.
   *
   * The translation `message` placeholders are:
   * - `ï¿½{index}(:{block})ï¿½`: *Binding Placeholder*: Marks a location where an expression will be
   *   interpolated into. The placeholder `index` points to the expression binding index. An optional
   *   `block` that matches the sub-template in which it was declared.
   * - `ï¿½#{index}(:{block})ï¿½`/`ï¿½/#{index}(:{block})ï¿½`: *Element Placeholder*:  Marks the beginning
   *   and end of DOM element that were embedded in the original translation block. The placeholder
   *   `index` points to the element index in the template instructions set. An optional `block` that
   *   matches the sub-template in which it was declared.
   * - `ï¿½*{index}:{block}ï¿½`/`ï¿½/*{index}:{block}ï¿½`: *Sub-template Placeholder*: Sub-templates must be
   *   split up and translated separately in each angular template function. The `index` points to the
   *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
   *
   * @param index A unique index of the translation in the static block.
   * @param messageIndex An index of the translation message from the `def.consts` array.
   * @param subTemplateIndex Optional sub-template index in the `message`.
   *
   * @codeGenApi
   */
  function ÉµÉµi18nStart(index, messageIndex, subTemplateIndex = -1) {
      const tView = getTView();
      const lView = getLView();
      const adjustedIndex = HEADER_OFFSET + index;
      ngDevMode && assertDefined(tView, `tView should be defined`);
      const message = getConstant(tView.consts, messageIndex);
      const parentTNode = getCurrentParentTNode();
      if (tView.firstCreatePass) {
          i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
      }
      const tI18n = tView.data[adjustedIndex];
      const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
      const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);
      // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.
      // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.
      const insertInFrontOf = parentTNode && (parentTNode.type & 8 /* ElementContainer */) ?
          lView[parentTNode.index] :
          null;
      applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
      setInI18nBlock(true);
  }
  /**
   * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes
   * into the render tree, moves the placeholder nodes and removes the deleted nodes.
   *
   * @codeGenApi
   */
  function ÉµÉµi18nEnd() {
      setInI18nBlock(false);
  }
  /**
   *
   * Use this instruction to create a translation block that doesn't contain any placeholder.
   * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.
   *
   * The translation `message` is the value which is locale specific. The translation string may
   * contain placeholders which associate inner elements and sub-templates within the translation.
   *
   * The translation `message` placeholders are:
   * - `ï¿½{index}(:{block})ï¿½`: *Binding Placeholder*: Marks a location where an expression will be
   *   interpolated into. The placeholder `index` points to the expression binding index. An optional
   *   `block` that matches the sub-template in which it was declared.
   * - `ï¿½#{index}(:{block})ï¿½`/`ï¿½/#{index}(:{block})ï¿½`: *Element Placeholder*:  Marks the beginning
   *   and end of DOM element that were embedded in the original translation block. The placeholder
   *   `index` points to the element index in the template instructions set. An optional `block` that
   *   matches the sub-template in which it was declared.
   * - `ï¿½*{index}:{block}ï¿½`/`ï¿½/*{index}:{block}ï¿½`: *Sub-template Placeholder*: Sub-templates must be
   *   split up and translated separately in each angular template function. The `index` points to the
   *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
   *
   * @param index A unique index of the translation in the static block.
   * @param messageIndex An index of the translation message from the `def.consts` array.
   * @param subTemplateIndex Optional sub-template index in the `message`.
   *
   * @codeGenApi
   */
  function ÉµÉµi18n(index, messageIndex, subTemplateIndex) {
      ÉµÉµi18nStart(index, messageIndex, subTemplateIndex);
      ÉµÉµi18nEnd();
  }
  /**
   * Marks a list of attributes as translatable.
   *
   * @param index A unique index in the static block
   * @param values
   *
   * @codeGenApi
   */
  function ÉµÉµi18nAttributes(index, attrsIndex) {
      const tView = getTView();
      ngDevMode && assertDefined(tView, `tView should be defined`);
      const attrs = getConstant(tView.consts, attrsIndex);
      i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
  }
  /**
   * Stores the values of the bindings during each update cycle in order to determine if we need to
   * update the translated nodes.
   *
   * @param value The binding's value
   * @returns This function returns itself so that it may be chained
   * (e.g. `i18nExp(ctx.name)(ctx.title)`)
   *
   * @codeGenApi
   */
  function ÉµÉµi18nExp(value) {
      const lView = getLView();
      setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
      return ÉµÉµi18nExp;
  }
  /**
   * Updates a translation block or an i18n attribute when the bindings have changed.
   *
   * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}
   * (i18n attribute) on which it should update the content.
   *
   * @codeGenApi
   */
  function ÉµÉµi18nApply(index) {
      applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
  }
  /**
   * Handles message string post-processing for internationalization.
   *
   * Handles message string post-processing by transforming it from intermediate
   * format (that might contain some markers that we need to replace) to the final
   * form, consumable by i18nStart instruction. Post processing steps include:
   *
   * 1. Resolve all multi-value cases (like [ï¿½*1:1ï¿½ï¿½#2:1ï¿½|ï¿½#4:1ï¿½|ï¿½5ï¿½])
   * 2. Replace all ICU vars (like "VAR_PLURAL")
   * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
   * 4. Replace all ICU references with corresponding values (like ï¿½ICU_EXP_ICU_1ï¿½)
   *    in case multiple ICUs have the same placeholder name
   *
   * @param message Raw translation string for post processing
   * @param replacements Set of replacements that should be applied
   *
   * @returns Transformed string that can be consumed by i18nStart instruction
   *
   * @codeGenApi
   */
  function ÉµÉµi18nPostprocess(message, replacements = {}) {
      return i18nPostprocess(message, replacements);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Resolves the providers which are defined in the DirectiveDef.
   *
   * When inserting the tokens and the factories in their respective arrays, we can assume that
   * this method is called first for the component (if any), and then for other directives on the same
   * node.
   * As a consequence,the providers are always processed in that order:
   * 1) The view providers of the component
   * 2) The providers of the component
   * 3) The providers of the other directives
   * This matches the structure of the injectables arrays of a view (for each node).
   * So the tokens and the factories can be pushed at the end of the arrays, except
   * in one case for multi providers.
   *
   * @param def the directive definition
   * @param providers: Array of `providers`.
   * @param viewProviders: Array of `viewProviders`.
   */
  function providersResolver(def, providers, viewProviders) {
      const tView = getTView();
      if (tView.firstCreatePass) {
          const isComponent = isComponentDef(def);
          // The list of view providers is processed first, and the flags are updated
          resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);
          // Then, the list of providers is processed, and the flags are updated
          resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);
      }
  }
  /**
   * Resolves a provider and publishes it to the DI system.
   */
  function resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {
      provider = resolveForwardRef(provider);
      if (Array.isArray(provider)) {
          // Recursively call `resolveProvider`
          // Recursion is OK in this case because this code will not be in hot-path once we implement
          // cloning of the initial state.
          for (let i = 0; i < provider.length; i++) {
              resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);
          }
      }
      else {
          const tView = getTView();
          const lView = getLView();
          let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
          let providerFactory = providerToFactory(provider);
          const tNode = getCurrentTNode();
          const beginIndex = tNode.providerIndexes & 1048575 /* ProvidersStartIndexMask */;
          const endIndex = tNode.directiveStart;
          const cptViewProvidersCount = tNode.providerIndexes >> 20 /* CptViewProvidersCountShift */;
          if (isTypeProvider(provider) || !provider.multi) {
              // Single provider case: the factory is created and pushed immediately
              const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ÉµÉµdirectiveInject);
              const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);
              if (existingFactoryIndex === -1) {
                  diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
                  registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
                  tInjectables.push(token);
                  tNode.directiveStart++;
                  tNode.directiveEnd++;
                  if (isViewProvider) {
                      tNode.providerIndexes += 1048576 /* CptViewProvidersCountShifter */;
                  }
                  lInjectablesBlueprint.push(factory);
                  lView.push(factory);
              }
              else {
                  lInjectablesBlueprint[existingFactoryIndex] = factory;
                  lView[existingFactoryIndex] = factory;
              }
          }
          else {
              // Multi provider case:
              // We create a multi factory which is going to aggregate all the values.
              // Since the output of such a factory depends on content or view injection,
              // we create two of them, which are linked together.
              //
              // The first one (for view providers) is always in the first block of the injectables array,
              // and the second one (for providers) is always in the second block.
              // This is important because view providers have higher priority. When a multi token
              // is being looked up, the view providers should be found first.
              // Note that it is not possible to have a multi factory in the third block (directive block).
              //
              // The algorithm to process multi providers is as follows:
              // 1) If the multi provider comes from the `viewProviders` of the component:
              //   a) If the special view providers factory doesn't exist, it is created and pushed.
              //   b) Else, the multi provider is added to the existing multi factory.
              // 2) If the multi provider comes from the `providers` of the component or of another
              // directive:
              //   a) If the multi factory doesn't exist, it is created and provider pushed into it.
              //      It is also linked to the multi factory for view providers, if it exists.
              //   b) Else, the multi provider is added to the existing multi factory.
              const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
              const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
              const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&
                  lInjectablesBlueprint[existingProvidersFactoryIndex];
              const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&
                  lInjectablesBlueprint[existingViewProvidersFactoryIndex];
              if (isViewProvider && !doesViewProvidersFactoryExist ||
                  !isViewProvider && !doesProvidersFactoryExist) {
                  // Cases 1.a and 2.a
                  diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
                  const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);
                  if (!isViewProvider && doesViewProvidersFactoryExist) {
                      lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;
                  }
                  registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
                  tInjectables.push(token);
                  tNode.directiveStart++;
                  tNode.directiveEnd++;
                  if (isViewProvider) {
                      tNode.providerIndexes += 1048576 /* CptViewProvidersCountShifter */;
                  }
                  lInjectablesBlueprint.push(factory);
                  lView.push(factory);
              }
              else {
                  // Cases 1.b and 2.b
                  const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex :
                      existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);
                  registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex :
                      existingViewProvidersFactoryIndex, indexInFactory);
              }
              if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {
                  lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
              }
          }
      }
  }
  /**
   * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.
   * @param tView `TView` in which to register the hook.
   * @param provider Provider whose hook should be registered.
   * @param contextIndex Index under which to find the context for the hook when it's being invoked.
   * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi
   * provider factory.
   */
  function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
      const providerIsTypeProvider = isTypeProvider(provider);
      const providerIsClassProvider = isClassProvider(provider);
      if (providerIsTypeProvider || providerIsClassProvider) {
          // Resolve forward references as `useClass` can hold a forward reference.
          const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;
          const prototype = classToken.prototype;
          const ngOnDestroy = prototype.ngOnDestroy;
          if (ngOnDestroy) {
              const hooks = tView.destroyHooks || (tView.destroyHooks = []);
              if (!providerIsTypeProvider && provider.multi) {
                  ngDevMode &&
                      assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');
                  const existingCallbacksIndex = hooks.indexOf(contextIndex);
                  if (existingCallbacksIndex === -1) {
                      hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
                  }
                  else {
                      hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
                  }
              }
              else {
                  hooks.push(contextIndex, ngOnDestroy);
              }
          }
      }
  }
  /**
   * Add a factory in a multi factory.
   * @returns Index at which the factory was inserted.
   */
  function multiFactoryAdd(multiFactory, factory, isComponentProvider) {
      if (isComponentProvider) {
          multiFactory.componentProviders++;
      }
      return multiFactory.multi.push(factory) - 1;
  }
  /**
   * Returns the index of item in the array, but only in the begin to end range.
   */
  function indexOf(item, arr, begin, end) {
      for (let i = begin; i < end; i++) {
          if (arr[i] === item)
              return i;
      }
      return -1;
  }
  /**
   * Use this with `multi` `providers`.
   */
  function multiProvidersFactoryResolver(_, tData, lData, tNode) {
      return multiResolve(this.multi, []);
  }
  /**
   * Use this with `multi` `viewProviders`.
   *
   * This factory knows how to concatenate itself with the existing `multi` `providers`.
   */
  function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
      const factories = this.multi;
      let result;
      if (this.providerFactory) {
          const componentCount = this.providerFactory.componentProviders;
          const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);
          // Copy the section of the array which contains `multi` `providers` from the component
          result = multiProviders.slice(0, componentCount);
          // Insert the `viewProvider` instances.
          multiResolve(factories, result);
          // Copy the section of the array which contains `multi` `providers` from other directives
          for (let i = componentCount; i < multiProviders.length; i++) {
              result.push(multiProviders[i]);
          }
      }
      else {
          result = [];
          // Insert the `viewProvider` instances.
          multiResolve(factories, result);
      }
      return result;
  }
  /**
   * Maps an array of factories into an array of values.
   */
  function multiResolve(factories, result) {
      for (let i = 0; i < factories.length; i++) {
          const factory = factories[i];
          result.push(factory());
      }
      return result;
  }
  /**
   * Creates a multi factory.
   */
  function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {
      const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ÉµÉµdirectiveInject);
      factory.multi = [];
      factory.index = index;
      factory.componentProviders = 0;
      multiFactoryAdd(factory, f, isComponent && !isViewProvider);
      return factory;
  }
  
  /**
   * This feature resolves the providers of a directive (or component),
   * and publish them into the DI system, making it visible to others for injection.
   *
   * For example:
   * ```ts
   * class ComponentWithProviders {
   *   constructor(private greeter: GreeterDE) {}
   *
   *   static Éµcmp = defineComponent({
   *     type: ComponentWithProviders,
   *     selectors: [['component-with-providers']],
   *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),
   *    decls: 1,
   *    vars: 1,
   *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {
   *      if (fs & RenderFlags.Create) {
   *        ÉµÉµtext(0);
   *      }
   *      if (fs & RenderFlags.Update) {
   *        ÉµÉµtextInterpolate(ctx.greeter.greet());
   *      }
   *    },
   *    features: [ÉµÉµProvidersFeature([GreeterDE])]
   *  });
   * }
   * ```
   *
   * @param definition
   *
   * @codeGenApi
   */
  function ÉµÉµProvidersFeature(providers, viewProviders = []) {
      return (definition) => {
          definition.providersResolver =
              (def, processProvidersFn) => {
                  return providersResolver(def, //
                  processProvidersFn ? processProvidersFn(providers) : providers, //
                  viewProviders);
              };
      };
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Represents a component created by a `ComponentFactory`.
   * Provides access to the component instance and related objects,
   * and provides the means of destroying the instance.
   *
   * @publicApi
   */
  class ComponentRef$1 {
  }
  /**
   * Base class for a factory that can create a component dynamically.
   * Instantiate a factory for a given type of component with `resolveComponentFactory()`.
   * Use the resulting `ComponentFactory.create()` method to create a component of that type.
   *
   * @see [Dynamic Components](guide/dynamic-component-loader)
   *
   * @publicApi
   *
   * @deprecated Angular no longer requires Component factories. Please use other APIs where
   *     Component class can be used directly.
   */
  class ComponentFactory$1 {
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function noComponentFactoryError(component) {
      const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);
      error[ERROR_COMPONENT] = component;
      return error;
  }
  const ERROR_COMPONENT = 'ngComponent';
  function getComponent(error) {
      return error[ERROR_COMPONENT];
  }
  class _NullComponentFactoryResolver {
      resolveComponentFactory(component) {
          throw noComponentFactoryError(component);
      }
  }
  /**
   * A simple registry that maps `Components` to generated `ComponentFactory` classes
   * that can be used to create instances of components.
   * Use to obtain the factory for a given component type,
   * then use the factory's `create()` method to create a component of that type.
   *
   * Note: since v13, dynamic component creation via
   * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)
   * does **not** require resolving component factory: component class can be used directly.
   *
   * @publicApi
   *
   * @deprecated Angular no longer requires Component factories. Please use other APIs where
   *     Component class can be used directly.
   */
  class ComponentFactoryResolver$1 {
  }
  ComponentFactoryResolver$1.NULL = ( /* @__PURE__ */new _NullComponentFactoryResolver());
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Creates an ElementRef from the most recent node.
   *
   * @returns The ElementRef instance to use
   */
  function injectElementRef() {
      return createElementRef(getCurrentTNode(), getLView());
  }
  /**
   * Creates an ElementRef given a node.
   *
   * @param tNode The node for which you'd like an ElementRef
   * @param lView The view to which the node belongs
   * @returns The ElementRef instance to use
   */
  function createElementRef(tNode, lView) {
      return new ElementRef(getNativeByTNode(tNode, lView));
  }
  /**
   * A wrapper around a native element inside of a View.
   *
   * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
   * element.
   *
   * @security Permitting direct access to the DOM can make your application more vulnerable to
   * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
   * [Security Guide](https://g.co/ng/security).
   *
   * @publicApi
   */
  // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
  // i.e. users have to ask for what they need. With that, we can build better analysis tools
  // and could do better codegen in the future.
  class ElementRef {
      constructor(nativeElement) {
          this.nativeElement = nativeElement;
      }
  }
  /**
   * @internal
   * @nocollapse
   */
  ElementRef.__NG_ELEMENT_ID__ = injectElementRef;
  /**
   * Unwraps `ElementRef` and return the `nativeElement`.
   *
   * @param value value to unwrap
   * @returns `nativeElement` if `ElementRef` otherwise returns value as is.
   */
  function unwrapElementRef(value) {
      return value instanceof ElementRef ? value.nativeElement : value;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
  /**
   * Creates and initializes a custom renderer that implements the `Renderer2` base class.
   *
   * @publicApi
   */
  class RendererFactory2 {
  }
  /**
   * Extend this base class to implement custom rendering. By default, Angular
   * renders a template into DOM. You can use custom rendering to intercept
   * rendering calls, or to render to something other than DOM.
   *
   * Create your custom renderer using `RendererFactory2`.
   *
   * Use a custom renderer to bypass Angular's templating and
   * make custom UI changes that can't be expressed declaratively.
   * For example if you need to set a property or an attribute whose name is
   * not statically known, use the `setProperty()` or
   * `setAttribute()` method.
   *
   * @publicApi
   */
  class Renderer2 {
  }
  /**
   * @internal
   * @nocollapse
   */
  Renderer2.__NG_ELEMENT_ID__ = () => injectRenderer2();
  /** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */
  function getOrCreateRenderer2(lView) {
      const renderer = lView[RENDERER];
      if (ngDevMode && !isProceduralRenderer(renderer)) {
          throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');
      }
      return renderer;
  }
  /** Injects a Renderer2 for the current component. */
  function injectRenderer2() {
      // We need the Renderer to be based on the component that it's being injected into, however since
      // DI happens before we've entered its view, `getLView` will return the parent view instead.
      const lView = getLView();
      const tNode = getCurrentTNode();
      const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
      return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Sanitizer is used by the views to sanitize potentially dangerous values.
   *
   * @publicApi
   */
  class Sanitizer {
  }
  /** @nocollapse */
  Sanitizer.Éµprov = ÉµÉµdefineInjectable({
      token: Sanitizer,
      providedIn: 'root',
      factory: () => null,
  });
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @description Represents the version of Angular
   *
   * @publicApi
   */
  class Version {
      constructor(full) {
          this.full = full;
          this.major = full.split('.')[0];
          this.minor = full.split('.')[1];
          this.patch = full.split('.').slice(2).join('.');
      }
  }
  /**
   * @publicApi
   */
  const VERSION = new Version('13.3.6');
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // This default value is when checking the hierarchy for a token.
  //
  // It means both:
  // - the token is not provided by the current injector,
  // - only the element injectors should be checked (ie do not check module injectors
  //
  //          mod1
  //         /
  //       el1   mod2
  //         \  /
  //         el2
  //
  // When requesting el2.injector.get(token), we should check in the following order and return the
  // first found value:
  // - el2.injector.get(token, default)
  // - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
  // - mod2.injector.get(token, default)
  const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function collectNativeNodes(tView, lView, tNode, result, isProjection = false) {
      while (tNode !== null) {
          ngDevMode &&
              assertTNodeType(tNode, 3 /* AnyRNode */ | 12 /* AnyContainer */ | 16 /* Projection */ | 32 /* Icu */);
          const lNode = lView[tNode.index];
          if (lNode !== null) {
              result.push(unwrapRNode(lNode));
          }
          // A given lNode can represent either a native node or a LContainer (when it is a host of a
          // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes
          // from the views in this container.
          if (isLContainer(lNode)) {
              for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {
                  const lViewInAContainer = lNode[i];
                  const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;
                  if (lViewFirstChildTNode !== null) {
                      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
                  }
              }
          }
          const tNodeType = tNode.type;
          if (tNodeType & 8 /* ElementContainer */) {
              collectNativeNodes(tView, lView, tNode.child, result);
          }
          else if (tNodeType & 32 /* Icu */) {
              const nextRNode = icuContainerIterate(tNode, lView);
              let rNode;
              while (rNode = nextRNode()) {
                  result.push(rNode);
              }
          }
          else if (tNodeType & 16 /* Projection */) {
              const nodesInSlot = getProjectionNodes(lView, tNode);
              if (Array.isArray(nodesInSlot)) {
                  result.push(...nodesInSlot);
              }
              else {
                  const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
                  ngDevMode && assertParentView(parentView);
                  collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
              }
          }
          tNode = isProjection ? tNode.projectionNext : tNode.next;
      }
      return result;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class ViewRef$1 {
      constructor(
      /**
       * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.
       *
       * When ViewRef is created for a dynamic component, this also represents the `LView` for the
       * component.
       *
       * For a "regular" ViewRef created for an embedded view, this is the `LView` for the embedded
       * view.
       *
       * @internal
       */
      _lView, 
      /**
       * This represents the `LView` associated with the point where `ChangeDetectorRef` was
       * requested.
       *
       * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.
       */
      _cdRefInjectingView) {
          this._lView = _lView;
          this._cdRefInjectingView = _cdRefInjectingView;
          this._appRef = null;
          this._attachedToViewContainer = false;
      }
      get rootNodes() {
          const lView = this._lView;
          const tView = lView[TVIEW];
          return collectNativeNodes(tView, lView, tView.firstChild, []);
      }
      get context() {
          return this._lView[CONTEXT];
      }
      set context(value) {
          this._lView[CONTEXT] = value;
      }
      get destroyed() {
          return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;
      }
      destroy() {
          if (this._appRef) {
              this._appRef.detachView(this);
          }
          else if (this._attachedToViewContainer) {
              const parent = this._lView[PARENT];
              if (isLContainer(parent)) {
                  const viewRefs = parent[VIEW_REFS];
                  const index = viewRefs ? viewRefs.indexOf(this) : -1;
                  if (index > -1) {
                      ngDevMode &&
                          assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');
                      detachView(parent, index);
                      removeFromArray(viewRefs, index);
                  }
              }
              this._attachedToViewContainer = false;
          }
          destroyLView(this._lView[TVIEW], this._lView);
      }
      onDestroy(callback) {
          storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);
      }
      /**
       * Marks a view and all of its ancestors dirty.
       *
       * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is
       * checked when it needs to be re-rendered but the two normal triggers haven't marked it
       * dirty (i.e. inputs haven't changed and events haven't fired in the view).
       *
       * <!-- TODO: Add a link to a chapter on OnPush components -->
       *
       * @usageNotes
       * ### Example
       *
       * ```typescript
       * @Component({
       *   selector: 'app-root',
       *   template: `Number of ticks: {{numberOfTicks}}`
       *   changeDetection: ChangeDetectionStrategy.OnPush,
       * })
       * class AppComponent {
       *   numberOfTicks = 0;
       *
       *   constructor(private ref: ChangeDetectorRef) {
       *     setInterval(() => {
       *       this.numberOfTicks++;
       *       // the following is required, otherwise the view will not be updated
       *       this.ref.markForCheck();
       *     }, 1000);
       *   }
       * }
       * ```
       */
      markForCheck() {
          markViewDirty(this._cdRefInjectingView || this._lView);
      }
      /**
       * Detaches the view from the change detection tree.
       *
       * Detached views will not be checked during change detection runs until they are
       * re-attached, even if they are dirty. `detach` can be used in combination with
       * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change
       * detection checks.
       *
       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
       * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
       *
       * @usageNotes
       * ### Example
       *
       * The following example defines a component with a large list of readonly data.
       * Imagine the data changes constantly, many times per second. For performance reasons,
       * we want to check and update the list every five seconds. We can do that by detaching
       * the component's change detector and doing a local check every five seconds.
       *
       * ```typescript
       * class DataProvider {
       *   // in a real application the returned data will be different every time
       *   get data() {
       *     return [1,2,3,4,5];
       *   }
       * }
       *
       * @Component({
       *   selector: 'giant-list',
       *   template: `
       *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
       *   `,
       * })
       * class GiantList {
       *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
       *     ref.detach();
       *     setInterval(() => {
       *       this.ref.detectChanges();
       *     }, 5000);
       *   }
       * }
       *
       * @Component({
       *   selector: 'app',
       *   providers: [DataProvider],
       *   template: `
       *     <giant-list><giant-list>
       *   `,
       * })
       * class App {
       * }
       * ```
       */
      detach() {
          this._lView[FLAGS] &= ~128 /* Attached */;
      }
      /**
       * Re-attaches a view to the change detection tree.
       *
       * This can be used to re-attach views that were previously detached from the tree
       * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.
       *
       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
       *
       * @usageNotes
       * ### Example
       *
       * The following example creates a component displaying `live` data. The component will detach
       * its change detector from the main change detector tree when the component's live property
       * is set to false.
       *
       * ```typescript
       * class DataProvider {
       *   data = 1;
       *
       *   constructor() {
       *     setInterval(() => {
       *       this.data = this.data * 2;
       *     }, 500);
       *   }
       * }
       *
       * @Component({
       *   selector: 'live-data',
       *   inputs: ['live'],
       *   template: 'Data: {{dataProvider.data}}'
       * })
       * class LiveData {
       *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
       *
       *   set live(value) {
       *     if (value) {
       *       this.ref.reattach();
       *     } else {
       *       this.ref.detach();
       *     }
       *   }
       * }
       *
       * @Component({
       *   selector: 'app-root',
       *   providers: [DataProvider],
       *   template: `
       *     Live Update: <input type="checkbox" [(ngModel)]="live">
       *     <live-data [live]="live"><live-data>
       *   `,
       * })
       * class AppComponent {
       *   live = true;
       * }
       * ```
       */
      reattach() {
          this._lView[FLAGS] |= 128 /* Attached */;
      }
      /**
       * Checks the view and its children.
       *
       * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement
       * local change detection checks.
       *
       * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
       * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
       *
       * @usageNotes
       * ### Example
       *
       * The following example defines a component with a large list of readonly data.
       * Imagine, the data changes constantly, many times per second. For performance reasons,
       * we want to check and update the list every five seconds.
       *
       * We can do that by detaching the component's change detector and doing a local change detection
       * check every five seconds.
       *
       * See {@link ChangeDetectorRef#detach detach} for more information.
       */
      detectChanges() {
          detectChangesInternal(this._lView[TVIEW], this._lView, this.context);
      }
      /**
       * Checks the change detector and its children, and throws if any changes are detected.
       *
       * This is used in development mode to verify that running change detection doesn't
       * introduce other changes.
       */
      checkNoChanges() {
          checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);
      }
      attachToViewContainerRef() {
          if (this._appRef) {
              const errorMessage = ngDevMode ? 'This view is already attached directly to the ApplicationRef!' : '';
              throw new RuntimeError(902 /* VIEW_ALREADY_ATTACHED */, errorMessage);
          }
          this._attachedToViewContainer = true;
      }
      detachFromAppRef() {
          this._appRef = null;
          renderDetachView(this._lView[TVIEW], this._lView);
      }
      attachToAppRef(appRef) {
          if (this._attachedToViewContainer) {
              const errorMessage = ngDevMode ? 'This view is already attached to a ViewContainer!' : '';
              throw new RuntimeError(902 /* VIEW_ALREADY_ATTACHED */, errorMessage);
          }
          this._appRef = appRef;
      }
  }
  /** @internal */
  class RootViewRef extends ViewRef$1 {
      constructor(_view) {
          super(_view);
          this._view = _view;
      }
      detectChanges() {
          detectChangesInRootView(this._view);
      }
      checkNoChanges() {
          checkNoChangesInRootView(this._view);
      }
      get context() {
          return null;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class ComponentFactoryResolver extends ComponentFactoryResolver$1 {
      /**
       * @param ngModule The NgModuleRef to which all resolved factories are bound.
       */
      constructor(ngModule) {
          super();
          this.ngModule = ngModule;
      }
      resolveComponentFactory(component) {
          ngDevMode && assertComponentType(component);
          const componentDef = getComponentDef(component);
          return new ComponentFactory(componentDef, this.ngModule);
      }
  }
  function toRefArray(map) {
      const array = [];
      for (let nonMinified in map) {
          if (map.hasOwnProperty(nonMinified)) {
              const minified = map[nonMinified];
              array.push({ propName: minified, templateName: nonMinified });
          }
      }
      return array;
  }
  function getNamespace(elementName) {
      const name = elementName.toLowerCase();
      return name === 'svg' ? SVG_NAMESPACE : (name === 'math' ? MATH_ML_NAMESPACE : null);
  }
  function createChainedInjector(rootViewInjector, moduleInjector) {
      return {
          get: (token, notFoundValue, flags) => {
              const value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);
              if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
                  notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
                  // Return the value from the root element injector when
                  // - it provides it
                  //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
                  // - the module injector should not be checked
                  //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
                  return value;
              }
              return moduleInjector.get(token, notFoundValue, flags);
          }
      };
  }
  /**
   * Render3 implementation of {@link viewEngine_ComponentFactory}.
   */
  class ComponentFactory extends ComponentFactory$1 {
      /**
       * @param componentDef The component definition.
       * @param ngModule The NgModuleRef to which the factory is bound.
       */
      constructor(componentDef, ngModule) {
          super();
          this.componentDef = componentDef;
          this.ngModule = ngModule;
          this.componentType = componentDef.type;
          this.selector = stringifyCSSSelectorList(componentDef.selectors);
          this.ngContentSelectors =
              componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
          this.isBoundToModule = !!ngModule;
      }
      get inputs() {
          return toRefArray(this.componentDef.inputs);
      }
      get outputs() {
          return toRefArray(this.componentDef.outputs);
      }
      create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
          ngModule = ngModule || this.ngModule;
          const rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;
          const rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);
          const sanitizer = rootViewInjector.get(Sanitizer, null);
          const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);
          // Determine a tag name used for creating host elements when this component is created
          // dynamically. Default to 'div' if this component did not specify any tag name in its selector.
          const elementName = this.componentDef.selectors[0][0] || 'div';
          const hostRNode = rootSelectorOrNode ?
              locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) :
              createElementNode(rendererFactory.createRenderer(null, this.componentDef), elementName, getNamespace(elementName));
          const rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :
              16 /* CheckAlways */ | 512 /* IsRoot */;
          const rootContext = createRootContext();
          // Create the root view. Uses empty TView and ContentTemplate.
          const rootTView = createTView(0 /* Root */, null, null, 1, 0, null, null, null, null, null);
          const rootLView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector);
          // rootView is the parent when bootstrapping
          // TODO(misko): it looks like we are entering view here but we don't really need to as
          // `renderView` does that. However as the code is written it is needed because
          // `createRootComponentView` and `createRootComponent` both read global state. Fixing those
          // issues would allow us to drop this.
          enterView(rootLView);
          let component;
          let tElementNode;
          try {
              const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);
              if (hostRNode) {
                  if (rootSelectorOrNode) {
                      setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);
                  }
                  else {
                      // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`
                      // is not defined), also apply attributes and classes extracted from component selector.
                      // Extract attributes and classes from the first selector only to match VE behavior.
                      const { attrs, classes } = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]);
                      if (attrs) {
                          setUpAttributes(hostRenderer, hostRNode, attrs);
                      }
                      if (classes && classes.length > 0) {
                          writeDirectClass(hostRenderer, hostRNode, classes.join(' '));
                      }
                  }
              }
              tElementNode = getTNode(rootTView, HEADER_OFFSET);
              if (projectableNodes !== undefined) {
                  const projection = tElementNode.projection = [];
                  for (let i = 0; i < this.ngContentSelectors.length; i++) {
                      const nodesforSlot = projectableNodes[i];
                      // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade
                      // case). Here we do normalize passed data structure to be an array of arrays to avoid
                      // complex checks down the line.
                      // We also normalize the length of the passed in projectable nodes (to match the number of
                      // <ng-container> slots defined by a component).
                      projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
                  }
              }
              // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and
              // executed here?
              // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref
              component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);
              renderView(rootTView, rootLView, null);
          }
          finally {
              leaveView();
          }
          return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);
      }
  }
  const componentFactoryResolver = new ComponentFactoryResolver();
  /**
   * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the
   * ComponentFactoryResolver
   * already exists, retrieves the existing ComponentFactoryResolver.
   *
   * @returns The ComponentFactoryResolver instance to use
   */
  function injectComponentFactoryResolver() {
      return componentFactoryResolver;
  }
  /**
   * Represents an instance of a Component created via a {@link ComponentFactory}.
   *
   * `ComponentRef` provides access to the Component Instance as well other objects related to this
   * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
   * method.
   *
   */
  class ComponentRef extends ComponentRef$1 {
      constructor(componentType, instance, location, _rootLView, _tNode) {
          super();
          this.location = location;
          this._rootLView = _rootLView;
          this._tNode = _tNode;
          this.instance = instance;
          this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);
          this.componentType = componentType;
      }
      get injector() {
          return new NodeInjector(this._tNode, this._rootLView);
      }
      destroy() {
          this.hostView.destroy();
      }
      onDestroy(callback) {
          this.hostView.onDestroy(callback);
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Adds decorator, constructor, and property metadata to a given type via static metadata fields
   * on the type.
   *
   * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.
   *
   * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments
   * being tree-shaken away during production builds.
   */
  function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
      return noSideEffects(() => {
          const clazz = type;
          if (decorators !== null) {
              if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {
                  clazz.decorators.push(...decorators);
              }
              else {
                  clazz.decorators = decorators;
              }
          }
          if (ctorParameters !== null) {
              // Rather than merging, clobber the existing parameters. If other projects exist which
              // use tsickle-style annotations and reflect over them in the same way, this could
              // cause issues, but that is vanishingly unlikely.
              clazz.ctorParameters = ctorParameters;
          }
          if (propDecorators !== null) {
              // The property decorator objects are merged as it is possible different fields have
              // different decorator types. Decorators on individual fields are not merged, as it's
              // also incredibly unlikely that a field will be decorated both with an Angular
              // decorator and a non-Angular decorator that's also been downleveled.
              if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {
                  clazz.propDecorators = { ...clazz.propDecorators, ...propDecorators };
              }
              else {
                  clazz.propDecorators = propDecorators;
              }
          }
      });
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Represents an instance of an `NgModule` created by an `NgModuleFactory`.
   * Provides access to the `NgModule` instance and related objects.
   *
   * @publicApi
   */
  class NgModuleRef$1 {
  }
  /**
   * @publicApi
   *
   * @deprecated
   * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy
   * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)
   * for additional context. Angular provides APIs that accept NgModule classes directly (such as
   * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and
   * [createNgModuleRef](api/core/createNgModuleRef)), consider switching to those APIs instead of
   * using factory-based ones.
   */
  class NgModuleFactory$1 {
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Map of module-id to the corresponding NgModule.
   * - In pre Ivy we track NgModuleFactory,
   * - In post Ivy we track the NgModuleType
   */
  const modules = new Map();
  /**
   * Registers a loaded module. Should only be called from generated NgModuleFactory code.
   * @publicApi
   */
  function registerModuleFactory(id, factory) {
      const existing = modules.get(id);
      assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);
      modules.set(id, factory);
  }
  function assertSameOrNotExisting(id, type, incoming) {
      if (type && type !== incoming) {
          throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);
      }
  }
  function registerNgModuleType(ngModuleType) {
      const visited = new Set();
      recurse(ngModuleType);
      function recurse(ngModuleType) {
          // The imports array of an NgModule must refer to other NgModules,
          // so an error is thrown if no module definition is available.
          const def = getNgModuleDef(ngModuleType, /* throwNotFound */ true);
          const id = def.id;
          if (id !== null) {
              const existing = modules.get(id);
              assertSameOrNotExisting(id, existing, ngModuleType);
              modules.set(id, ngModuleType);
          }
          const imports = maybeUnwrapFn(def.imports);
          for (const i of imports) {
              if (!visited.has(i)) {
                  visited.add(i);
                  recurse(i);
              }
          }
      }
  }
  function clearModulesForTest() {
      modules.clear();
  }
  function getRegisteredNgModuleType(id) {
      return (modules.get(id) || autoRegisterModuleById[id]);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.
   * @param ngModule NgModule class.
   * @param parentInjector Optional injector instance to use as a parent for the module injector. If
   *     not provided, `NullInjector` will be used instead.
   * @publicApi
   */
  function createNgModuleRef(ngModule, parentInjector) {
      return new NgModuleRef(ngModule, parentInjector ?? null);
  }
  class NgModuleRef extends NgModuleRef$1 {
      constructor(ngModuleType, _parent) {
          super();
          this._parent = _parent;
          // tslint:disable-next-line:require-internal-with-underscore
          this._bootstrapComponents = [];
          this.injector = this;
          this.destroyCbs = [];
          // When bootstrapping a module we have a dependency graph that looks like this:
          // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
          // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
          // circular dependency which will result in a runtime error, because the injector doesn't
          // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
          // and providing it, rather than letting the injector resolve it.
          this.componentFactoryResolver = new ComponentFactoryResolver(this);
          const ngModuleDef = getNgModuleDef(ngModuleType);
          ngDevMode &&
              assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);
          this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
          this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [
              { provide: NgModuleRef$1, useValue: this }, {
                  provide: ComponentFactoryResolver$1,
                  useValue: this.componentFactoryResolver
              }
          ], stringify(ngModuleType));
          // We need to resolve the injector types separately from the injector creation, because
          // the module might be trying to use this ref in its constructor for DI which will cause a
          // circular error that will eventually error out, because the injector isn't created yet.
          this._r3Injector._resolveInjectorDefTypes();
          this.instance = this.get(ngModuleType);
      }
      get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {
          if (token === Injector || token === NgModuleRef$1 || token === INJECTOR) {
              return this;
          }
          return this._r3Injector.get(token, notFoundValue, injectFlags);
      }
      destroy() {
          ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
          const injector = this._r3Injector;
          !injector.destroyed && injector.destroy();
          this.destroyCbs.forEach(fn => fn());
          this.destroyCbs = null;
      }
      onDestroy(callback) {
          ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
          this.destroyCbs.push(callback);
      }
  }
  class NgModuleFactory extends NgModuleFactory$1 {
      constructor(moduleType) {
          super();
          this.moduleType = moduleType;
          const ngModuleDef = getNgModuleDef(moduleType);
          if (ngModuleDef !== null) {
              // Register the NgModule with Angular's module registry. The location (and hence timing) of
              // this call is critical to ensure this works correctly (modules get registered when expected)
              // without bloating bundles (modules are registered when otherwise not referenced).
              //
              // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has
              // several practical consequences:
              //
              // - If an .ngfactory file is not imported from, the module won't be registered (and can be
              //   tree shaken).
              // - If an .ngfactory file is imported from, the module will be registered even if an instance
              //   is not actually created (via `create` below).
              // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's
              //   imports,
              //
              // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are
              // not a required API to use - there are other ways to obtain an NgModuleFactory for a given
              // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,
              // the side effect of registration is added here, in the constructor of NgModuleFactory,
              // ensuring no matter how a factory is created, the module is registered correctly.
              //
              // An alternative would be to include the registration side effect inline following the actual
              // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules
              // will be registered and retained even if they're otherwise never referenced.
              registerNgModuleType(moduleType);
          }
      }
      create(parentInjector) {
          return new NgModuleRef(this.moduleType, parentInjector);
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Bindings for pure functions are stored after regular bindings.
   *
   * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|
   * ------------------------------------------------------------------------------------------
   * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |
   * ------------------------------------------------------------------------------------------
   *                    ^                      ^
   *      TView.bindingStartIndex      TView.expandoStartIndex
   *
   * Pure function instructions are given an offset from the binding root. Adding the offset to the
   * binding root gives the first index where the bindings are stored. In component views, the binding
   * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +
   * any directive instances + any hostVars in directives evaluated before it.
   *
   * See VIEW_DATA.md for more information about host binding resolution.
   */
  /**
   * If the value hasn't been saved, calls the pure function to store and return the
   * value. If it has been saved, returns the saved value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn Function that returns a value
   * @param thisArg Optional calling context of pureFn
   * @returns value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunction0(slotOffset, pureFn, thisArg) {
      const bindingIndex = getBindingRoot() + slotOffset;
      const lView = getLView();
      return lView[bindingIndex] === NO_CHANGE ?
          updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :
          getBinding(lView, bindingIndex);
  }
  /**
   * If the value of the provided exp has changed, calls the pure function to return
   * an updated value. Or if the value has not changed, returns cached value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn Function that returns an updated value
   * @param exp Updated expression value
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunction1(slotOffset, pureFn, exp, thisArg) {
      return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
      return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param exp3
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
      return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param exp3
   * @param exp4
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
      return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param exp3
   * @param exp4
   * @param exp5
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
      const bindingIndex = getBindingRoot() + slotOffset;
      const lView = getLView();
      const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
      return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?
          updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :
              pureFn(exp1, exp2, exp3, exp4, exp5)) :
          getBinding(lView, bindingIndex + 5);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param exp3
   * @param exp4
   * @param exp5
   * @param exp6
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
      const bindingIndex = getBindingRoot() + slotOffset;
      const lView = getLView();
      const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
      return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?
          updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :
              pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :
          getBinding(lView, bindingIndex + 6);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param exp3
   * @param exp4
   * @param exp5
   * @param exp6
   * @param exp7
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
      const bindingIndex = getBindingRoot() + slotOffset;
      const lView = getLView();
      let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
      return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?
          updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :
              pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :
          getBinding(lView, bindingIndex + 7);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param exp3
   * @param exp4
   * @param exp5
   * @param exp6
   * @param exp7
   * @param exp8
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
      const bindingIndex = getBindingRoot() + slotOffset;
      const lView = getLView();
      const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
      return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?
          updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :
              pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :
          getBinding(lView, bindingIndex + 8);
  }
  /**
   * pureFunction instruction that can support any number of bindings.
   *
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn A pure function that takes binding values and builds an object or array
   * containing those values.
   * @param exps An array of binding values
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   * @codeGenApi
   */
  function ÉµÉµpureFunctionV(slotOffset, pureFn, exps, thisArg) {
      return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
  }
  /**
   * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized
   * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first
   * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE
   * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert
   * it to `undefined`.
   */
  function getPureFunctionReturnValue(lView, returnValueIndex) {
      ngDevMode && assertIndexInRange(lView, returnValueIndex);
      const lastReturnValue = lView[returnValueIndex];
      return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;
  }
  /**
   * If the value of the provided exp has changed, calls the pure function to return
   * an updated value. Or if the value has not changed, returns cached value.
   *
   * @param lView LView in which the function is being executed.
   * @param bindingRoot Binding root index.
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn Function that returns an updated value
   * @param exp Updated expression value
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   */
  function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
      const bindingIndex = bindingRoot + slotOffset;
      return bindingUpdated(lView, bindingIndex, exp) ?
          updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :
          getPureFunctionReturnValue(lView, bindingIndex + 1);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param lView LView in which the function is being executed.
   * @param bindingRoot Binding root index.
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   */
  function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
      const bindingIndex = bindingRoot + slotOffset;
      return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?
          updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :
          getPureFunctionReturnValue(lView, bindingIndex + 2);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param lView LView in which the function is being executed.
   * @param bindingRoot Binding root index.
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param exp3
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   */
  function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
      const bindingIndex = bindingRoot + slotOffset;
      return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?
          updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :
          getPureFunctionReturnValue(lView, bindingIndex + 3);
  }
  /**
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param lView LView in which the function is being executed.
   * @param bindingRoot Binding root index.
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn
   * @param exp1
   * @param exp2
   * @param exp3
   * @param exp4
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   *
   */
  function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
      const bindingIndex = bindingRoot + slotOffset;
      return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?
          updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :
          getPureFunctionReturnValue(lView, bindingIndex + 4);
  }
  /**
   * pureFunction instruction that can support any number of bindings.
   *
   * If the value of any provided exp has changed, calls the pure function to return
   * an updated value. Or if no values have changed, returns cached value.
   *
   * @param lView LView in which the function is being executed.
   * @param bindingRoot Binding root index.
   * @param slotOffset the offset from binding root to the reserved slot
   * @param pureFn A pure function that takes binding values and builds an object or array
   * containing those values.
   * @param exps An array of binding values
   * @param thisArg Optional calling context of pureFn
   * @returns Updated or cached value
   */
  function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
      let bindingIndex = bindingRoot + slotOffset;
      let different = false;
      for (let i = 0; i < exps.length; i++) {
          bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
      }
      return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :
          getPureFunctionReturnValue(lView, bindingIndex);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Create a pipe.
   *
   * @param index Pipe index where the pipe will be stored.
   * @param pipeName The name of the pipe
   * @returns T the instance of the pipe.
   *
   * @codeGenApi
   */
  function ÉµÉµpipe(index, pipeName) {
      const tView = getTView();
      let pipeDef;
      const adjustedIndex = index + HEADER_OFFSET;
      if (tView.firstCreatePass) {
          // The `getPipeDef` throws if a pipe with a given name is not found
          // (so we use non-null assertion below).
          pipeDef = getPipeDef(pipeName, tView.pipeRegistry);
          tView.data[adjustedIndex] = pipeDef;
          if (pipeDef.onDestroy) {
              (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);
          }
      }
      else {
          pipeDef = tView.data[adjustedIndex];
      }
      const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
      const previousInjectImplementation = setInjectImplementation(ÉµÉµdirectiveInject);
      try {
          // DI for pipes is supposed to behave like directives when placed on a component
          // host node, which means that we have to disable access to `viewProviders`.
          const previousIncludeViewProviders = setIncludeViewProviders(false);
          const pipeInstance = pipeFactory();
          setIncludeViewProviders(previousIncludeViewProviders);
          store(tView, getLView(), adjustedIndex, pipeInstance);
          return pipeInstance;
      }
      finally {
          // we have to restore the injector implementation in finally, just in case the creation of the
          // pipe throws an error.
          setInjectImplementation(previousInjectImplementation);
      }
  }
  /**
   * Searches the pipe registry for a pipe with the given name. If one is found,
   * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.
   *
   * @param name Name of pipe to resolve
   * @param registry Full list of available pipes
   * @returns Matching PipeDef
   */
  function getPipeDef(name, registry) {
      if (registry) {
          for (let i = registry.length - 1; i >= 0; i--) {
              const pipeDef = registry[i];
              if (name === pipeDef.name) {
                  return pipeDef;
              }
          }
      }
      if (ngDevMode) {
          const lView = getLView();
          const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
          const context = declarationLView[CONTEXT];
          const component = context ? ` in the '${context.constructor.name}' component` : '';
          throw new RuntimeError(-302 /* PIPE_NOT_FOUND */, `The pipe '${name}' could not be found${component}!`);
      }
  }
  /**
   * Invokes a pipe with 1 arguments.
   *
   * This instruction acts as a guard to {@link PipeTransform#transform} invoking
   * the pipe only when an input to the pipe changes.
   *
   * @param index Pipe index where the pipe was stored on creation.
   * @param slotOffset the offset in the reserved slot space
   * @param v1 1st argument to {@link PipeTransform#transform}.
   *
   * @codeGenApi
   */
  function ÉµÉµpipeBind1(index, slotOffset, v1) {
      const adjustedIndex = index + HEADER_OFFSET;
      const lView = getLView();
      const pipeInstance = load(lView, adjustedIndex);
      return isPure(lView, adjustedIndex) ?
          pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) :
          pipeInstance.transform(v1);
  }
  /**
   * Invokes a pipe with 2 arguments.
   *
   * This instruction acts as a guard to {@link PipeTransform#transform} invoking
   * the pipe only when an input to the pipe changes.
   *
   * @param index Pipe index where the pipe was stored on creation.
   * @param slotOffset the offset in the reserved slot space
   * @param v1 1st argument to {@link PipeTransform#transform}.
   * @param v2 2nd argument to {@link PipeTransform#transform}.
   *
   * @codeGenApi
   */
  function ÉµÉµpipeBind2(index, slotOffset, v1, v2) {
      const adjustedIndex = index + HEADER_OFFSET;
      const lView = getLView();
      const pipeInstance = load(lView, adjustedIndex);
      return isPure(lView, adjustedIndex) ?
          pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :
          pipeInstance.transform(v1, v2);
  }
  /**
   * Invokes a pipe with 3 arguments.
   *
   * This instruction acts as a guard to {@link PipeTransform#transform} invoking
   * the pipe only when an input to the pipe changes.
   *
   * @param index Pipe index where the pipe was stored on creation.
   * @param slotOffset the offset in the reserved slot space
   * @param v1 1st argument to {@link PipeTransform#transform}.
   * @param v2 2nd argument to {@link PipeTransform#transform}.
   * @param v3 4rd argument to {@link PipeTransform#transform}.
   *
   * @codeGenApi
   */
  function ÉµÉµpipeBind3(index, slotOffset, v1, v2, v3) {
      const adjustedIndex = index + HEADER_OFFSET;
      const lView = getLView();
      const pipeInstance = load(lView, adjustedIndex);
      return isPure(lView, adjustedIndex) ?
          pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :
          pipeInstance.transform(v1, v2, v3);
  }
  /**
   * Invokes a pipe with 4 arguments.
   *
   * This instruction acts as a guard to {@link PipeTransform#transform} invoking
   * the pipe only when an input to the pipe changes.
   *
   * @param index Pipe index where the pipe was stored on creation.
   * @param slotOffset the offset in the reserved slot space
   * @param v1 1st argument to {@link PipeTransform#transform}.
   * @param v2 2nd argument to {@link PipeTransform#transform}.
   * @param v3 3rd argument to {@link PipeTransform#transform}.
   * @param v4 4th argument to {@link PipeTransform#transform}.
   *
   * @codeGenApi
   */
  function ÉµÉµpipeBind4(index, slotOffset, v1, v2, v3, v4) {
      const adjustedIndex = index + HEADER_OFFSET;
      const lView = getLView();
      const pipeInstance = load(lView, adjustedIndex);
      return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :
          pipeInstance.transform(v1, v2, v3, v4);
  }
  /**
   * Invokes a pipe with variable number of arguments.
   *
   * This instruction acts as a guard to {@link PipeTransform#transform} invoking
   * the pipe only when an input to the pipe changes.
   *
   * @param index Pipe index where the pipe was stored on creation.
   * @param slotOffset the offset in the reserved slot space
   * @param values Array of arguments to pass to {@link PipeTransform#transform} method.
   *
   * @codeGenApi
   */
  function ÉµÉµpipeBindV(index, slotOffset, values) {
      const adjustedIndex = index + HEADER_OFFSET;
      const lView = getLView();
      const pipeInstance = load(lView, adjustedIndex);
      return isPure(lView, adjustedIndex) ?
          pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) :
          pipeInstance.transform.apply(pipeInstance, values);
  }
  function isPure(lView, index) {
      return lView[TVIEW].data[index].pure;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class EventEmitter_ extends Subject {
      constructor(isAsync = false) {
          super();
          this.__isAsync = isAsync;
      }
      emit(value) {
          super.next(value);
      }
      subscribe(observerOrNext, error, complete) {
          let nextFn = observerOrNext;
          let errorFn = error || (() => null);
          let completeFn = complete;
          if (observerOrNext && typeof observerOrNext === 'object') {
              const observer = observerOrNext;
              nextFn = observer.next?.bind(observer);
              errorFn = observer.error?.bind(observer);
              completeFn = observer.complete?.bind(observer);
          }
          if (this.__isAsync) {
              errorFn = _wrapInTimeout(errorFn);
              if (nextFn) {
                  nextFn = _wrapInTimeout(nextFn);
              }
              if (completeFn) {
                  completeFn = _wrapInTimeout(completeFn);
              }
          }
          const sink = super.subscribe({ next: nextFn, error: errorFn, complete: completeFn });
          if (observerOrNext instanceof Subscription) {
              observerOrNext.add(sink);
          }
          return sink;
      }
  }
  function _wrapInTimeout(fn) {
      return (value) => {
          setTimeout(fn, undefined, value);
      };
  }
  /**
   * @publicApi
   */
  const EventEmitter = EventEmitter_;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function symbolIterator() {
      return this._results[core_getSymbolIterator()]();
  }
  /**
   * An unmodifiable list of items that Angular keeps up to date when the state
   * of the application changes.
   *
   * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}
   * provide.
   *
   * Implements an iterable interface, therefore it can be used in both ES6
   * javascript `for (var i of items)` loops as well as in Angular templates with
   * `*ngFor="let i of myList"`.
   *
   * Changes can be observed by subscribing to the changes `Observable`.
   *
   * NOTE: In the future this class will implement an `Observable` interface.
   *
   * @usageNotes
   * ### Example
   * ```typescript
   * @Component({...})
   * class Container {
   *   @ViewChildren(Item) items:QueryList<Item>;
   * }
   * ```
   *
   * @publicApi
   */
  class QueryList {
      /**
       * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
       *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
       *     the same result)
       */
      constructor(_emitDistinctChangesOnly = false) {
          this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
          this.dirty = true;
          this._results = [];
          this._changesDetected = false;
          this._changes = null;
          this.length = 0;
          this.first = undefined;
          this.last = undefined;
          // This function should be declared on the prototype, but doing so there will cause the class
          // declaration to have side-effects and become not tree-shakable. For this reason we do it in
          // the constructor.
          // [getSymbolIterator()](): Iterator<T> { ... }
          const symbol = core_getSymbolIterator();
          const proto = QueryList.prototype;
          if (!proto[symbol])
              proto[symbol] = symbolIterator;
      }
      /**
       * Returns `Observable` of `QueryList` notifying the subscriber of changes.
       */
      get changes() {
          return this._changes || (this._changes = new EventEmitter());
      }
      /**
       * Returns the QueryList entry at `index`.
       */
      get(index) {
          return this._results[index];
      }
      /**
       * See
       * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
       */
      map(fn) {
          return this._results.map(fn);
      }
      /**
       * See
       * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
       */
      filter(fn) {
          return this._results.filter(fn);
      }
      /**
       * See
       * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
       */
      find(fn) {
          return this._results.find(fn);
      }
      /**
       * See
       * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
       */
      reduce(fn, init) {
          return this._results.reduce(fn, init);
      }
      /**
       * See
       * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
       */
      forEach(fn) {
          this._results.forEach(fn);
      }
      /**
       * See
       * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
       */
      some(fn) {
          return this._results.some(fn);
      }
      /**
       * Returns a copy of the internal results list as an Array.
       */
      toArray() {
          return this._results.slice();
      }
      toString() {
          return this._results.toString();
      }
      /**
       * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
       * on change detection, it will not notify of changes to the queries, unless a new change
       * occurs.
       *
       * @param resultsTree The query results to store
       * @param identityAccessor Optional function for extracting stable object identity from a value
       *    in the array. This function is executed for each element of the query result list while
       *    comparing current query list with the new one (provided as a first argument of the `reset`
       *    function) to detect if the lists are different. If the function is not provided, elements
       *    are compared as is (without any pre-processing).
       */
      reset(resultsTree, identityAccessor) {
          // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of
          // QueryList (but not for QueryList itself.)
          const self = this;
          self.dirty = false;
          const newResultFlat = flatten(resultsTree);
          if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {
              self._results = newResultFlat;
              self.length = newResultFlat.length;
              self.last = newResultFlat[this.length - 1];
              self.first = newResultFlat[0];
          }
      }
      /**
       * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
       */
      notifyOnChanges() {
          if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly))
              this._changes.emit(this);
      }
      /** internal */
      setDirty() {
          this.dirty = true;
      }
      /** internal */
      destroy() {
          this.changes.complete();
          this.changes.unsubscribe();
      }
  }
  Symbol.iterator;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Represents an embedded template that can be used to instantiate embedded views.
   * To instantiate embedded views based on a template, use the `ViewContainerRef`
   * method `createEmbeddedView()`.
   *
   * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`
   * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view
   * is injected into the constructor of the directive,
   * using the `TemplateRef` token.
   *
   * You can also use a `Query` to find a `TemplateRef` associated with
   * a component or a directive.
   *
   * @see `ViewContainerRef`
   * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)
   *
   * @publicApi
   */
  class TemplateRef {
  }
  /**
   * @internal
   * @nocollapse
   */
  TemplateRef.__NG_ELEMENT_ID__ = injectTemplateRef;
  const ViewEngineTemplateRef = TemplateRef;
  // TODO(alxhub): combine interface and implementation. Currently this is challenging since something
  // in g3 depends on them being separate.
  const R3TemplateRef = class TemplateRef extends ViewEngineTemplateRef {
      constructor(_declarationLView, _declarationTContainer, elementRef) {
          super();
          this._declarationLView = _declarationLView;
          this._declarationTContainer = _declarationTContainer;
          this.elementRef = elementRef;
      }
      createEmbeddedView(context) {
          const embeddedTView = this._declarationTContainer.tViews;
          const embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16 /* CheckAlways */, null, embeddedTView.declTNode, null, null, null, null);
          const declarationLContainer = this._declarationLView[this._declarationTContainer.index];
          ngDevMode && assertLContainer(declarationLContainer);
          embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
          const declarationViewLQueries = this._declarationLView[QUERIES];
          if (declarationViewLQueries !== null) {
              embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
          }
          renderView(embeddedTView, embeddedLView, context);
          return new ViewRef$1(embeddedLView);
      }
  };
  /**
   * Creates a TemplateRef given a node.
   *
   * @returns The TemplateRef instance to use
   */
  function injectTemplateRef() {
      return createTemplateRef(getCurrentTNode(), getLView());
  }
  /**
   * Creates a TemplateRef and stores it on the injector.
   *
   * @param hostTNode The node on which a TemplateRef is requested
   * @param hostLView The `LView` to which the node belongs
   * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type
   */
  function createTemplateRef(hostTNode, hostLView) {
      if (hostTNode.type & 4 /* Container */) {
          ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');
          return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
      }
      return null;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Represents a container where one or more views can be attached to a component.
   *
   * Can contain *host views* (created by instantiating a
   * component with the `createComponent()` method), and *embedded views*
   * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).
   *
   * A view container instance can contain other view containers,
   * creating a [view hierarchy](guide/glossary#view-tree).
   *
   * @see `ComponentRef`
   * @see `EmbeddedViewRef`
   *
   * @publicApi
   */
  class ViewContainerRef {
  }
  /**
   * @internal
   * @nocollapse
   */
  ViewContainerRef.__NG_ELEMENT_ID__ = injectViewContainerRef;
  /**
   * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
   * already exists, retrieves the existing ViewContainerRef.
   *
   * @returns The ViewContainerRef instance to use
   */
  function injectViewContainerRef() {
      const previousTNode = getCurrentTNode();
      return createContainerRef(previousTNode, getLView());
  }
  const VE_ViewContainerRef = ViewContainerRef;
  // TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix
  // for that lands, this can be cleaned up.
  const R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {
      constructor(_lContainer, _hostTNode, _hostLView) {
          super();
          this._lContainer = _lContainer;
          this._hostTNode = _hostTNode;
          this._hostLView = _hostLView;
      }
      get element() {
          return createElementRef(this._hostTNode, this._hostLView);
      }
      get injector() {
          return new NodeInjector(this._hostTNode, this._hostLView);
      }
      /** @deprecated No replacement */
      get parentInjector() {
          const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);
          if (hasParentInjector(parentLocation)) {
              const parentView = getParentInjectorView(parentLocation, this._hostLView);
              const injectorIndex = getParentInjectorIndex(parentLocation);
              ngDevMode && assertNodeInjector(parentView, injectorIndex);
              const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* TNODE */];
              return new NodeInjector(parentTNode, parentView);
          }
          else {
              return new NodeInjector(null, this._hostLView);
          }
      }
      clear() {
          while (this.length > 0) {
              this.remove(this.length - 1);
          }
      }
      get(index) {
          const viewRefs = getViewRefs(this._lContainer);
          return viewRefs !== null && viewRefs[index] || null;
      }
      get length() {
          return this._lContainer.length - CONTAINER_HEADER_OFFSET;
      }
      createEmbeddedView(templateRef, context, index) {
          const viewRef = templateRef.createEmbeddedView(context || {});
          this.insert(viewRef, index);
          return viewRef;
      }
      createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, ngModuleRef) {
          const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);
          let index;
          // This function supports 2 signatures and we need to handle options correctly for both:
          //   1. When first argument is a Component type. This signature also requires extra
          //      options to be provided as as object (more ergonomic option).
          //   2. First argument is a Component factory. In this case extra options are represented as
          //      positional arguments. This signature is less ergonomic and will be deprecated.
          if (isComponentFactory) {
              if (ngDevMode) {
                  assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' +
                      'and an options object as the second argument. This combination of arguments ' +
                      'is incompatible. You can either change the first argument to provide Component ' +
                      'type or change the second argument to be a number (representing an index at ' +
                      'which to insert the new component\'s host view into this container)');
              }
              index = indexOrOptions;
          }
          else {
              if (ngDevMode) {
                  assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` +
                      `Please check whether provided class has @Component decorator.`);
                  assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' +
                      'and a number (representing an index at which to insert the new component\'s ' +
                      'host view into this container as the second argument. This combination of arguments ' +
                      'is incompatible. Please use an object as the second argument instead.');
              }
              const options = (indexOrOptions || {});
              index = options.index;
              injector = options.injector;
              projectableNodes = options.projectableNodes;
              ngModuleRef = options.ngModuleRef;
          }
          const componentFactory = isComponentFactory ?
              componentFactoryOrType :
              new ComponentFactory(getComponentDef(componentFactoryOrType));
          const contextInjector = injector || this.parentInjector;
          // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.
          if (!ngModuleRef && componentFactory.ngModule == null) {
              // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that
              // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an
              // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based
              // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try
              // using a provided injector first, then fall back to the parent injector of this
              // `ViewContainerRef` instance.
              //
              // For the factory-less case, it's critical to establish a connection with the module
              // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),
              // so that a component can use DI tokens provided in MgModules. For this reason, we can not
              // rely on the provided injector, since it might be detached from the DI tree (for example, if
              // it was created via `Injector.create` without specifying a parent injector, or if an
              // injector is retrieved from an `NgModuleRef` created via `createNgModuleRef` using an
              // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent
              // injector, which is normally connected to the DI tree, which includes module injector
              // subtree.
              const _injector = isComponentFactory ? contextInjector : this.parentInjector;
              // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||
              // undefined` expression which seems to cause internal google apps to fail. This is documented
              // in the following internal bug issue: go/b/142967802
              const result = _injector.get(NgModuleRef$1, null);
              if (result) {
                  ngModuleRef = result;
              }
          }
          const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
          this.insert(componentRef.hostView, index);
          return componentRef;
      }
      insert(viewRef, index) {
          const lView = viewRef._lView;
          const tView = lView[TVIEW];
          if (ngDevMode && viewRef.destroyed) {
              throw new Error('Cannot insert a destroyed View in a ViewContainer!');
          }
          if (viewAttachedToContainer(lView)) {
              // If view is already attached, detach it first so we clean up references appropriately.
              const prevIdx = this.indexOf(viewRef);
              // A view might be attached either to this or a different container. The `prevIdx` for
              // those cases will be:
              // equal to -1 for views attached to this ViewContainerRef
              // >= 0 for views attached to a different ViewContainerRef
              if (prevIdx !== -1) {
                  this.detach(prevIdx);
              }
              else {
                  const prevLContainer = lView[PARENT];
                  ngDevMode &&
                      assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');
                  // We need to re-create a R3ViewContainerRef instance since those are not stored on
                  // LView (nor anywhere else).
                  const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
                  prevVCRef.detach(prevVCRef.indexOf(viewRef));
              }
          }
          // Logical operation of adding `LView` to `LContainer`
          const adjustedIdx = this._adjustIndex(index);
          const lContainer = this._lContainer;
          insertView(tView, lView, lContainer, adjustedIdx);
          // Physical operation of adding the DOM nodes.
          const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);
          const renderer = lView[RENDERER];
          const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);
          if (parentRNode !== null) {
              addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
          }
          viewRef.attachToViewContainerRef();
          addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
          return viewRef;
      }
      move(viewRef, newIndex) {
          if (ngDevMode && viewRef.destroyed) {
              throw new Error('Cannot move a destroyed View in a ViewContainer!');
          }
          return this.insert(viewRef, newIndex);
      }
      indexOf(viewRef) {
          const viewRefsArr = getViewRefs(this._lContainer);
          return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
      }
      remove(index) {
          const adjustedIdx = this._adjustIndex(index, -1);
          const detachedView = detachView(this._lContainer, adjustedIdx);
          if (detachedView) {
              // Before destroying the view, remove it from the container's array of `ViewRef`s.
              // This ensures the view container length is updated before calling
              // `destroyLView`, which could recursively call view container methods that
              // rely on an accurate container length.
              // (e.g. a method on this view container being called by a child directive's OnDestroy
              // lifecycle hook)
              removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
              destroyLView(detachedView[TVIEW], detachedView);
          }
      }
      detach(index) {
          const adjustedIdx = this._adjustIndex(index, -1);
          const view = detachView(this._lContainer, adjustedIdx);
          const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
          return wasDetached ? new ViewRef$1(view) : null;
      }
      _adjustIndex(index, shift = 0) {
          if (index == null) {
              return this.length + shift;
          }
          if (ngDevMode) {
              assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);
              // +1 because it's legal to insert at the end.
              assertLessThan(index, this.length + 1 + shift, 'index');
          }
          return index;
      }
  };
  function getViewRefs(lContainer) {
      return lContainer[VIEW_REFS];
  }
  function getOrCreateViewRefs(lContainer) {
      return (lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []));
  }
  /**
   * Creates a ViewContainerRef and stores it on the injector.
   *
   * @param ViewContainerRefToken The ViewContainerRef type
   * @param ElementRefToken The ElementRef type
   * @param hostTNode The node that is requesting a ViewContainerRef
   * @param hostLView The view to which the node belongs
   * @returns The ViewContainerRef instance to use
   */
  function createContainerRef(hostTNode, hostLView) {
      ngDevMode && assertTNodeType(hostTNode, 12 /* AnyContainer */ | 3 /* AnyRNode */);
      let lContainer;
      const slotValue = hostLView[hostTNode.index];
      if (isLContainer(slotValue)) {
          // If the host is a container, we don't need to create a new LContainer
          lContainer = slotValue;
      }
      else {
          let commentNode;
          // If the host is an element container, the native host element is guaranteed to be a
          // comment and we can reuse that comment as anchor element for the new LContainer.
          // The comment node in question is already part of the DOM structure so we don't need to append
          // it again.
          if (hostTNode.type & 8 /* ElementContainer */) {
              commentNode = unwrapRNode(slotValue);
          }
          else {
              // If the host is a regular element, we have to insert a comment node manually which will
              // be used as an anchor when inserting elements. In this specific case we use low-level DOM
              // manipulation to insert it.
              const renderer = hostLView[RENDERER];
              ngDevMode && ngDevMode.rendererCreateComment++;
              commentNode = renderer.createComment(ngDevMode ? 'container' : '');
              const hostNative = getNativeByTNode(hostTNode, hostLView);
              const parentOfHostNative = nativeParentNode(renderer, hostNative);
              nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);
          }
          hostLView[hostTNode.index] = lContainer =
              createLContainer(slotValue, hostLView, commentNode, hostTNode);
          addToViewTree(hostLView, lContainer);
      }
      return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // Note: This hack is necessary so we don't erroneously get a circular dependency
  // failure based on types.
  const unusedValueExportToPlacateAjd$1 = 1;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // Note: This hack is necessary so we don't erroneously get a circular dependency
  // failure based on types.
  const unusedValueExportToPlacateAjd = 1;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd;
  class LQuery_ {
      constructor(queryList) {
          this.queryList = queryList;
          this.matches = null;
      }
      clone() {
          return new LQuery_(this.queryList);
      }
      setDirty() {
          this.queryList.setDirty();
      }
  }
  class LQueries_ {
      constructor(queries = []) {
          this.queries = queries;
      }
      createEmbeddedView(tView) {
          const tQueries = tView.queries;
          if (tQueries !== null) {
              const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
              const viewLQueries = [];
              // An embedded view has queries propagated from a declaration view at the beginning of the
              // TQueries collection and up until a first content query declared in the embedded view. Only
              // propagated LQueries are created at this point (LQuery corresponding to declared content
              // queries will be instantiated from the content query instructions for each directive).
              for (let i = 0; i < noOfInheritedQueries; i++) {
                  const tQuery = tQueries.getByIndex(i);
                  const parentLQuery = this.queries[tQuery.indexInDeclarationView];
                  viewLQueries.push(parentLQuery.clone());
              }
              return new LQueries_(viewLQueries);
          }
          return null;
      }
      insertView(tView) {
          this.dirtyQueriesWithMatches(tView);
      }
      detachView(tView) {
          this.dirtyQueriesWithMatches(tView);
      }
      dirtyQueriesWithMatches(tView) {
          for (let i = 0; i < this.queries.length; i++) {
              if (getTQuery(tView, i).matches !== null) {
                  this.queries[i].setDirty();
              }
          }
      }
  }
  class TQueryMetadata_ {
      constructor(predicate, flags, read = null) {
          this.predicate = predicate;
          this.flags = flags;
          this.read = read;
      }
  }
  class TQueries_ {
      constructor(queries = []) {
          this.queries = queries;
      }
      elementStart(tView, tNode) {
          ngDevMode &&
              assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');
          for (let i = 0; i < this.queries.length; i++) {
              this.queries[i].elementStart(tView, tNode);
          }
      }
      elementEnd(tNode) {
          for (let i = 0; i < this.queries.length; i++) {
              this.queries[i].elementEnd(tNode);
          }
      }
      embeddedTView(tNode) {
          let queriesForTemplateRef = null;
          for (let i = 0; i < this.length; i++) {
              const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
              const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);
              if (tqueryClone) {
                  tqueryClone.indexInDeclarationView = i;
                  if (queriesForTemplateRef !== null) {
                      queriesForTemplateRef.push(tqueryClone);
                  }
                  else {
                      queriesForTemplateRef = [tqueryClone];
                  }
              }
          }
          return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;
      }
      template(tView, tNode) {
          ngDevMode &&
              assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');
          for (let i = 0; i < this.queries.length; i++) {
              this.queries[i].template(tView, tNode);
          }
      }
      getByIndex(index) {
          ngDevMode && assertIndexInRange(this.queries, index);
          return this.queries[index];
      }
      get length() {
          return this.queries.length;
      }
      track(tquery) {
          this.queries.push(tquery);
      }
  }
  class TQuery_ {
      constructor(metadata, nodeIndex = -1) {
          this.metadata = metadata;
          this.matches = null;
          this.indexInDeclarationView = -1;
          this.crossesNgTemplate = false;
          /**
           * A flag indicating if a given query still applies to nodes it is crossing. We use this flag
           * (alongside with _declarationNodeIndex) to know when to stop applying content queries to
           * elements in a template.
           */
          this._appliesToNextNode = true;
          this._declarationNodeIndex = nodeIndex;
      }
      elementStart(tView, tNode) {
          if (this.isApplyingToNode(tNode)) {
              this.matchTNode(tView, tNode);
          }
      }
      elementEnd(tNode) {
          if (this._declarationNodeIndex === tNode.index) {
              this._appliesToNextNode = false;
          }
      }
      template(tView, tNode) {
          this.elementStart(tView, tNode);
      }
      embeddedTView(tNode, childQueryIndex) {
          if (this.isApplyingToNode(tNode)) {
              this.crossesNgTemplate = true;
              // A marker indicating a `<ng-template>` element (a placeholder for query results from
              // embedded views created based on this `<ng-template>`).
              this.addMatch(-tNode.index, childQueryIndex);
              return new TQuery_(this.metadata);
          }
          return null;
      }
      isApplyingToNode(tNode) {
          if (this._appliesToNextNode &&
              (this.metadata.flags & 1 /* descendants */) !== 1 /* descendants */) {
              const declarationNodeIdx = this._declarationNodeIndex;
              let parent = tNode.parent;
              // Determine if a given TNode is a "direct" child of a node on which a content query was
              // declared (only direct children of query's host node can match with the descendants: false
              // option). There are 3 main use-case / conditions to consider here:
              // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query
              // host node;
              // - <needs-target><ng-template [ngIf]="true"><i #target></i></ng-template></needs-target>:
              // here <i #target> parent node is null;
              // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need
              // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse
              // up past the query's host node!).
              while (parent !== null && (parent.type & 8 /* ElementContainer */) &&
                  parent.index !== declarationNodeIdx) {
                  parent = parent.parent;
              }
              return declarationNodeIdx === (parent !== null ? parent.index : -1);
          }
          return this._appliesToNextNode;
      }
      matchTNode(tView, tNode) {
          const predicate = this.metadata.predicate;
          if (Array.isArray(predicate)) {
              for (let i = 0; i < predicate.length; i++) {
                  const name = predicate[i];
                  this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));
                  // Also try matching the name to a provider since strings can be used as DI tokens too.
                  this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
              }
          }
          else {
              if (predicate === TemplateRef) {
                  if (tNode.type & 4 /* Container */) {
                      this.matchTNodeWithReadOption(tView, tNode, -1);
                  }
              }
              else {
                  this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
              }
          }
      }
      matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
          if (nodeMatchIdx !== null) {
              const read = this.metadata.read;
              if (read !== null) {
                  if (read === ElementRef || read === ViewContainerRef ||
                      read === TemplateRef && (tNode.type & 4 /* Container */)) {
                      this.addMatch(tNode.index, -2);
                  }
                  else {
                      const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);
                      if (directiveOrProviderIdx !== null) {
                          this.addMatch(tNode.index, directiveOrProviderIdx);
                      }
                  }
              }
              else {
                  this.addMatch(tNode.index, nodeMatchIdx);
              }
          }
      }
      addMatch(tNodeIdx, matchIdx) {
          if (this.matches === null) {
              this.matches = [tNodeIdx, matchIdx];
          }
          else {
              this.matches.push(tNodeIdx, matchIdx);
          }
      }
  }
  /**
   * Iterates over local names for a given node and returns directive index
   * (or -1 if a local name points to an element).
   *
   * @param tNode static data of a node to check
   * @param selector selector to match
   * @returns directive index, -1 or null if a selector didn't match any of the local names
   */
  function getIdxOfMatchingSelector(tNode, selector) {
      const localNames = tNode.localNames;
      if (localNames !== null) {
          for (let i = 0; i < localNames.length; i += 2) {
              if (localNames[i] === selector) {
                  return localNames[i + 1];
              }
          }
      }
      return null;
  }
  function createResultByTNodeType(tNode, currentView) {
      if (tNode.type & (3 /* AnyRNode */ | 8 /* ElementContainer */)) {
          return createElementRef(tNode, currentView);
      }
      else if (tNode.type & 4 /* Container */) {
          return createTemplateRef(tNode, currentView);
      }
      return null;
  }
  function createResultForNode(lView, tNode, matchingIdx, read) {
      if (matchingIdx === -1) {
          // if read token and / or strategy is not specified, detect it using appropriate tNode type
          return createResultByTNodeType(tNode, lView);
      }
      else if (matchingIdx === -2) {
          // read a special token from a node injector
          return createSpecialToken(lView, tNode, read);
      }
      else {
          // read a token
          return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
      }
  }
  function createSpecialToken(lView, tNode, read) {
      if (read === ElementRef) {
          return createElementRef(tNode, lView);
      }
      else if (read === TemplateRef) {
          return createTemplateRef(tNode, lView);
      }
      else if (read === ViewContainerRef) {
          ngDevMode && assertTNodeType(tNode, 3 /* AnyRNode */ | 12 /* AnyContainer */);
          return createContainerRef(tNode, lView);
      }
      else {
          ngDevMode &&
              throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);
      }
  }
  /**
   * A helper function that creates query results for a given view. This function is meant to do the
   * processing once and only once for a given view instance (a set of results for a given view
   * doesn't change).
   */
  function materializeViewResults(tView, lView, tQuery, queryIndex) {
      const lQuery = lView[QUERIES].queries[queryIndex];
      if (lQuery.matches === null) {
          const tViewData = tView.data;
          const tQueryMatches = tQuery.matches;
          const result = [];
          for (let i = 0; i < tQueryMatches.length; i += 2) {
              const matchedNodeIdx = tQueryMatches[i];
              if (matchedNodeIdx < 0) {
                  // we at the <ng-template> marker which might have results in views created based on this
                  // <ng-template> - those results will be in separate views though, so here we just leave
                  // null as a placeholder
                  result.push(null);
              }
              else {
                  ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
                  const tNode = tViewData[matchedNodeIdx];
                  result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
              }
          }
          lQuery.matches = result;
      }
      return lQuery.matches;
  }
  /**
   * A helper function that collects (already materialized) query results from a tree of views,
   * starting with a provided LView.
   */
  function collectQueryResults(tView, lView, queryIndex, result) {
      const tQuery = tView.queries.getByIndex(queryIndex);
      const tQueryMatches = tQuery.matches;
      if (tQueryMatches !== null) {
          const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);
          for (let i = 0; i < tQueryMatches.length; i += 2) {
              const tNodeIdx = tQueryMatches[i];
              if (tNodeIdx > 0) {
                  result.push(lViewResults[i / 2]);
              }
              else {
                  const childQueryIndex = tQueryMatches[i + 1];
                  const declarationLContainer = lView[-tNodeIdx];
                  ngDevMode && assertLContainer(declarationLContainer);
                  // collect matches for views inserted in this container
                  for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {
                      const embeddedLView = declarationLContainer[i];
                      if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
                          collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
                      }
                  }
                  // collect matches for views created from this declaration container and inserted into
                  // different containers
                  if (declarationLContainer[MOVED_VIEWS] !== null) {
                      const embeddedLViews = declarationLContainer[MOVED_VIEWS];
                      for (let i = 0; i < embeddedLViews.length; i++) {
                          const embeddedLView = embeddedLViews[i];
                          collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
                      }
                  }
              }
          }
      }
      return result;
  }
  /**
   * Refreshes a query by combining matches from all active views and removing matches from deleted
   * views.
   *
   * @returns `true` if a query got dirty during change detection or if this is a static query
   * resolving in creation mode, `false` otherwise.
   *
   * @codeGenApi
   */
  function ÉµÉµqueryRefresh(queryList) {
      const lView = getLView();
      const tView = getTView();
      const queryIndex = getCurrentQueryIndex();
      setCurrentQueryIndex(queryIndex + 1);
      const tQuery = getTQuery(tView, queryIndex);
      if (queryList.dirty &&
          (isCreationMode(lView) ===
              ((tQuery.metadata.flags & 2 /* isStatic */) === 2 /* isStatic */))) {
          if (tQuery.matches === null) {
              queryList.reset([]);
          }
          else {
              const result = tQuery.crossesNgTemplate ?
                  collectQueryResults(tView, lView, queryIndex, []) :
                  materializeViewResults(tView, lView, tQuery, queryIndex);
              queryList.reset(result, unwrapElementRef);
              queryList.notifyOnChanges();
          }
          return true;
      }
      return false;
  }
  /**
   * Creates new QueryList, stores the reference in LView and returns QueryList.
   *
   * @param predicate The type for which the query will search
   * @param flags Flags associated with the query
   * @param read What to save in the query
   *
   * @codeGenApi
   */
  function ÉµÉµviewQuery(predicate, flags, read) {
      ngDevMode && assertNumber(flags, 'Expecting flags');
      const tView = getTView();
      if (tView.firstCreatePass) {
          createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);
          if ((flags & 2 /* isStatic */) === 2 /* isStatic */) {
              tView.staticViewQueries = true;
          }
      }
      createLQuery(tView, getLView(), flags);
  }
  /**
   * Registers a QueryList, associated with a content query, for later refresh (part of a view
   * refresh).
   *
   * @param directiveIndex Current directive index
   * @param predicate The type for which the query will search
   * @param flags Flags associated with the query
   * @param read What to save in the query
   * @returns QueryList<T>
   *
   * @codeGenApi
   */
  function ÉµÉµcontentQuery(directiveIndex, predicate, flags, read) {
      ngDevMode && assertNumber(flags, 'Expecting flags');
      const tView = getTView();
      if (tView.firstCreatePass) {
          const tNode = getCurrentTNode();
          createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
          saveContentQueryAndDirectiveIndex(tView, directiveIndex);
          if ((flags & 2 /* isStatic */) === 2 /* isStatic */) {
              tView.staticContentQueries = true;
          }
      }
      createLQuery(tView, getLView(), flags);
  }
  /**
   * Loads a QueryList corresponding to the current view or content query.
   *
   * @codeGenApi
   */
  function ÉµÉµloadQuery() {
      return loadQueryInternal(getLView(), getCurrentQueryIndex());
  }
  function loadQueryInternal(lView, queryIndex) {
      ngDevMode &&
          assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');
      ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
      return lView[QUERIES].queries[queryIndex].queryList;
  }
  function createLQuery(tView, lView, flags) {
      const queryList = new QueryList((flags & 4 /* emitDistinctChangesOnly */) === 4 /* emitDistinctChangesOnly */);
      storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
      if (lView[QUERIES] === null)
          lView[QUERIES] = new LQueries_();
      lView[QUERIES].queries.push(new LQuery_(queryList));
  }
  function createTQuery(tView, metadata, nodeIndex) {
      if (tView.queries === null)
          tView.queries = new TQueries_();
      tView.queries.track(new TQuery_(metadata, nodeIndex));
  }
  function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
      const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
      const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;
      if (directiveIndex !== lastSavedDirectiveIndex) {
          tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
      }
  }
  function getTQuery(tView, index) {
      ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');
      return tView.queries.getByIndex(index);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the
   * `<ng-template>` element.
   *
   * @codeGenApi
   */
  function ÉµÉµtemplateRefExtractor(tNode, lView) {
      return createTemplateRef(tNode, lView);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
   *
   * This should be kept up to date with the public exports of @angular/core.
   */
  const angularCoreEnv = (() => ({
      'ÉµÉµattribute': ÉµÉµattribute,
      'ÉµÉµattributeInterpolate1': ÉµÉµattributeInterpolate1,
      'ÉµÉµattributeInterpolate2': ÉµÉµattributeInterpolate2,
      'ÉµÉµattributeInterpolate3': ÉµÉµattributeInterpolate3,
      'ÉµÉµattributeInterpolate4': ÉµÉµattributeInterpolate4,
      'ÉµÉµattributeInterpolate5': ÉµÉµattributeInterpolate5,
      'ÉµÉµattributeInterpolate6': ÉµÉµattributeInterpolate6,
      'ÉµÉµattributeInterpolate7': ÉµÉµattributeInterpolate7,
      'ÉµÉµattributeInterpolate8': ÉµÉµattributeInterpolate8,
      'ÉµÉµattributeInterpolateV': ÉµÉµattributeInterpolateV,
      'ÉµÉµdefineComponent': ÉµÉµdefineComponent,
      'ÉµÉµdefineDirective': ÉµÉµdefineDirective,
      'ÉµÉµdefineInjectable': ÉµÉµdefineInjectable,
      'ÉµÉµdefineInjector': ÉµÉµdefineInjector,
      'ÉµÉµdefineNgModule': ÉµÉµdefineNgModule,
      'ÉµÉµdefinePipe': ÉµÉµdefinePipe,
      'ÉµÉµdirectiveInject': ÉµÉµdirectiveInject,
      'ÉµÉµgetInheritedFactory': ÉµÉµgetInheritedFactory,
      'ÉµÉµinject': ÉµÉµinject,
      'ÉµÉµinjectAttribute': ÉµÉµinjectAttribute,
      'ÉµÉµinvalidFactory': ÉµÉµinvalidFactory,
      'ÉµÉµinvalidFactoryDep': ÉµÉµinvalidFactoryDep,
      'ÉµÉµtemplateRefExtractor': ÉµÉµtemplateRefExtractor,
      'ÉµÉµNgOnChangesFeature': ÉµÉµNgOnChangesFeature,
      'ÉµÉµProvidersFeature': ÉµÉµProvidersFeature,
      'ÉµÉµCopyDefinitionFeature': ÉµÉµCopyDefinitionFeature,
      'ÉµÉµInheritDefinitionFeature': ÉµÉµInheritDefinitionFeature,
      'ÉµÉµnextContext': ÉµÉµnextContext,
      'ÉµÉµnamespaceHTML': ÉµÉµnamespaceHTML,
      'ÉµÉµnamespaceMathML': ÉµÉµnamespaceMathML,
      'ÉµÉµnamespaceSVG': ÉµÉµnamespaceSVG,
      'ÉµÉµenableBindings': ÉµÉµenableBindings,
      'ÉµÉµdisableBindings': ÉµÉµdisableBindings,
      'ÉµÉµelementStart': ÉµÉµelementStart,
      'ÉµÉµelementEnd': ÉµÉµelementEnd,
      'ÉµÉµelement': ÉµÉµelement,
      'ÉµÉµelementContainerStart': ÉµÉµelementContainerStart,
      'ÉµÉµelementContainerEnd': ÉµÉµelementContainerEnd,
      'ÉµÉµelementContainer': ÉµÉµelementContainer,
      'ÉµÉµpureFunction0': ÉµÉµpureFunction0,
      'ÉµÉµpureFunction1': ÉµÉµpureFunction1,
      'ÉµÉµpureFunction2': ÉµÉµpureFunction2,
      'ÉµÉµpureFunction3': ÉµÉµpureFunction3,
      'ÉµÉµpureFunction4': ÉµÉµpureFunction4,
      'ÉµÉµpureFunction5': ÉµÉµpureFunction5,
      'ÉµÉµpureFunction6': ÉµÉµpureFunction6,
      'ÉµÉµpureFunction7': ÉµÉµpureFunction7,
      'ÉµÉµpureFunction8': ÉµÉµpureFunction8,
      'ÉµÉµpureFunctionV': ÉµÉµpureFunctionV,
      'ÉµÉµgetCurrentView': ÉµÉµgetCurrentView,
      'ÉµÉµrestoreView': ÉµÉµrestoreView,
      'ÉµÉµlistener': ÉµÉµlistener,
      'ÉµÉµprojection': ÉµÉµprojection,
      'ÉµÉµsyntheticHostProperty': ÉµÉµsyntheticHostProperty,
      'ÉµÉµsyntheticHostListener': ÉµÉµsyntheticHostListener,
      'ÉµÉµpipeBind1': ÉµÉµpipeBind1,
      'ÉµÉµpipeBind2': ÉµÉµpipeBind2,
      'ÉµÉµpipeBind3': ÉµÉµpipeBind3,
      'ÉµÉµpipeBind4': ÉµÉµpipeBind4,
      'ÉµÉµpipeBindV': ÉµÉµpipeBindV,
      'ÉµÉµprojectionDef': ÉµÉµprojectionDef,
      'ÉµÉµhostProperty': ÉµÉµhostProperty,
      'ÉµÉµproperty': ÉµÉµproperty,
      'ÉµÉµpropertyInterpolate': ÉµÉµpropertyInterpolate,
      'ÉµÉµpropertyInterpolate1': ÉµÉµpropertyInterpolate1,
      'ÉµÉµpropertyInterpolate2': ÉµÉµpropertyInterpolate2,
      'ÉµÉµpropertyInterpolate3': ÉµÉµpropertyInterpolate3,
      'ÉµÉµpropertyInterpolate4': ÉµÉµpropertyInterpolate4,
      'ÉµÉµpropertyInterpolate5': ÉµÉµpropertyInterpolate5,
      'ÉµÉµpropertyInterpolate6': ÉµÉµpropertyInterpolate6,
      'ÉµÉµpropertyInterpolate7': ÉµÉµpropertyInterpolate7,
      'ÉµÉµpropertyInterpolate8': ÉµÉµpropertyInterpolate8,
      'ÉµÉµpropertyInterpolateV': ÉµÉµpropertyInterpolateV,
      'ÉµÉµpipe': ÉµÉµpipe,
      'ÉµÉµqueryRefresh': ÉµÉµqueryRefresh,
      'ÉµÉµviewQuery': ÉµÉµviewQuery,
      'ÉµÉµloadQuery': ÉµÉµloadQuery,
      'ÉµÉµcontentQuery': ÉµÉµcontentQuery,
      'ÉµÉµreference': ÉµÉµreference,
      'ÉµÉµclassMap': ÉµÉµclassMap,
      'ÉµÉµclassMapInterpolate1': ÉµÉµclassMapInterpolate1,
      'ÉµÉµclassMapInterpolate2': ÉµÉµclassMapInterpolate2,
      'ÉµÉµclassMapInterpolate3': ÉµÉµclassMapInterpolate3,
      'ÉµÉµclassMapInterpolate4': ÉµÉµclassMapInterpolate4,
      'ÉµÉµclassMapInterpolate5': ÉµÉµclassMapInterpolate5,
      'ÉµÉµclassMapInterpolate6': ÉµÉµclassMapInterpolate6,
      'ÉµÉµclassMapInterpolate7': ÉµÉµclassMapInterpolate7,
      'ÉµÉµclassMapInterpolate8': ÉµÉµclassMapInterpolate8,
      'ÉµÉµclassMapInterpolateV': ÉµÉµclassMapInterpolateV,
      'ÉµÉµstyleMap': ÉµÉµstyleMap,
      'ÉµÉµstyleMapInterpolate1': ÉµÉµstyleMapInterpolate1,
      'ÉµÉµstyleMapInterpolate2': ÉµÉµstyleMapInterpolate2,
      'ÉµÉµstyleMapInterpolate3': ÉµÉµstyleMapInterpolate3,
      'ÉµÉµstyleMapInterpolate4': ÉµÉµstyleMapInterpolate4,
      'ÉµÉµstyleMapInterpolate5': ÉµÉµstyleMapInterpolate5,
      'ÉµÉµstyleMapInterpolate6': ÉµÉµstyleMapInterpolate6,
      'ÉµÉµstyleMapInterpolate7': ÉµÉµstyleMapInterpolate7,
      'ÉµÉµstyleMapInterpolate8': ÉµÉµstyleMapInterpolate8,
      'ÉµÉµstyleMapInterpolateV': ÉµÉµstyleMapInterpolateV,
      'ÉµÉµstyleProp': ÉµÉµstyleProp,
      'ÉµÉµstylePropInterpolate1': ÉµÉµstylePropInterpolate1,
      'ÉµÉµstylePropInterpolate2': ÉµÉµstylePropInterpolate2,
      'ÉµÉµstylePropInterpolate3': ÉµÉµstylePropInterpolate3,
      'ÉµÉµstylePropInterpolate4': ÉµÉµstylePropInterpolate4,
      'ÉµÉµstylePropInterpolate5': ÉµÉµstylePropInterpolate5,
      'ÉµÉµstylePropInterpolate6': ÉµÉµstylePropInterpolate6,
      'ÉµÉµstylePropInterpolate7': ÉµÉµstylePropInterpolate7,
      'ÉµÉµstylePropInterpolate8': ÉµÉµstylePropInterpolate8,
      'ÉµÉµstylePropInterpolateV': ÉµÉµstylePropInterpolateV,
      'ÉµÉµclassProp': ÉµÉµclassProp,
      'ÉµÉµadvance': ÉµÉµadvance,
      'ÉµÉµtemplate': ÉµÉµtemplate,
      'ÉµÉµtext': ÉµÉµtext,
      'ÉµÉµtextInterpolate': ÉµÉµtextInterpolate,
      'ÉµÉµtextInterpolate1': ÉµÉµtextInterpolate1,
      'ÉµÉµtextInterpolate2': ÉµÉµtextInterpolate2,
      'ÉµÉµtextInterpolate3': ÉµÉµtextInterpolate3,
      'ÉµÉµtextInterpolate4': ÉµÉµtextInterpolate4,
      'ÉµÉµtextInterpolate5': ÉµÉµtextInterpolate5,
      'ÉµÉµtextInterpolate6': ÉµÉµtextInterpolate6,
      'ÉµÉµtextInterpolate7': ÉµÉµtextInterpolate7,
      'ÉµÉµtextInterpolate8': ÉµÉµtextInterpolate8,
      'ÉµÉµtextInterpolateV': ÉµÉµtextInterpolateV,
      'ÉµÉµi18n': ÉµÉµi18n,
      'ÉµÉµi18nAttributes': ÉµÉµi18nAttributes,
      'ÉµÉµi18nExp': ÉµÉµi18nExp,
      'ÉµÉµi18nStart': ÉµÉµi18nStart,
      'ÉµÉµi18nEnd': ÉµÉµi18nEnd,
      'ÉµÉµi18nApply': ÉµÉµi18nApply,
      'ÉµÉµi18nPostprocess': ÉµÉµi18nPostprocess,
      'ÉµÉµresolveWindow': ÉµÉµresolveWindow,
      'ÉµÉµresolveDocument': ÉµÉµresolveDocument,
      'ÉµÉµresolveBody': ÉµÉµresolveBody,
      'ÉµÉµsetComponentScope': ÉµÉµsetComponentScope,
      'ÉµÉµsetNgModuleScope': ÉµÉµsetNgModuleScope,
      'ÉµÉµsanitizeHtml': ÉµÉµsanitizeHtml,
      'ÉµÉµsanitizeStyle': ÉµÉµsanitizeStyle,
      'ÉµÉµsanitizeResourceUrl': ÉµÉµsanitizeResourceUrl,
      'ÉµÉµsanitizeScript': ÉµÉµsanitizeScript,
      'ÉµÉµsanitizeUrl': ÉµÉµsanitizeUrl,
      'ÉµÉµsanitizeUrlOrResourceUrl': ÉµÉµsanitizeUrlOrResourceUrl,
      'ÉµÉµtrustConstantHtml': ÉµÉµtrustConstantHtml,
      'ÉµÉµtrustConstantResourceUrl': ÉµÉµtrustConstantResourceUrl,
      'forwardRef': forwardRef,
      'resolveForwardRef': resolveForwardRef,
  }))();
  
  let jitOptions = null;
  function setJitOptions(options) {
      if (jitOptions !== null) {
          if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
              ngDevMode &&
                  console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');
              return;
          }
          if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
              ngDevMode &&
                  console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');
              return;
          }
      }
      jitOptions = options;
  }
  function getJitOptions() {
      return jitOptions;
  }
  function resetJitOptions() {
      jitOptions = null;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const moduleQueue = [];
  /**
   * Enqueues moduleDef to be checked later to see if scope can be set on its
   * component declarations.
   */
  function enqueueModuleForDelayedScoping(moduleType, ngModule) {
      moduleQueue.push({ moduleType, ngModule });
  }
  let flushingModuleQueue = false;
  /**
   * Loops over queued module definitions, if a given module definition has all of its
   * declarations resolved, it dequeues that module definition and sets the scope on
   * its declarations.
   */
  function flushModuleScopingQueueAsMuchAsPossible() {
      if (!flushingModuleQueue) {
          flushingModuleQueue = true;
          try {
              for (let i = moduleQueue.length - 1; i >= 0; i--) {
                  const { moduleType, ngModule } = moduleQueue[i];
                  if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
                      // dequeue
                      moduleQueue.splice(i, 1);
                      setScopeOnDeclaredComponents(moduleType, ngModule);
                  }
              }
          }
          finally {
              flushingModuleQueue = false;
          }
      }
  }
  /**
   * Returns truthy if a declaration has resolved. If the declaration happens to be
   * an array of declarations, it will recurse to check each declaration in that array
   * (which may also be arrays).
   */
  function isResolvedDeclaration(declaration) {
      if (Array.isArray(declaration)) {
          return declaration.every(isResolvedDeclaration);
      }
      return !!resolveForwardRef(declaration);
  }
  /**
   * Compiles a module in JIT mode.
   *
   * This function automatically gets called when a class has a `@NgModule` decorator.
   */
  function compileNgModule(moduleType, ngModule = {}) {
      compileNgModuleDefs(moduleType, ngModule);
      // Because we don't know if all declarations have resolved yet at the moment the
      // NgModule decorator is executing, we're enqueueing the setting of module scope
      // on its declarations to be run at a later time when all declarations for the module,
      // including forward refs, have resolved.
      enqueueModuleForDelayedScoping(moduleType, ngModule);
  }
  /**
   * Compiles and adds the `Éµmod`, `Éµfac` and `Éµinj` properties to the module class.
   *
   * It's possible to compile a module via this API which will allow duplicate declarations in its
   * root.
   */
  function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {
      ngDevMode && assertDefined(moduleType, 'Required value moduleType');
      ngDevMode && assertDefined(ngModule, 'Required value ngModule');
      const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
      let ngModuleDef = null;
      Object.defineProperty(moduleType, NG_MOD_DEF, {
          configurable: true,
          get: () => {
              if (ngModuleDef === null) {
                  if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
                      // We need to assert this immediately, because allowing it to continue will cause it to
                      // go into an infinite loop before we've reached the point where we throw all the errors.
                      throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);
                  }
                  const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'NgModule', type: moduleType });
                  ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/Éµmod.js`, {
                      type: moduleType,
                      bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),
                      declarations: declarations.map(resolveForwardRef),
                      imports: flatten(ngModule.imports || EMPTY_ARRAY)
                          .map(resolveForwardRef)
                          .map(expandModuleWithProviders),
                      exports: flatten(ngModule.exports || EMPTY_ARRAY)
                          .map(resolveForwardRef)
                          .map(expandModuleWithProviders),
                      schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
                      id: ngModule.id || null,
                  });
                  // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime
                  // should verify that there are no unknown elements in a template. In AOT mode, that check
                  // happens at compile time and `schemas` information is not present on Component and Module
                  // defs after compilation (so the check doesn't happen the second time at runtime).
                  if (!ngModuleDef.schemas) {
                      ngModuleDef.schemas = [];
                  }
              }
              return ngModuleDef;
          }
      });
      let ngFactoryDef = null;
      Object.defineProperty(moduleType, NG_FACTORY_DEF, {
          get: () => {
              if (ngFactoryDef === null) {
                  const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'NgModule', type: moduleType });
                  ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/Éµfac.js`, {
                      name: moduleType.name,
                      type: moduleType,
                      deps: reflectDependencies(moduleType),
                      target: compiler.FactoryTarget.NgModule,
                      typeArgumentCount: 0,
                  });
              }
              return ngFactoryDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode,
      });
      let ngInjectorDef = null;
      Object.defineProperty(moduleType, NG_INJ_DEF, {
          get: () => {
              if (ngInjectorDef === null) {
                  ngDevMode &&
                      verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
                  const meta = {
                      name: moduleType.name,
                      type: moduleType,
                      providers: ngModule.providers || EMPTY_ARRAY,
                      imports: [
                          (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),
                          (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef),
                      ],
                  };
                  const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'NgModule', type: moduleType });
                  ngInjectorDef =
                      compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/Éµinj.js`, meta);
              }
              return ngInjectorDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode,
      });
  }
  function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
      if (verifiedNgModule.get(moduleType))
          return;
      verifiedNgModule.set(moduleType, true);
      moduleType = resolveForwardRef(moduleType);
      let ngModuleDef;
      if (importingModule) {
          ngModuleDef = getNgModuleDef(moduleType);
          if (!ngModuleDef) {
              throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
          }
      }
      else {
          ngModuleDef = getNgModuleDef(moduleType, true);
      }
      const errors = [];
      const declarations = maybeUnwrapFn(ngModuleDef.declarations);
      const imports = maybeUnwrapFn(ngModuleDef.imports);
      flatten(imports).map(unwrapModuleWithProvidersImports).forEach(mod => {
          verifySemanticsOfNgModuleImport(mod, moduleType);
          verifySemanticsOfNgModuleDef(mod, false, moduleType);
      });
      const exports = maybeUnwrapFn(ngModuleDef.exports);
      declarations.forEach(verifyDeclarationsHaveDefinitions);
      declarations.forEach(verifyDirectivesHaveSelector);
      const combinedDeclarations = [
          ...declarations.map(resolveForwardRef),
          ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef),
      ];
      exports.forEach(verifyExportsAreDeclaredOrReExported);
      declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));
      declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);
      const ngModule = getAnnotation(moduleType, 'NgModule');
      if (ngModule) {
          ngModule.imports &&
              flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {
                  verifySemanticsOfNgModuleImport(mod, moduleType);
                  verifySemanticsOfNgModuleDef(mod, false, moduleType);
              });
          ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
          ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
          ngModule.entryComponents &&
              deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);
      }
      // Throw Error if any errors were detected.
      if (errors.length) {
          throw new Error(errors.join('\n'));
      }
      ////////////////////////////////////////////////////////////////////////////////////////////////
      function verifyDeclarationsHaveDefinitions(type) {
          type = resolveForwardRef(type);
          const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
          if (!def) {
              errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);
          }
      }
      function verifyDirectivesHaveSelector(type) {
          type = resolveForwardRef(type);
          const def = getDirectiveDef(type);
          if (!getComponentDef(type) && def && def.selectors.length == 0) {
              errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);
          }
      }
      function verifyExportsAreDeclaredOrReExported(type) {
          type = resolveForwardRef(type);
          const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||
              getPipeDef$1(type) && 'pipe';
          if (kind) {
              // only checked if we are declared as Component, Directive, or Pipe
              // Modules don't need to be declared or imported.
              if (combinedDeclarations.lastIndexOf(type) === -1) {
                  // We are exporting something which we don't explicitly declare or import.
                  errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);
              }
          }
      }
      function verifyDeclarationIsUnique(type, suppressErrors) {
          type = resolveForwardRef(type);
          const existingModule = ownerNgModule.get(type);
          if (existingModule && existingModule !== moduleType) {
              if (!suppressErrors) {
                  const modules = [existingModule, moduleType].map(stringifyForError).sort();
                  errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +
                      `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +
                      `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);
              }
          }
          else {
              // Mark type as having owner.
              ownerNgModule.set(type, moduleType);
          }
      }
      function verifyComponentIsPartOfNgModule(type) {
          type = resolveForwardRef(type);
          const existingModule = ownerNgModule.get(type);
          if (!existingModule) {
              errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);
          }
      }
      function verifyCorrectBootstrapType(type) {
          type = resolveForwardRef(type);
          if (!getComponentDef(type)) {
              errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);
          }
      }
      function verifyComponentEntryComponentsIsPartOfNgModule(type) {
          type = resolveForwardRef(type);
          if (getComponentDef(type)) {
              // We know we are component
              const component = getAnnotation(type, 'Component');
              if (component && component.entryComponents) {
                  deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);
              }
          }
      }
      function verifySemanticsOfNgModuleImport(type, importingModule) {
          type = resolveForwardRef(type);
          if (getComponentDef(type) || getDirectiveDef(type)) {
              throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
          }
          if (getPipeDef$1(type)) {
              throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
          }
      }
  }
  function unwrapModuleWithProvidersImports(typeOrWithProviders) {
      typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
      return typeOrWithProviders.ngModule || typeOrWithProviders;
  }
  function getAnnotation(type, name) {
      let annotation = null;
      collect(type.__annotations__);
      collect(type.decorators);
      return annotation;
      function collect(annotations) {
          if (annotations) {
              annotations.forEach(readAnnotation);
          }
      }
      function readAnnotation(decorator) {
          if (!annotation) {
              const proto = Object.getPrototypeOf(decorator);
              if (proto.ngMetadataName == name) {
                  annotation = decorator;
              }
              else if (decorator.type) {
                  const proto = Object.getPrototypeOf(decorator.type);
                  if (proto.ngMetadataName == name) {
                      annotation = decorator.args[0];
                  }
              }
          }
      }
  }
  /**
   * Keep track of compiled components. This is needed because in tests we often want to compile the
   * same component with more than one NgModule. This would cause an error unless we reset which
   * NgModule the component belongs to. We keep the list of compiled components here so that the
   * TestBed can reset it later.
   */
  let ownerNgModule = new WeakMap();
  let verifiedNgModule = new WeakMap();
  function resetCompiledComponents() {
      ownerNgModule = new WeakMap();
      verifiedNgModule = new WeakMap();
      moduleQueue.length = 0;
  }
  /**
   * Computes the combined declarations of explicit declarations, as well as declarations inherited by
   * traversing the exports of imported modules.
   * @param type
   */
  function computeCombinedExports(type) {
      type = resolveForwardRef(type);
      const ngModuleDef = getNgModuleDef(type, true);
      return [...flatten(maybeUnwrapFn(ngModuleDef.exports).map((type) => {
              const ngModuleDef = getNgModuleDef(type);
              if (ngModuleDef) {
                  verifySemanticsOfNgModuleDef(type, false);
                  return computeCombinedExports(type);
              }
              else {
                  return type;
              }
          }))];
  }
  /**
   * Some declared components may be compiled asynchronously, and thus may not have their
   * Éµcmp set yet. If this is the case, then a reference to the module is written into
   * the `ngSelectorScope` property of the declared type.
   */
  function setScopeOnDeclaredComponents(moduleType, ngModule) {
      const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
      const transitiveScopes = transitiveScopesFor(moduleType);
      declarations.forEach(declaration => {
          if (declaration.hasOwnProperty(NG_COMP_DEF)) {
              // A `Éµcmp` field exists - go ahead and patch the component directly.
              const component = declaration;
              const componentDef = getComponentDef(component);
              patchComponentDefWithScope(componentDef, transitiveScopes);
          }
          else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
              // Set `ngSelectorScope` for future reference when the component compilation finishes.
              declaration.ngSelectorScope = moduleType;
          }
      });
  }
  /**
   * Patch the definition of a component with directives and pipes from the compilation scope of
   * a given module.
   */
  function patchComponentDefWithScope(componentDef, transitiveScopes) {
      componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives)
          .map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir))
          .filter(def => !!def);
      componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));
      componentDef.schemas = transitiveScopes.schemas;
      // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we
      // may face a problem where previously compiled defs available to a given Component/Directive
      // are cached in TView and may become stale (in case any of these defs gets recompiled). In
      // order to avoid this problem, we force fresh TView to be created.
      componentDef.tView = null;
  }
  /**
   * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.
   *
   * This operation is memoized and the result is cached on the module's definition. This function can
   * be called on modules with components that have not fully compiled yet, but the result should not
   * be used until they have.
   *
   * @param moduleType module that transitive scope should be calculated for.
   */
  function transitiveScopesFor(moduleType) {
      if (!isNgModule(moduleType)) {
          throw new Error(`${moduleType.name} does not have a module def (Éµmod property)`);
      }
      const def = getNgModuleDef(moduleType);
      if (def.transitiveCompileScopes !== null) {
          return def.transitiveCompileScopes;
      }
      const scopes = {
          schemas: def.schemas || null,
          compilation: {
              directives: new Set(),
              pipes: new Set(),
          },
          exported: {
              directives: new Set(),
              pipes: new Set(),
          },
      };
      maybeUnwrapFn(def.imports).forEach((imported) => {
          const importedType = imported;
          if (!isNgModule(importedType)) {
              throw new Error(`Importing ${importedType.name} which does not have a Éµmod property`);
          }
          // When this module imports another, the imported module's exported directives and pipes are
          // added to the compilation scope of this module.
          const importedScope = transitiveScopesFor(importedType);
          importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));
          importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));
      });
      maybeUnwrapFn(def.declarations).forEach(declared => {
          const declaredWithDefs = declared;
          if (getPipeDef$1(declaredWithDefs)) {
              scopes.compilation.pipes.add(declared);
          }
          else {
              // Either declared has a Éµcmp or Éµdir, or it's a component which hasn't
              // had its template compiled yet. In either case, it gets added to the compilation's
              // directives.
              scopes.compilation.directives.add(declared);
          }
      });
      maybeUnwrapFn(def.exports).forEach((exported) => {
          const exportedType = exported;
          // Either the type is a module, a pipe, or a component/directive (which may not have a
          // Éµcmp as it might be compiled asynchronously).
          if (isNgModule(exportedType)) {
              // When this module exports another, the exported module's exported directives and pipes are
              // added to both the compilation and exported scopes of this module.
              const exportedScope = transitiveScopesFor(exportedType);
              exportedScope.exported.directives.forEach(entry => {
                  scopes.compilation.directives.add(entry);
                  scopes.exported.directives.add(entry);
              });
              exportedScope.exported.pipes.forEach(entry => {
                  scopes.compilation.pipes.add(entry);
                  scopes.exported.pipes.add(entry);
              });
          }
          else if (getPipeDef$1(exportedType)) {
              scopes.exported.pipes.add(exportedType);
          }
          else {
              scopes.exported.directives.add(exportedType);
          }
      });
      def.transitiveCompileScopes = scopes;
      return scopes;
  }
  function expandModuleWithProviders(value) {
      if (isModuleWithProviders(value)) {
          return value.ngModule;
      }
      return value;
  }
  function isModuleWithProviders(value) {
      return value.ngModule !== undefined;
  }
  function isNgModule(value) {
      return !!getNgModuleDef(value);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This
   * matters in the following scenario:
   *
   * Consider a component 'A' that extends component 'B', both declared in module 'M'. During
   * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,
   * potentially triggering compilation of 'B'. If this nested compilation were to trigger
   * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the
   * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of
   * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid
   * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure
   * all compilations have finished.
   */
  let compilationDepth = 0;
  /**
   * Compile an Angular component according to its decorator metadata, and patch the resulting
   * component def (Éµcmp) onto the component type.
   *
   * Compilation may be asynchronous (due to the need to resolve URLs for the component template or
   * other resources, for example). In the event that compilation is not immediate, `compileComponent`
   * will enqueue resource resolution into a global queue and will fail to return the `Éµcmp`
   * until the global queue has been resolved with a call to `resolveComponentResources`.
   */
  function compileComponent(type, metadata) {
      // Initialize ngDevMode. This must be the first statement in compileComponent.
      // See the `initNgDevMode` docstring for more information.
      (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
      let ngComponentDef = null;
      // Metadata may have resources which need to be resolved.
      maybeQueueResolutionOfComponentResources(type, metadata);
      // Note that we're using the same function as `Directive`, because that's only subset of metadata
      // that we need to create the ngFactoryDef. We're avoiding using the component metadata
      // because we'd have to resolve the asynchronous templates.
      addDirectiveFactoryDef(type, metadata);
      Object.defineProperty(type, NG_COMP_DEF, {
          get: () => {
              if (ngComponentDef === null) {
                  const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'component', type: type });
                  if (componentNeedsResolution(metadata)) {
                      const error = [`Component '${type.name}' is not resolved:`];
                      if (metadata.templateUrl) {
                          error.push(` - templateUrl: ${metadata.templateUrl}`);
                      }
                      if (metadata.styleUrls && metadata.styleUrls.length) {
                          error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);
                      }
                      error.push(`Did you run and wait for 'resolveComponentResources()'?`);
                      throw new Error(error.join('\n'));
                  }
                  // This const was called `jitOptions` previously but had to be renamed to `options` because
                  // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.
                  // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.
                  // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.
                  const options = getJitOptions();
                  let preserveWhitespaces = metadata.preserveWhitespaces;
                  if (preserveWhitespaces === undefined) {
                      if (options !== null && options.preserveWhitespaces !== undefined) {
                          preserveWhitespaces = options.preserveWhitespaces;
                      }
                      else {
                          preserveWhitespaces = false;
                      }
                  }
                  let encapsulation = metadata.encapsulation;
                  if (encapsulation === undefined) {
                      if (options !== null && options.defaultEncapsulation !== undefined) {
                          encapsulation = options.defaultEncapsulation;
                      }
                      else {
                          encapsulation = ViewEncapsulation$1.Emulated;
                      }
                  }
                  const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;
                  const meta = {
                      ...directiveMetadata(type, metadata),
                      typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),
                      template: metadata.template || '',
                      preserveWhitespaces,
                      styles: metadata.styles || EMPTY_ARRAY,
                      animations: metadata.animations,
                      directives: [],
                      changeDetection: metadata.changeDetection,
                      pipes: new Map(),
                      encapsulation,
                      interpolation: metadata.interpolation,
                      viewProviders: metadata.viewProviders || null,
                  };
                  compilationDepth++;
                  try {
                      if (meta.usesInheritance) {
                          addDirectiveDefToUndecoratedParents(type);
                      }
                      ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
                  }
                  finally {
                      // Ensure that the compilation depth is decremented even when the compilation failed.
                      compilationDepth--;
                  }
                  if (compilationDepth === 0) {
                      // When NgModule decorator executed, we enqueued the module definition such that
                      // it would only dequeue and add itself as module scope to all of its declarations,
                      // but only if  if all of its declarations had resolved. This call runs the check
                      // to see if any modules that are in the queue can be dequeued and add scope to
                      // their declarations.
                      flushModuleScopingQueueAsMuchAsPossible();
                  }
                  // If component compilation is async, then the @NgModule annotation which declares the
                  // component may execute and set an ngSelectorScope property on the component type. This
                  // allows the component to patch itself with directiveDefs from the module after it
                  // finishes compiling.
                  if (hasSelectorScope(type)) {
                      const scopes = transitiveScopesFor(type.ngSelectorScope);
                      patchComponentDefWithScope(ngComponentDef, scopes);
                  }
              }
              return ngComponentDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode,
      });
  }
  function hasSelectorScope(component) {
      return component.ngSelectorScope !== undefined;
  }
  /**
   * Compile an Angular directive according to its decorator metadata, and patch the resulting
   * directive def onto the component type.
   *
   * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which
   * will resolve when compilation completes and the directive becomes usable.
   */
  function compileDirective(type, directive) {
      let ngDirectiveDef = null;
      addDirectiveFactoryDef(type, directive || {});
      Object.defineProperty(type, NG_DIR_DEF, {
          get: () => {
              if (ngDirectiveDef === null) {
                  // `directive` can be null in the case of abstract directives as a base class
                  // that use `@Directive()` with no selector. In that case, pass empty object to the
                  // `directiveMetadata` function instead of null.
                  const meta = getDirectiveMetadata(type, directive || {});
                  const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'directive', type });
                  ngDirectiveDef =
                      compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
              }
              return ngDirectiveDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode,
      });
  }
  function getDirectiveMetadata(type, metadata) {
      const name = type && type.name;
      const sourceMapUrl = `ng:///${name}/Éµdir.js`;
      const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'directive', type });
      const facade = directiveMetadata(type, metadata);
      facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);
      if (facade.usesInheritance) {
          addDirectiveDefToUndecoratedParents(type);
      }
      return { metadata: facade, sourceMapUrl };
  }
  function addDirectiveFactoryDef(type, metadata) {
      let ngFactoryDef = null;
      Object.defineProperty(type, NG_FACTORY_DEF, {
          get: () => {
              if (ngFactoryDef === null) {
                  const meta = getDirectiveMetadata(type, metadata);
                  const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'directive', type });
                  ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/Éµfac.js`, {
                      name: meta.metadata.name,
                      type: meta.metadata.type,
                      typeArgumentCount: 0,
                      deps: reflectDependencies(type),
                      target: compiler.FactoryTarget.Directive
                  });
              }
              return ngFactoryDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode,
      });
  }
  function extendsDirectlyFromObject(type) {
      return Object.getPrototypeOf(type.prototype) === Object.prototype;
  }
  /**
   * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a
   * `Component`).
   */
  function directiveMetadata(type, metadata) {
      // Reflect inputs and outputs.
      const reflect = getReflect();
      const propMetadata = reflect.ownPropMetadata(type);
      return {
          name: type.name,
          type: type,
          selector: metadata.selector !== undefined ? metadata.selector : null,
          host: metadata.host || EMPTY_OBJ,
          propMetadata: propMetadata,
          inputs: metadata.inputs || EMPTY_ARRAY,
          outputs: metadata.outputs || EMPTY_ARRAY,
          queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
          lifecycle: { usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges') },
          typeSourceSpan: null,
          usesInheritance: !extendsDirectlyFromObject(type),
          exportAs: extractExportAs(metadata.exportAs),
          providers: metadata.providers || null,
          viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery)
      };
  }
  /**
   * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.
   */
  function addDirectiveDefToUndecoratedParents(type) {
      const objPrototype = Object.prototype;
      let parent = Object.getPrototypeOf(type.prototype).constructor;
      // Go up the prototype until we hit `Object`.
      while (parent && parent !== objPrototype) {
          // Since inheritance works if the class was annotated already, we only need to add
          // the def if there are no annotations and the def hasn't been created already.
          if (!getDirectiveDef(parent) && !getComponentDef(parent) &&
              shouldAddAbstractDirective(parent)) {
              compileDirective(parent, null);
          }
          parent = Object.getPrototypeOf(parent);
      }
  }
  function convertToR3QueryPredicate(selector) {
      return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);
  }
  function convertToR3QueryMetadata(propertyName, ann) {
      return {
          propertyName: propertyName,
          predicate: convertToR3QueryPredicate(ann.selector),
          descendants: ann.descendants,
          first: ann.first,
          read: ann.read ? ann.read : null,
          static: !!ann.static,
          emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,
      };
  }
  function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
      const queriesMeta = [];
      for (const field in propMetadata) {
          if (propMetadata.hasOwnProperty(field)) {
              const annotations = propMetadata[field];
              annotations.forEach(ann => {
                  if (isQueryAnn(ann)) {
                      if (!ann.selector) {
                          throw new Error(`Can't construct a query for the property "${field}" of ` +
                              `"${stringifyForError(type)}" since the query selector wasn't defined.`);
                      }
                      if (annotations.some(isInputAnnotation)) {
                          throw new Error(`Cannot combine @Input decorators with query decorators`);
                      }
                      queriesMeta.push(convertToR3QueryMetadata(field, ann));
                  }
              });
          }
      }
      return queriesMeta;
  }
  function extractExportAs(exportAs) {
      return exportAs === undefined ? null : splitByComma(exportAs);
  }
  function isContentQuery(value) {
      const name = value.ngMetadataName;
      return name === 'ContentChild' || name === 'ContentChildren';
  }
  function isViewQuery(value) {
      const name = value.ngMetadataName;
      return name === 'ViewChild' || name === 'ViewChildren';
  }
  function isInputAnnotation(value) {
      return value.ngMetadataName === 'Input';
  }
  function splitByComma(value) {
      return value.split(',').map(piece => piece.trim());
  }
  const LIFECYCLE_HOOKS = [
      'ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked',
      'ngAfterContentInit', 'ngAfterContentChecked'
  ];
  function shouldAddAbstractDirective(type) {
      const reflect = getReflect();
      if (LIFECYCLE_HOOKS.some(hookName => reflect.hasLifecycleHook(type, hookName))) {
          return true;
      }
      const propMetadata = reflect.propMetadata(type);
      for (const field in propMetadata) {
          const annotations = propMetadata[field];
          for (let i = 0; i < annotations.length; i++) {
              const current = annotations[i];
              const metadataName = current.ngMetadataName;
              if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) ||
                  metadataName === 'Output' || metadataName === 'HostBinding' ||
                  metadataName === 'HostListener') {
                  return true;
              }
          }
      }
      return false;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function compilePipe(type, meta) {
      let ngPipeDef = null;
      let ngFactoryDef = null;
      Object.defineProperty(type, NG_FACTORY_DEF, {
          get: () => {
              if (ngFactoryDef === null) {
                  const metadata = getPipeMetadata(type, meta);
                  const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'pipe', type: metadata.type });
                  ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/Éµfac.js`, {
                      name: metadata.name,
                      type: metadata.type,
                      typeArgumentCount: 0,
                      deps: reflectDependencies(type),
                      target: compiler.FactoryTarget.Pipe
                  });
              }
              return ngFactoryDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode,
      });
      Object.defineProperty(type, NG_PIPE_DEF, {
          get: () => {
              if (ngPipeDef === null) {
                  const metadata = getPipeMetadata(type, meta);
                  const compiler = getCompilerFacade({ usage: 0 /* Decorator */, kind: 'pipe', type: metadata.type });
                  ngPipeDef =
                      compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/Éµpipe.js`, metadata);
              }
              return ngPipeDef;
          },
          // Make the property configurable in dev mode to allow overriding in tests
          configurable: !!ngDevMode,
      });
  }
  function getPipeMetadata(type, meta) {
      return {
          type: type,
          name: type.name,
          pipeName: meta.name,
          pure: meta.pure !== undefined ? meta.pure : true
      };
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Type of the Directive metadata.
   *
   * @publicApi
   */
  const Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => compileDirective(type, meta));
  /**
   * Component decorator and metadata.
   *
   * @Annotation
   * @publicApi
   */
  const Component = makeDecorator('Component', (c = {}) => ({ changeDetection: ChangeDetectionStrategy.Default, ...c }), Directive, undefined, (type, meta) => compileComponent(type, meta));
  /**
   * @Annotation
   * @publicApi
   */
  const Pipe = makeDecorator('Pipe', (p) => ({ pure: true, ...p }), undefined, undefined, (type, meta) => compilePipe(type, meta));
  /**
   * @Annotation
   * @publicApi
   */
  const Input = makePropDecorator('Input', (bindingPropertyName) => ({ bindingPropertyName }));
  /**
   * @Annotation
   * @publicApi
   */
  const Output = makePropDecorator('Output', (bindingPropertyName) => ({ bindingPropertyName }));
  /**
   * @Annotation
   * @publicApi
   */
  const HostBinding = makePropDecorator('HostBinding', (hostPropertyName) => ({ hostPropertyName }));
  /**
   * Decorator that binds a DOM event to a host listener and supplies configuration metadata.
   * Angular invokes the supplied handler method when the host element emits the specified event,
   * and updates the bound element with the result.
   *
   * If the handler method returns false, applies `preventDefault` on the bound element.
   *
   * @usageNotes
   *
   * The following example declares a directive
   * that attaches a click listener to a button and counts clicks.
   *
   * ```ts
   * @Directive({selector: 'button[counting]'})
   * class CountClicks {
   *   numberOfClicks = 0;
   *
   *   @HostListener('click', ['$event.target'])
   *   onClick(btn) {
   *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   template: '<button counting>Increment</button>',
   * })
   * class App {}
   *
   * ```
   *
   * The following example registers another DOM event handler that listens for `Enter` key-press
   * events on the global `window`.
   * ``` ts
   * import { HostListener, Component } from "@angular/core";
   *
   * @Component({
   *   selector: 'app',
   *   template: `<h1>Hello, you have pressed enter {{counter}} number of times!</h1> Press enter key
   * to increment the counter.
   *   <button (click)="resetCounter()">Reset Counter</button>`
   * })
   * class AppComponent {
   *   counter = 0;
   *   @HostListener('window:keydown.enter', ['$event'])
   *   handleKeyDown(event: KeyboardEvent) {
   *     this.counter++;
   *   }
   *   resetCounter() {
   *     this.counter = 0;
   *   }
   * }
   * ```
   * The list of valid key names for `keydown` and `keyup` events
   * can be found here:
   * https://www.w3.org/TR/DOM-Level-3-Events-key/#named-key-attribute-values
   *
   * Note that keys can also be combined, e.g. `@HostListener('keydown.shift.a')`.
   *
   * The global target names that can be used to prefix an event name are
   * `document:`, `window:` and `body:`.
   *
   * @Annotation
   * @publicApi
   */
  const HostListener = makePropDecorator('HostListener', (eventName, args) => ({ eventName, args }));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @Annotation
   * @publicApi
   */
  const NgModule = makeDecorator('NgModule', (ngModule) => ngModule, undefined, undefined, 
  /**
   * Decorator that marks the following class as an NgModule, and supplies
   * configuration metadata for it.
   *
   * * The `declarations` and `entryComponents` options configure the compiler
   * with information about what belongs to the NgModule.
   * * The `providers` options configures the NgModule's injector to provide
   * dependencies the NgModule members.
   * * The `imports` and `exports` options bring in members from other modules, and make
   * this module's members available to others.
   */
  (type, meta) => compileNgModule(type, meta));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function core_noop(...args) {
      // Do nothing.
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * The existence of this constant (in this particular file) informs the Angular compiler that the
   * current program is actually @angular/core, which needs to be compiled specially.
   */
  const ITS_JUST_ANGULAR = true;
  
  /**
   * A [DI token](guide/glossary#di-token "DI token definition") that you can use to provide
   * one or more initialization functions.
   *
   * The provided functions are injected at application startup and executed during
   * app initialization. If any of these functions returns a Promise or an Observable, initialization
   * does not complete until the Promise is resolved or the Observable is completed.
   *
   * You can, for example, create a factory function that loads language data
   * or an external configuration, and provide that function to the `APP_INITIALIZER` token.
   * The function is executed during the application bootstrap process,
   * and the needed data is available on startup.
   *
   * @see `ApplicationInitStatus`
   *
   * @usageNotes
   *
   * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token
   * and a function returning a promise.
   *
   * ```
   *  function initializeApp(): Promise<any> {
   *    return new Promise((resolve, reject) => {
   *      // Do some asynchronous stuff
   *      resolve();
   *    });
   *  }
   *
   *  @NgModule({
   *   imports: [BrowserModule],
   *   declarations: [AppComponent],
   *   bootstrap: [AppComponent],
   *   providers: [{
   *     provide: APP_INITIALIZER,
   *     useFactory: () => initializeApp,
   *     multi: true
   *    }]
   *   })
   *  export class AppModule {}
   * ```
   *
   * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function
   * returning an observable, see an example below. Note: the `HttpClient` in this example is used for
   * demo purposes to illustrate how the factory function can work with other providers available
   * through DI.
   *
   * ```
   *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {
   *   return () => httpClient.get("https://someUrl.com/api/user")
   *     .pipe(
   *        tap(user => { ... })
   *     );
   *  }
   *
   *  @NgModule({
   *    imports: [BrowserModule, HttpClientModule],
   *    declarations: [AppComponent],
   *    bootstrap: [AppComponent],
   *    providers: [{
   *      provide: APP_INITIALIZER,
   *      useFactory: initializeAppFactory,
   *      deps: [HttpClient],
   *      multi: true
   *    }]
   *  })
   *  export class AppModule {}
   * ```
   *
   * @publicApi
   */
  const APP_INITIALIZER = new InjectionToken('Application Initializer');
  /**
   * A class that reflects the state of running {@link APP_INITIALIZER} functions.
   *
   * @publicApi
   */
  class ApplicationInitStatus {
      constructor(appInits) {
          this.appInits = appInits;
          this.resolve = core_noop;
          this.reject = core_noop;
          this.initialized = false;
          this.done = false;
          this.donePromise = new Promise((res, rej) => {
              this.resolve = res;
              this.reject = rej;
          });
      }
      /** @internal */
      runInitializers() {
          if (this.initialized) {
              return;
          }
          const asyncInitPromises = [];
          const complete = () => {
              this.done = true;
              this.resolve();
          };
          if (this.appInits) {
              for (let i = 0; i < this.appInits.length; i++) {
                  const initResult = this.appInits[i]();
                  if (core_isPromise(initResult)) {
                      asyncInitPromises.push(initResult);
                  }
                  else if (isObservable(initResult)) {
                      const observableAsPromise = new Promise((resolve, reject) => {
                          initResult.subscribe({ complete: resolve, error: reject });
                      });
                      asyncInitPromises.push(observableAsPromise);
                  }
              }
          }
          Promise.all(asyncInitPromises)
              .then(() => {
              complete();
          })
              .catch(e => {
              this.reject(e);
          });
          if (asyncInitPromises.length === 0) {
              complete();
          }
          this.initialized = true;
      }
  }
  ApplicationInitStatus.Éµfac = function ApplicationInitStatus_Factory(t) { return new (t || ApplicationInitStatus)(ÉµÉµinject(APP_INITIALIZER, 8)); };
  ApplicationInitStatus.Éµprov = /*@__PURE__*/ ÉµÉµdefineInjectable({ token: ApplicationInitStatus, factory: ApplicationInitStatus.Éµfac, providedIn: 'root' });
  (function () { (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{
          type: Injectable,
          args: [{ providedIn: 'root' }]
      }], function () { return [{ type: undefined, decorators: [{
                  type: Inject,
                  args: [APP_INITIALIZER]
              }, {
                  type: Optional
              }] }]; }, null); })();
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * A [DI token](guide/glossary#di-token "DI token definition") representing a unique string ID, used
   * primarily for prefixing application attributes and CSS styles when
   * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
   *
   * BY default, the value is randomly generated and assigned to the application by Angular.
   * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure
   * the root {@link Injector} that uses this token.
   *
   * @publicApi
   */
  const APP_ID = new InjectionToken('AppId', {
      providedIn: 'root',
      factory: _appIdRandomProviderFactory,
  });
  function _appIdRandomProviderFactory() {
      return `${_randomChar()}${_randomChar()}${_randomChar()}`;
  }
  /**
   * Providers that generate a random `APP_ID_TOKEN`.
   * @publicApi
   */
  const APP_ID_RANDOM_PROVIDER = {
      provide: APP_ID,
      useFactory: _appIdRandomProviderFactory,
      deps: [],
  };
  function _randomChar() {
      return String.fromCharCode(97 + Math.floor(Math.random() * 25));
  }
  /**
   * A function that is executed when a platform is initialized.
   * @publicApi
   */
  const PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
  /**
   * A token that indicates an opaque platform ID.
   * @publicApi
   */
  const PLATFORM_ID = new InjectionToken('Platform ID', {
      providedIn: 'platform',
      factory: () => 'unknown', // set a default platform name, when none set explicitly
  });
  /**
   * A [DI token](guide/glossary#di-token "DI token definition") that provides a set of callbacks to
   * be called for every component that is bootstrapped.
   *
   * Each callback must take a `ComponentRef` instance and return nothing.
   *
   * `(componentRef: ComponentRef) => void`
   *
   * @publicApi
   */
  const APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
  /**
   * A [DI token](guide/glossary#di-token "DI token definition") that indicates the root directory of
   * the application
   * @publicApi
   */
  const PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class Console {
      log(message) {
          // tslint:disable-next-line:no-console
          console.log(message);
      }
      // Note: for reporting errors use `DOM.logError()` as it is platform specific
      warn(message) {
          // tslint:disable-next-line:no-console
          console.warn(message);
      }
  }
  Console.Éµfac = function Console_Factory(t) { return new (t || Console)(); };
  Console.Éµprov = /*@__PURE__*/ ÉµÉµdefineInjectable({ token: Console, factory: Console.Éµfac, providedIn: 'platform' });
  (function () { (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
          type: Injectable,
          args: [{ providedIn: 'platform' }]
      }], null, null); })();
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Work out the locale from the potential global properties.
   *
   * * Closure Compiler: use `goog.LOCALE`.
   * * Ivy enabled: use `$localize.locale`
   */
  function getGlobalLocale() {
      if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode &&
          typeof goog !== 'undefined' && goog.LOCALE !== 'en') {
          // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.
          // * In order to preserve backwards compatibility, we use Angular default value over
          //   Closure Compiler's one.
          return goog.LOCALE;
      }
      else {
          // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE
          // COMPILE-TIME INLINER.
          //
          // * During compile time inlining of translations the expression will be replaced
          //   with a string literal that is the current locale. Other forms of this expression are not
          //   guaranteed to be replaced.
          //
          // * During runtime translation evaluation, the developer is required to set `$localize.locale`
          //   if required, or just to provide their own `LOCALE_ID` provider.
          return (typeof $localize !== 'undefined' && $localize.locale) || DEFAULT_LOCALE_ID;
      }
  }
  /**
   * Provide this token to set the locale of your application.
   * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
   * DecimalPipe and PercentPipe) and by ICU expressions.
   *
   * See the [i18n guide](guide/i18n-common-locale-id) for more information.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * import { LOCALE_ID } from '@angular/core';
   * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
   * import { AppModule } from './app/app.module';
   *
   * platformBrowserDynamic().bootstrapModule(AppModule, {
   *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
   * });
   * ```
   *
   * @publicApi
   */
  const LOCALE_ID = new InjectionToken('LocaleId', {
      providedIn: 'root',
      factory: () => inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale(),
  });
  /**
   * Provide this token to set the default currency code your application uses for
   * CurrencyPipe when there is no currency code passed into it. This is only used by
   * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.
   *
   * See the [i18n guide](guide/i18n-common-locale-id) for more information.
   *
   * <div class="alert is-helpful">
   *
   * **Deprecation notice:**
   *
   * The default currency code is currently always `USD` but this is deprecated from v9.
   *
   * **In v10 the default currency code will be taken from the current locale.**
   *
   * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
   * your application `NgModule`:
   *
   * ```ts
   * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
   * ```
   *
   * </div>
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
   * import { AppModule } from './app/app.module';
   *
   * platformBrowserDynamic().bootstrapModule(AppModule, {
   *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]
   * });
   * ```
   *
   * @publicApi
   */
  const DEFAULT_CURRENCY_CODE = new InjectionToken('DefaultCurrencyCode', {
      providedIn: 'root',
      factory: () => USD_CURRENCY_CODE,
  });
  /**
   * Use this token at bootstrap to provide the content of your translation file (`xtb`,
   * `xlf` or `xlf2`) when you want to translate your application in another language.
   *
   * See the [i18n guide](guide/i18n-common-merge) for more information.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * import { TRANSLATIONS } from '@angular/core';
   * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
   * import { AppModule } from './app/app.module';
   *
   * // content of your translation file
   * const translations = '....';
   *
   * platformBrowserDynamic().bootstrapModule(AppModule, {
   *   providers: [{provide: TRANSLATIONS, useValue: translations }]
   * });
   * ```
   *
   * @publicApi
   */
  const TRANSLATIONS = new InjectionToken('Translations');
  /**
   * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,
   * `xlf` or `xlf2`.
   *
   * See the [i18n guide](guide/i18n-common-merge) for more information.
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * import { TRANSLATIONS_FORMAT } from '@angular/core';
   * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
   * import { AppModule } from './app/app.module';
   *
   * platformBrowserDynamic().bootstrapModule(AppModule, {
   *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
   * });
   * ```
   *
   * @publicApi
   */
  const TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
  /**
   * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy
   * that the compiler should use in case of missing translations:
   * - Error: throw if you have missing translations.
   * - Warning (default): show a warning in the console and/or shell.
   * - Ignore: do nothing.
   *
   * See the [i18n guide](guide/i18n-common-merge#report-missing-translations) for more information.
   *
   * @usageNotes
   * ### Example
   * ```typescript
   * import { MissingTranslationStrategy } from '@angular/core';
   * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
   * import { AppModule } from './app/app.module';
   *
   * platformBrowserDynamic().bootstrapModule(AppModule, {
   *   missingTranslation: MissingTranslationStrategy.Error
   * });
   * ```
   *
   * @publicApi
   */
  var MissingTranslationStrategy;
  (function (MissingTranslationStrategy) {
      MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
      MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
      MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
  })(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Combination of NgModuleFactory and ComponentFactories.
   *
   * @publicApi
   *
   * @deprecated
   * Ivy JIT mode doesn't require accessing this symbol.
   * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for
   * additional context.
   */
  class ModuleWithComponentFactories {
      constructor(ngModuleFactory, componentFactories) {
          this.ngModuleFactory = ngModuleFactory;
          this.componentFactories = componentFactories;
      }
  }
  /**
   * Low-level service for running the angular compiler during runtime
   * to create {@link ComponentFactory}s, which
   * can later be used to create and render a Component instance.
   *
   * Each `@NgModule` provides an own `Compiler` to its injector,
   * that will use the directives/pipes of the ng module for compilation
   * of components.
   *
   * @publicApi
   *
   * @deprecated
   * Ivy JIT mode doesn't require accessing this symbol.
   * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for
   * additional context.
   */
  class Compiler {
      /**
       * Compiles the given NgModule and all of its components. All templates of the components listed
       * in `entryComponents` have to be inlined.
       */
      compileModuleSync(moduleType) {
          return new NgModuleFactory(moduleType);
      }
      /**
       * Compiles the given NgModule and all of its components
       */
      compileModuleAsync(moduleType) {
          return Promise.resolve(this.compileModuleSync(moduleType));
      }
      /**
       * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
       */
      compileModuleAndAllComponentsSync(moduleType) {
          const ngModuleFactory = this.compileModuleSync(moduleType);
          const moduleDef = getNgModuleDef(moduleType);
          const componentFactories = maybeUnwrapFn(moduleDef.declarations)
              .reduce((factories, declaration) => {
              const componentDef = getComponentDef(declaration);
              componentDef && factories.push(new ComponentFactory(componentDef));
              return factories;
          }, []);
          return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
      }
      /**
       * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
       */
      compileModuleAndAllComponentsAsync(moduleType) {
          return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));
      }
      /**
       * Clears all caches.
       */
      clearCache() { }
      /**
       * Clears the cache for the given component/ngModule.
       */
      clearCacheFor(type) { }
      /**
       * Returns the id for a given NgModule, if one is defined and known to the compiler.
       */
      getModuleId(moduleType) {
          return undefined;
      }
  }
  Compiler.Éµfac = function Compiler_Factory(t) { return new (t || Compiler)(); };
  Compiler.Éµprov = /*@__PURE__*/ ÉµÉµdefineInjectable({ token: Compiler, factory: Compiler.Éµfac, providedIn: 'root' });
  (function () { (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Compiler, [{
          type: Injectable,
          args: [{ providedIn: 'root' }]
      }], null, null); })();
  /**
   * Token to provide CompilerOptions in the platform injector.
   *
   * @publicApi
   */
  const COMPILER_OPTIONS = new InjectionToken('compilerOptions');
  /**
   * A factory for creating a Compiler
   *
   * @publicApi
   *
   * @deprecated
   * Ivy JIT mode doesn't require accessing this symbol.
   * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for
   * additional context.
   */
  class CompilerFactory {
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  const promise = (() => Promise.resolve(0))();
  function scheduleMicroTask(fn) {
      if (typeof Zone === 'undefined') {
          // use promise to schedule microTask instead of use Zone
          promise.then(() => {
              fn && fn.apply(null, null);
          });
      }
      else {
          Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function getNativeRequestAnimationFrame() {
      let nativeRequestAnimationFrame = _global['requestAnimationFrame'];
      let nativeCancelAnimationFrame = _global['cancelAnimationFrame'];
      if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
          // use unpatched version of requestAnimationFrame(native delegate) if possible
          // to avoid another Change detection
          const unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];
          if (unpatchedRequestAnimationFrame) {
              nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
          }
          const unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];
          if (unpatchedCancelAnimationFrame) {
              nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
          }
      }
      return { nativeRequestAnimationFrame, nativeCancelAnimationFrame };
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * An injectable service for executing work inside or outside of the Angular zone.
   *
   * The most common use of this service is to optimize performance when starting a work consisting of
   * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
   * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
   * can reenter the Angular zone via {@link #run}.
   *
   * <!-- TODO: add/fix links to:
   *   - docs explaining zones and the use of zones in Angular and change-detection
   *   - link to runOutsideAngular/run (throughout this file!)
   *   -->
   *
   * @usageNotes
   * ### Example
   *
   * ```
   * import {Component, NgZone} from '@angular/core';
   * import {NgIf} from '@angular/common';
   *
   * @Component({
   *   selector: 'ng-zone-demo',
   *   template: `
   *     <h2>Demo: NgZone</h2>
   *
   *     <p>Progress: {{progress}}%</p>
   *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
   *
   *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
   *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
   *   `,
   * })
   * export class NgZoneDemo {
   *   progress: number = 0;
   *   label: string;
   *
   *   constructor(private _ngZone: NgZone) {}
   *
   *   // Loop inside the Angular zone
   *   // so the UI DOES refresh after each setTimeout cycle
   *   processWithinAngularZone() {
   *     this.label = 'inside';
   *     this.progress = 0;
   *     this._increaseProgress(() => console.log('Inside Done!'));
   *   }
   *
   *   // Loop outside of the Angular zone
   *   // so the UI DOES NOT refresh after each setTimeout cycle
   *   processOutsideOfAngularZone() {
   *     this.label = 'outside';
   *     this.progress = 0;
   *     this._ngZone.runOutsideAngular(() => {
   *       this._increaseProgress(() => {
   *         // reenter the Angular zone and display done
   *         this._ngZone.run(() => { console.log('Outside Done!'); });
   *       });
   *     });
   *   }
   *
   *   _increaseProgress(doneCallback: () => void) {
   *     this.progress += 1;
   *     console.log(`Current progress: ${this.progress}%`);
   *
   *     if (this.progress < 100) {
   *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
   *     } else {
   *       doneCallback();
   *     }
   *   }
   * }
   * ```
   *
   * @publicApi
   */
  class NgZone {
      constructor({ enableLongStackTrace = false, shouldCoalesceEventChangeDetection = false, shouldCoalesceRunChangeDetection = false }) {
          this.hasPendingMacrotasks = false;
          this.hasPendingMicrotasks = false;
          /**
           * Whether there are no outstanding microtasks or macrotasks.
           */
          this.isStable = true;
          /**
           * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
           */
          this.onUnstable = new EventEmitter(false);
          /**
           * Notifies when there is no more microtasks enqueued in the current VM Turn.
           * This is a hint for Angular to do change detection, which may enqueue more microtasks.
           * For this reason this event can fire multiple times per VM Turn.
           */
          this.onMicrotaskEmpty = new EventEmitter(false);
          /**
           * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
           * implies we are about to relinquish VM turn.
           * This event gets called just once.
           */
          this.onStable = new EventEmitter(false);
          /**
           * Notifies that an error has been delivered.
           */
          this.onError = new EventEmitter(false);
          if (typeof Zone == 'undefined') {
              throw new Error(`In this configuration Angular requires Zone.js`);
          }
          Zone.assertZonePatched();
          const self = this;
          self._nesting = 0;
          self._outer = self._inner = Zone.current;
          if (Zone['TaskTrackingZoneSpec']) {
              self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);
          }
          if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
              self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
          }
          // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be
          // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.
          self.shouldCoalesceEventChangeDetection =
              !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
          self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
          self.lastRequestAnimationFrameId = -1;
          self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
          forkInnerZoneWithAngularBehavior(self);
      }
      static isInAngularZone() {
          // Zone needs to be checked, because this method might be called even when NoopNgZone is used.
          return typeof Zone !== 'undefined' && Zone.current.get('isAngularZone') === true;
      }
      static assertInAngularZone() {
          if (!NgZone.isInAngularZone()) {
              throw new Error('Expected to be in Angular Zone, but it is not!');
          }
      }
      static assertNotInAngularZone() {
          if (NgZone.isInAngularZone()) {
              throw new Error('Expected to not be in Angular Zone, but it is!');
          }
      }
      /**
       * Executes the `fn` function synchronously within the Angular zone and returns value returned by
       * the function.
       *
       * Running functions via `run` allows you to reenter Angular zone from a task that was executed
       * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
       *
       * Any future tasks or microtasks scheduled from within this function will continue executing from
       * within the Angular zone.
       *
       * If a synchronous error happens it will be rethrown and not reported via `onError`.
       */
      run(fn, applyThis, applyArgs) {
          return this._inner.run(fn, applyThis, applyArgs);
      }
      /**
       * Executes the `fn` function synchronously within the Angular zone as a task and returns value
       * returned by the function.
       *
       * Running functions via `run` allows you to reenter Angular zone from a task that was executed
       * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
       *
       * Any future tasks or microtasks scheduled from within this function will continue executing from
       * within the Angular zone.
       *
       * If a synchronous error happens it will be rethrown and not reported via `onError`.
       */
      runTask(fn, applyThis, applyArgs, name) {
          const zone = this._inner;
          const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, core_noop, core_noop);
          try {
              return zone.runTask(task, applyThis, applyArgs);
          }
          finally {
              zone.cancelTask(task);
          }
      }
      /**
       * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
       * rethrown.
       */
      runGuarded(fn, applyThis, applyArgs) {
          return this._inner.runGuarded(fn, applyThis, applyArgs);
      }
      /**
       * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
       * the function.
       *
       * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
       * work that
       * doesn't trigger Angular change-detection or is subject to Angular's error handling.
       *
       * Any future tasks or microtasks scheduled from within this function will continue executing from
       * outside of the Angular zone.
       *
       * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
       */
      runOutsideAngular(fn) {
          return this._outer.run(fn);
      }
  }
  const EMPTY_PAYLOAD = {};
  function checkStable(zone) {
      // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent
      // re-entry. The case is:
      //
      // @Component({...})
      // export class AppComponent {
      // constructor(private ngZone: NgZone) {
      //   this.ngZone.onStable.subscribe(() => {
      //     this.ngZone.run(() => console.log('stable'););
      //   });
      // }
      //
      // The onStable subscriber run another function inside ngZone
      // which causes `checkStable()` re-entry.
      // But this fix causes some issues in g3, so this fix will be
      // launched in another PR.
      if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
          try {
              zone._nesting++;
              zone.onMicrotaskEmpty.emit(null);
          }
          finally {
              zone._nesting--;
              if (!zone.hasPendingMicrotasks) {
                  try {
                      zone.runOutsideAngular(() => zone.onStable.emit(null));
                  }
                  finally {
                      zone.isStable = true;
                  }
              }
          }
      }
  }
  function delayChangeDetectionForEvents(zone) {
      /**
       * We also need to check _nesting here
       * Consider the following case with shouldCoalesceRunChangeDetection = true
       *
       * ngZone.run(() => {});
       * ngZone.run(() => {});
       *
       * We want the two `ngZone.run()` only trigger one change detection
       * when shouldCoalesceRunChangeDetection is true.
       * And because in this case, change detection run in async way(requestAnimationFrame),
       * so we also need to check the _nesting here to prevent multiple
       * change detections.
       */
      if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {
          return;
      }
      zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, () => {
          // This is a work around for https://github.com/angular/angular/issues/36839.
          // The core issue is that when event coalescing is enabled it is possible for microtasks
          // to get flushed too early (As is the case with `Promise.then`) between the
          // coalescing eventTasks.
          //
          // To workaround this we schedule a "fake" eventTask before we process the
          // coalescing eventTasks. The benefit of this is that the "fake" container eventTask
          //  will prevent the microtasks queue from getting drained in between the coalescing
          // eventTask execution.
          if (!zone.fakeTopEventTask) {
              zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', () => {
                  zone.lastRequestAnimationFrameId = -1;
                  updateMicroTaskStatus(zone);
                  zone.isCheckStableRunning = true;
                  checkStable(zone);
                  zone.isCheckStableRunning = false;
              }, undefined, () => { }, () => { });
          }
          zone.fakeTopEventTask.invoke();
      });
      updateMicroTaskStatus(zone);
  }
  function forkInnerZoneWithAngularBehavior(zone) {
      const delayChangeDetectionForEventsDelegate = () => {
          delayChangeDetectionForEvents(zone);
      };
      zone._inner = zone._inner.fork({
          name: 'angular',
          properties: { 'isAngularZone': true },
          onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {
              try {
                  onEnter(zone);
                  return delegate.invokeTask(target, task, applyThis, applyArgs);
              }
              finally {
                  if ((zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask') ||
                      zone.shouldCoalesceRunChangeDetection) {
                      delayChangeDetectionForEventsDelegate();
                  }
                  onLeave(zone);
              }
          },
          onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {
              try {
                  onEnter(zone);
                  return delegate.invoke(target, callback, applyThis, applyArgs, source);
              }
              finally {
                  if (zone.shouldCoalesceRunChangeDetection) {
                      delayChangeDetectionForEventsDelegate();
                  }
                  onLeave(zone);
              }
          },
          onHasTask: (delegate, current, target, hasTaskState) => {
              delegate.hasTask(target, hasTaskState);
              if (current === target) {
                  // We are only interested in hasTask events which originate from our zone
                  // (A child hasTask event is not interesting to us)
                  if (hasTaskState.change == 'microTask') {
                      zone._hasPendingMicrotasks = hasTaskState.microTask;
                      updateMicroTaskStatus(zone);
                      checkStable(zone);
                  }
                  else if (hasTaskState.change == 'macroTask') {
                      zone.hasPendingMacrotasks = hasTaskState.macroTask;
                  }
              }
          },
          onHandleError: (delegate, current, target, error) => {
              delegate.handleError(target, error);
              zone.runOutsideAngular(() => zone.onError.emit(error));
              return false;
          }
      });
  }
  function updateMicroTaskStatus(zone) {
      if (zone._hasPendingMicrotasks ||
          ((zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) &&
              zone.lastRequestAnimationFrameId !== -1)) {
          zone.hasPendingMicrotasks = true;
      }
      else {
          zone.hasPendingMicrotasks = false;
      }
  }
  function onEnter(zone) {
      zone._nesting++;
      if (zone.isStable) {
          zone.isStable = false;
          zone.onUnstable.emit(null);
      }
  }
  function onLeave(zone) {
      zone._nesting--;
      checkStable(zone);
  }
  /**
   * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
   * to framework to perform rendering.
   */
  class NoopNgZone {
      constructor() {
          this.hasPendingMicrotasks = false;
          this.hasPendingMacrotasks = false;
          this.isStable = true;
          this.onUnstable = new EventEmitter();
          this.onMicrotaskEmpty = new EventEmitter();
          this.onStable = new EventEmitter();
          this.onError = new EventEmitter();
      }
      run(fn, applyThis, applyArgs) {
          return fn.apply(applyThis, applyArgs);
      }
      runGuarded(fn, applyThis, applyArgs) {
          return fn.apply(applyThis, applyArgs);
      }
      runOutsideAngular(fn) {
          return fn();
      }
      runTask(fn, applyThis, applyArgs, name) {
          return fn.apply(applyThis, applyArgs);
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * The Testability service provides testing hooks that can be accessed from
   * the browser. Each bootstrapped Angular application on the page will have
   * an instance of Testability.
   * @publicApi
   */
  class Testability {
      constructor(_ngZone) {
          this._ngZone = _ngZone;
          this._pendingCount = 0;
          this._isZoneStable = true;
          /**
           * Whether any work was done since the last 'whenStable' callback. This is
           * useful to detect if this could have potentially destabilized another
           * component while it is stabilizing.
           * @internal
           */
          this._didWork = false;
          this._callbacks = [];
          this.taskTrackingZone = null;
          this._watchAngularEvents();
          _ngZone.run(() => {
              this.taskTrackingZone =
                  typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');
          });
      }
      _watchAngularEvents() {
          this._ngZone.onUnstable.subscribe({
              next: () => {
                  this._didWork = true;
                  this._isZoneStable = false;
              }
          });
          this._ngZone.runOutsideAngular(() => {
              this._ngZone.onStable.subscribe({
                  next: () => {
                      NgZone.assertNotInAngularZone();
                      scheduleMicroTask(() => {
                          this._isZoneStable = true;
                          this._runCallbacksIfReady();
                      });
                  }
              });
          });
      }
      /**
       * Increases the number of pending request
       * @deprecated pending requests are now tracked with zones.
       */
      increasePendingRequestCount() {
          this._pendingCount += 1;
          this._didWork = true;
          return this._pendingCount;
      }
      /**
       * Decreases the number of pending request
       * @deprecated pending requests are now tracked with zones
       */
      decreasePendingRequestCount() {
          this._pendingCount -= 1;
          if (this._pendingCount < 0) {
              throw new Error('pending async requests below zero');
          }
          this._runCallbacksIfReady();
          return this._pendingCount;
      }
      /**
       * Whether an associated application is stable
       */
      isStable() {
          return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
      }
      _runCallbacksIfReady() {
          if (this.isStable()) {
              // Schedules the call backs in a new frame so that it is always async.
              scheduleMicroTask(() => {
                  while (this._callbacks.length !== 0) {
                      let cb = this._callbacks.pop();
                      clearTimeout(cb.timeoutId);
                      cb.doneCb(this._didWork);
                  }
                  this._didWork = false;
              });
          }
          else {
              // Still not stable, send updates.
              let pending = this.getPendingTasks();
              this._callbacks = this._callbacks.filter((cb) => {
                  if (cb.updateCb && cb.updateCb(pending)) {
                      clearTimeout(cb.timeoutId);
                      return false;
                  }
                  return true;
              });
              this._didWork = true;
          }
      }
      getPendingTasks() {
          if (!this.taskTrackingZone) {
              return [];
          }
          // Copy the tasks data so that we don't leak tasks.
          return this.taskTrackingZone.macroTasks.map((t) => {
              return {
                  source: t.source,
                  // From TaskTrackingZone:
                  // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
                  creationLocation: t.creationLocation,
                  data: t.data
              };
          });
      }
      addCallback(cb, timeout, updateCb) {
          let timeoutId = -1;
          if (timeout && timeout > 0) {
              timeoutId = setTimeout(() => {
                  this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);
                  cb(this._didWork, this.getPendingTasks());
              }, timeout);
          }
          this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });
      }
      /**
       * Wait for the application to be stable with a timeout. If the timeout is reached before that
       * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
       *
       * @param doneCb The callback to invoke when Angular is stable or the timeout expires
       *    whichever comes first.
       * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
       *    specified, whenStable() will wait forever.
       * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
       *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
       *    and no further updates will be issued.
       */
      whenStable(doneCb, timeout, updateCb) {
          if (updateCb && !this.taskTrackingZone) {
              throw new Error('Task tracking zone is required when passing an update callback to ' +
                  'whenStable(). Is "zone.js/plugins/task-tracking" loaded?');
          }
          // These arguments are 'Function' above to keep the public API simple.
          this.addCallback(doneCb, timeout, updateCb);
          this._runCallbacksIfReady();
      }
      /**
       * Get the number of pending requests
       * @deprecated pending requests are now tracked with zones
       */
      getPendingRequestCount() {
          return this._pendingCount;
      }
      /**
       * Find providers by name
       * @param using The root element to search from
       * @param provider The name of binding variable
       * @param exactMatch Whether using exactMatch
       */
      findProviders(using, provider, exactMatch) {
          // TODO(juliemr): implement.
          return [];
      }
  }
  Testability.Éµfac = function Testability_Factory(t) { return new (t || Testability)(ÉµÉµinject(NgZone)); };
  Testability.Éµprov = /*@__PURE__*/ ÉµÉµdefineInjectable({ token: Testability, factory: Testability.Éµfac });
  (function () { (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Testability, [{
          type: Injectable
      }], function () { return [{ type: NgZone }]; }, null); })();
  /**
   * A global registry of {@link Testability} instances for specific elements.
   * @publicApi
   */
  class TestabilityRegistry {
      constructor() {
          /** @internal */
          this._applications = new Map();
          _testabilityGetter.addToWindow(this);
      }
      /**
       * Registers an application with a testability hook so that it can be tracked
       * @param token token of application, root element
       * @param testability Testability hook
       */
      registerApplication(token, testability) {
          this._applications.set(token, testability);
      }
      /**
       * Unregisters an application.
       * @param token token of application, root element
       */
      unregisterApplication(token) {
          this._applications.delete(token);
      }
      /**
       * Unregisters all applications
       */
      unregisterAllApplications() {
          this._applications.clear();
      }
      /**
       * Get a testability hook associated with the application
       * @param elem root element
       */
      getTestability(elem) {
          return this._applications.get(elem) || null;
      }
      /**
       * Get all registered testabilities
       */
      getAllTestabilities() {
          return Array.from(this._applications.values());
      }
      /**
       * Get all registered applications(root elements)
       */
      getAllRootElements() {
          return Array.from(this._applications.keys());
      }
      /**
       * Find testability of a node in the Tree
       * @param elem node
       * @param findInAncestors whether finding testability in ancestors if testability was not found in
       * current node
       */
      findTestabilityInTree(elem, findInAncestors = true) {
          return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
      }
  }
  TestabilityRegistry.Éµfac = function TestabilityRegistry_Factory(t) { return new (t || TestabilityRegistry)(); };
  TestabilityRegistry.Éµprov = /*@__PURE__*/ ÉµÉµdefineInjectable({ token: TestabilityRegistry, factory: TestabilityRegistry.Éµfac, providedIn: 'platform' });
  (function () { (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{
          type: Injectable,
          args: [{ providedIn: 'platform' }]
      }], function () { return []; }, null); })();
  class _NoopGetTestability {
      addToWindow(registry) { }
      findTestabilityInTree(registry, elem, findInAncestors) {
          return null;
      }
  }
  /**
   * Set the {@link GetTestability} implementation used by the Angular testing framework.
   * @publicApi
   */
  function setTestabilityGetter(getter) {
      _testabilityGetter = getter;
  }
  let _testabilityGetter = new _NoopGetTestability();
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  let _platformInjector = null;
  /**
   * Internal token to indicate whether having multiple bootstrapped platform should be allowed (only
   * one bootstrapped platform is allowed by default). This token helps to support SSR scenarios.
   */
  const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
  /**
   * Internal token that allows to register extra callbacks that should be invoked during the
   * `PlatformRef.destroy` operation. This token is needed to avoid a direct reference to the
   * `PlatformRef` class (i.e. register the callback via `PlatformRef.onDestroy`), thus making the
   * entire class tree-shakeable.
   */
  const PLATFORM_ON_DESTROY = new InjectionToken('PlatformOnDestroy');
  function compileNgModuleFactory(injector, options, moduleType) {
      ngDevMode && assertNgModuleType(moduleType);
      const moduleFactory = new NgModuleFactory(moduleType);
      // All of the logic below is irrelevant for AOT-compiled code.
      if (typeof ngJitMode !== 'undefined' && !ngJitMode) {
          return Promise.resolve(moduleFactory);
      }
      const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);
      // Configure the compiler to use the provided options. This call may fail when multiple modules
      // are bootstrapped with incompatible options, as a component can only be compiled according to
      // a single set of options.
      setJitOptions({
          defaultEncapsulation: _lastDefined(compilerOptions.map(opts => opts.defaultEncapsulation)),
          preserveWhitespaces: _lastDefined(compilerOptions.map(opts => opts.preserveWhitespaces)),
      });
      if (isComponentResourceResolutionQueueEmpty()) {
          return Promise.resolve(moduleFactory);
      }
      const compilerProviders = _mergeArrays(compilerOptions.map(o => o.providers));
      // In case there are no compiler providers, we just return the module factory as
      // there won't be any resource loader. This can happen with Ivy, because AOT compiled
      // modules can be still passed through "bootstrapModule". In that case we shouldn't
      // unnecessarily require the JIT compiler.
      if (compilerProviders.length === 0) {
          return Promise.resolve(moduleFactory);
      }
      const compiler = getCompilerFacade({
          usage: 0 /* Decorator */,
          kind: 'NgModule',
          type: moduleType,
      });
      const compilerInjector = Injector.create({ providers: compilerProviders });
      const resourceLoader = compilerInjector.get(compiler.ResourceLoader);
      // The resource loader can also return a string while the "resolveComponentResources"
      // always expects a promise. Therefore we need to wrap the returned value in a promise.
      return resolveComponentResources(url => Promise.resolve(resourceLoader.get(url)))
          .then(() => moduleFactory);
  }
  function publishDefaultGlobalUtils() {
      ngDevMode && publishDefaultGlobalUtils$1();
  }
  function isBoundToModule(cf) {
      return cf.isBoundToModule;
  }
  /**
   * A token for third-party components that can register themselves with NgProbe.
   *
   * @publicApi
   */
  class NgProbeToken {
      constructor(name, token) {
          this.name = name;
          this.token = token;
      }
  }
  /**
   * Creates a platform.
   * Platforms must be created on launch using this function.
   *
   * @publicApi
   */
  function createPlatform(injector) {
      if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
          const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
              'There can be only one platform. Destroy the previous one to create a new one.' :
              '';
          throw new RuntimeError(400 /* MULTIPLE_PLATFORMS */, errorMessage);
      }
      publishDefaultGlobalUtils();
      _platformInjector = injector;
      const platform = injector.get(PlatformRef);
      const inits = injector.get(PLATFORM_INITIALIZER, null);
      if (inits)
          inits.forEach(initFn => initFn());
      return platform;
  }
  /**
   * Creates a factory for a platform. Can be used to provide or override `Providers` specific to
   * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.
   * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories
   * to build up configurations that might be required by different libraries or parts of the
   * application.
   * @param name Identifies the new platform factory.
   * @param providers A set of dependency providers for platforms created with the new factory.
   *
   * @publicApi
   */
  function createPlatformFactory(parentPlatformFactory, name, providers = []) {
      const desc = `Platform: ${name}`;
      const marker = new InjectionToken(desc);
      return (extraProviders = []) => {
          let platform = getPlatform();
          if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
              const platformProviders = [
                  ...providers,
                  ...extraProviders,
                  { provide: marker, useValue: true }
              ];
              if (parentPlatformFactory) {
                  parentPlatformFactory(platformProviders);
              }
              else {
                  createPlatform(createPlatformInjector(platformProviders, desc));
              }
          }
          return assertPlatform(marker);
      };
  }
  /**
   * Checks that there is currently a platform that contains the given token as a provider.
   *
   * @publicApi
   */
  function assertPlatform(requiredToken) {
      const platform = getPlatform();
      if (!platform) {
          const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ? 'No platform exists!' : '';
          throw new RuntimeError(401 /* PLATFORM_NOT_FOUND */, errorMessage);
      }
      if ((typeof ngDevMode === 'undefined' || ngDevMode) &&
          !platform.injector.get(requiredToken, null)) {
          throw new RuntimeError(400 /* MULTIPLE_PLATFORMS */, 'A platform with a different configuration has been created. Please destroy it first.');
      }
      return platform;
  }
  /**
   * Helper function to create an instance of a platform injector (that maintains the 'platform'
   * scope).
   */
  function createPlatformInjector(providers = [], name) {
      return Injector.create({
          name,
          providers: [
              { provide: INJECTOR_SCOPE, useValue: 'platform' },
              { provide: PLATFORM_ON_DESTROY, useValue: () => _platformInjector = null },
              ...providers
          ],
      });
  }
  /**
   * Destroys the current Angular platform and all Angular applications on the page.
   * Destroys all modules and listeners registered with the platform.
   *
   * @publicApi
   */
  function destroyPlatform() {
      getPlatform()?.destroy();
  }
  /**
   * Returns the current platform.
   *
   * @publicApi
   */
  function getPlatform() {
      return _platformInjector?.get(PlatformRef) ?? null;
  }
  /**
   * The Angular platform is the entry point for Angular on a web page.
   * Each page has exactly one platform. Services (such as reflection) which are common
   * to every Angular application running on the page are bound in its scope.
   * A page's platform is initialized implicitly when a platform is created using a platform
   * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.
   *
   * @publicApi
   */
  class PlatformRef {
      /** @internal */
      constructor(_injector) {
          this._injector = _injector;
          this._modules = [];
          this._destroyListeners = [];
          this._destroyed = false;
      }
      /**
       * Creates an instance of an `@NgModule` for the given platform.
       *
       * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function
       *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.
       */
      bootstrapModuleFactory(moduleFactory, options) {
          // Note: We need to create the NgZone _before_ we instantiate the module,
          // as instantiating the module creates some providers eagerly.
          // So we create a mini parent injector that just contains the new NgZone and
          // pass that as parent to the NgModuleFactory.
          const ngZoneOption = options ? options.ngZone : undefined;
          const ngZoneEventCoalescing = (options && options.ngZoneEventCoalescing) || false;
          const ngZoneRunCoalescing = (options && options.ngZoneRunCoalescing) || false;
          const ngZone = getNgZone(ngZoneOption, { ngZoneEventCoalescing, ngZoneRunCoalescing });
          const providers = [{ provide: NgZone, useValue: ngZone }];
          // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are
          // created within the Angular zone
          // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be
          // created outside of the Angular zone.
          return ngZone.run(() => {
              const ngZoneInjector = Injector.create({ providers: providers, parent: this.injector, name: moduleFactory.moduleType.name });
              const moduleRef = moduleFactory.create(ngZoneInjector);
              const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
              if (!exceptionHandler) {
                  const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                      'No ErrorHandler. Is platform module (BrowserModule) included?' :
                      '';
                  throw new RuntimeError(402 /* ERROR_HANDLER_NOT_FOUND */, errorMessage);
              }
              ngZone.runOutsideAngular(() => {
                  const subscription = ngZone.onError.subscribe({
                      next: (error) => {
                          exceptionHandler.handleError(error);
                      }
                  });
                  moduleRef.onDestroy(() => {
                      remove(this._modules, moduleRef);
                      subscription.unsubscribe();
                  });
              });
              return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {
                  const initStatus = moduleRef.injector.get(ApplicationInitStatus);
                  initStatus.runInitializers();
                  return initStatus.donePromise.then(() => {
                      // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy
                      const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);
                      setLocaleId(localeId || DEFAULT_LOCALE_ID);
                      this._moduleDoBootstrap(moduleRef);
                      return moduleRef;
                  });
              });
          });
      }
      /**
       * Creates an instance of an `@NgModule` for a given platform.
       *
       * @usageNotes
       * ### Simple Example
       *
       * ```typescript
       * @NgModule({
       *   imports: [BrowserModule]
       * })
       * class MyModule {}
       *
       * let moduleRef = platformBrowser().bootstrapModule(MyModule);
       * ```
       *
       */
      bootstrapModule(moduleType, compilerOptions = []) {
          const options = optionsReducer({}, compilerOptions);
          return compileNgModuleFactory(this.injector, options, moduleType)
              .then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));
      }
      _moduleDoBootstrap(moduleRef) {
          const appRef = moduleRef.injector.get(ApplicationRef);
          if (moduleRef._bootstrapComponents.length > 0) {
              moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));
          }
          else if (moduleRef.instance.ngDoBootstrap) {
              moduleRef.instance.ngDoBootstrap(appRef);
          }
          else {
              const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                  `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, ` +
                      `but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. ` +
                      `Please define one of these.` :
                  '';
              throw new RuntimeError(403 /* BOOTSTRAP_COMPONENTS_NOT_FOUND */, errorMessage);
          }
          this._modules.push(moduleRef);
      }
      /**
       * Registers a listener to be called when the platform is destroyed.
       */
      onDestroy(callback) {
          this._destroyListeners.push(callback);
      }
      /**
       * Retrieves the platform {@link Injector}, which is the parent injector for
       * every Angular application on the page and provides singleton providers.
       */
      get injector() {
          return this._injector;
      }
      /**
       * Destroys the current Angular platform and all Angular applications on the page.
       * Destroys all modules and listeners registered with the platform.
       */
      destroy() {
          if (this._destroyed) {
              const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                  'The platform has already been destroyed!' :
                  '';
              throw new RuntimeError(404 /* ALREADY_DESTROYED_PLATFORM */, errorMessage);
          }
          this._modules.slice().forEach(module => module.destroy());
          this._destroyListeners.forEach(listener => listener());
          const destroyListener = this._injector.get(PLATFORM_ON_DESTROY, null);
          destroyListener?.();
          this._destroyed = true;
      }
      get destroyed() {
          return this._destroyed;
      }
  }
  PlatformRef.Éµfac = function PlatformRef_Factory(t) { return new (t || PlatformRef)(ÉµÉµinject(Injector)); };
  PlatformRef.Éµprov = /*@__PURE__*/ ÉµÉµdefineInjectable({ token: PlatformRef, factory: PlatformRef.Éµfac, providedIn: 'platform' });
  (function () { (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformRef, [{
          type: Injectable,
          args: [{ providedIn: 'platform' }]
      }], function () { return [{ type: Injector }]; }, null); })();
  function getNgZone(ngZoneOption, extra) {
      let ngZone;
      if (ngZoneOption === 'noop') {
          ngZone = new NoopNgZone();
      }
      else {
          ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({
              enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,
              shouldCoalesceEventChangeDetection: !!extra?.ngZoneEventCoalescing,
              shouldCoalesceRunChangeDetection: !!extra?.ngZoneRunCoalescing
          });
      }
      return ngZone;
  }
  function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
      try {
          const result = callback();
          if (core_isPromise(result)) {
              return result.catch((e) => {
                  ngZone.runOutsideAngular(() => errorHandler.handleError(e));
                  // rethrow as the exception handler might not do it
                  throw e;
              });
          }
          return result;
      }
      catch (e) {
          ngZone.runOutsideAngular(() => errorHandler.handleError(e));
          // rethrow as the exception handler might not do it
          throw e;
      }
  }
  function optionsReducer(dst, objs) {
      if (Array.isArray(objs)) {
          dst = objs.reduce(optionsReducer, dst);
      }
      else {
          dst = { ...dst, ...objs };
      }
      return dst;
  }
  /**
   * A reference to an Angular application running on a page.
   *
   * @usageNotes
   *
   * {@a is-stable-examples}
   * ### isStable examples and caveats
   *
   * Note two important points about `isStable`, demonstrated in the examples below:
   * - the application will never be stable if you start any kind
   * of recurrent asynchronous task when the application starts
   * (for example for a polling process, started with a `setInterval`, a `setTimeout`
   * or using RxJS operators like `interval`);
   * - the `isStable` Observable runs outside of the Angular zone.
   *
   * Let's imagine that you start a recurrent task
   * (here incrementing a counter, using RxJS `interval`),
   * and at the same time subscribe to `isStable`.
   *
   * ```
   * constructor(appRef: ApplicationRef) {
   *   appRef.isStable.pipe(
   *      filter(stable => stable)
   *   ).subscribe(() => console.log('App is stable now');
   *   interval(1000).subscribe(counter => console.log(counter));
   * }
   * ```
   * In this example, `isStable` will never emit `true`,
   * and the trace "App is stable now" will never get logged.
   *
   * If you want to execute something when the app is stable,
   * you have to wait for the application to be stable
   * before starting your polling process.
   *
   * ```
   * constructor(appRef: ApplicationRef) {
   *   appRef.isStable.pipe(
   *     first(stable => stable),
   *     tap(stable => console.log('App is stable now')),
   *     switchMap(() => interval(1000))
   *   ).subscribe(counter => console.log(counter));
   * }
   * ```
   * In this example, the trace "App is stable now" will be logged
   * and then the counter starts incrementing every second.
   *
   * Note also that this Observable runs outside of the Angular zone,
   * which means that the code in the subscription
   * to this Observable will not trigger the change detection.
   *
   * Let's imagine that instead of logging the counter value,
   * you update a field of your component
   * and display it in its template.
   *
   * ```
   * constructor(appRef: ApplicationRef) {
   *   appRef.isStable.pipe(
   *     first(stable => stable),
   *     switchMap(() => interval(1000))
   *   ).subscribe(counter => this.value = counter);
   * }
   * ```
   * As the `isStable` Observable runs outside the zone,
   * the `value` field will be updated properly,
   * but the template will not be refreshed!
   *
   * You'll have to manually trigger the change detection to update the template.
   *
   * ```
   * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {
   *   appRef.isStable.pipe(
   *     first(stable => stable),
   *     switchMap(() => interval(1000))
   *   ).subscribe(counter => {
   *     this.value = counter;
   *     cd.detectChanges();
   *   });
   * }
   * ```
   *
   * Or make the subscription callback run inside the zone.
   *
   * ```
   * constructor(appRef: ApplicationRef, zone: NgZone) {
   *   appRef.isStable.pipe(
   *     first(stable => stable),
   *     switchMap(() => interval(1000))
   *   ).subscribe(counter => zone.run(() => this.value = counter));
   * }
   * ```
   *
   * @publicApi
   */
  class ApplicationRef {
      /** @internal */
      constructor(_zone, _injector, _exceptionHandler, _initStatus) {
          this._zone = _zone;
          this._injector = _injector;
          this._exceptionHandler = _exceptionHandler;
          this._initStatus = _initStatus;
          /** @internal */
          this._bootstrapListeners = [];
          this._views = [];
          this._runningTick = false;
          this._stable = true;
          /**
           * Get a list of component types registered to this application.
           * This list is populated even before the component is created.
           */
          this.componentTypes = [];
          /**
           * Get a list of components registered to this application.
           */
          this.components = [];
          this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({
              next: () => {
                  this._zone.run(() => {
                      this.tick();
                  });
              }
          });
          const isCurrentlyStable = new Observable_Observable((observer) => {
              this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&
                  !this._zone.hasPendingMicrotasks;
              this._zone.runOutsideAngular(() => {
                  observer.next(this._stable);
                  observer.complete();
              });
          });
          const isStable = new Observable_Observable((observer) => {
              // Create the subscription to onStable outside the Angular Zone so that
              // the callback is run outside the Angular Zone.
              let stableSub;
              this._zone.runOutsideAngular(() => {
                  stableSub = this._zone.onStable.subscribe(() => {
                      NgZone.assertNotInAngularZone();
                      // Check whether there are no pending macro/micro tasks in the next tick
                      // to allow for NgZone to update the state.
                      scheduleMicroTask(() => {
                          if (!this._stable && !this._zone.hasPendingMacrotasks &&
                              !this._zone.hasPendingMicrotasks) {
                              this._stable = true;
                              observer.next(true);
                          }
                      });
                  });
              });
              const unstableSub = this._zone.onUnstable.subscribe(() => {
                  NgZone.assertInAngularZone();
                  if (this._stable) {
                      this._stable = false;
                      this._zone.runOutsideAngular(() => {
                          observer.next(false);
                      });
                  }
              });
              return () => {
                  stableSub.unsubscribe();
                  unstableSub.unsubscribe();
              };
          });
          this.isStable =
              merge(isCurrentlyStable, isStable.pipe(share()));
      }
      /**
       * Bootstrap a component onto the element identified by its selector or, optionally, to a
       * specified element.
       *
       * @usageNotes
       * ### Bootstrap process
       *
       * When bootstrapping a component, Angular mounts it onto a target DOM element
       * and kicks off automatic change detection. The target DOM element can be
       * provided using the `rootSelectorOrNode` argument.
       *
       * If the target DOM element is not provided, Angular tries to find one on a page
       * using the `selector` of the component that is being bootstrapped
       * (first matched element is used).
       *
       * ### Example
       *
       * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,
       * but it requires us to know the component while writing the application code.
       *
       * Imagine a situation where we have to wait for an API call to decide about the component to
       * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to
       * dynamically bootstrap a component.
       *
       * {@example core/ts/platform/platform.ts region='componentSelector'}
       *
       * Optionally, a component can be mounted onto a DOM element that does not match the
       * selector of the bootstrapped component.
       *
       * In the following example, we are providing a CSS selector to match the target element.
       *
       * {@example core/ts/platform/platform.ts region='cssSelector'}
       *
       * While in this example, we are providing reference to a DOM node.
       *
       * {@example core/ts/platform/platform.ts region='domNode'}
       */
      bootstrap(componentOrFactory, rootSelectorOrNode) {
          if (!this._initStatus.done) {
              const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                  'Cannot bootstrap as there are still asynchronous initializers running. ' +
                      'Bootstrap components in the `ngDoBootstrap` method of the root module.' :
                  '';
              throw new RuntimeError(405 /* ASYNC_INITIALIZERS_STILL_RUNNING */, errorMessage);
          }
          let componentFactory;
          if (componentOrFactory instanceof ComponentFactory$1) {
              componentFactory = componentOrFactory;
          }
          else {
              const resolver = this._injector.get(ComponentFactoryResolver$1);
              componentFactory = resolver.resolveComponentFactory(componentOrFactory);
          }
          this.componentTypes.push(componentFactory.componentType);
          // Create a factory associated with the current module if it's not bound to some other
          const ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef$1);
          const selectorOrNode = rootSelectorOrNode || componentFactory.selector;
          const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
          const nativeElement = compRef.location.nativeElement;
          const testability = compRef.injector.get(Testability, null);
          const testabilityRegistry = testability && compRef.injector.get(TestabilityRegistry);
          if (testability && testabilityRegistry) {
              testabilityRegistry.registerApplication(nativeElement, testability);
          }
          compRef.onDestroy(() => {
              this.detachView(compRef.hostView);
              remove(this.components, compRef);
              if (testabilityRegistry) {
                  testabilityRegistry.unregisterApplication(nativeElement);
              }
          });
          this._loadComponent(compRef);
          if (typeof ngDevMode === 'undefined' || ngDevMode) {
              const _console = this._injector.get(Console);
              _console.log(`Angular is running in development mode. Call enableProdMode() to enable production mode.`);
          }
          return compRef;
      }
      /**
       * Invoke this method to explicitly process change detection and its side-effects.
       *
       * In development mode, `tick()` also performs a second change detection cycle to ensure that no
       * further changes are detected. If additional changes are picked up during this second cycle,
       * bindings in the app have side-effects that cannot be resolved in a single change detection
       * pass.
       * In this case, Angular throws an error, since an Angular application can only have one change
       * detection pass during which all change detection must complete.
       */
      tick() {
          if (this._runningTick) {
              const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                  'ApplicationRef.tick is called recursively' :
                  '';
              throw new RuntimeError(101 /* RECURSIVE_APPLICATION_REF_TICK */, errorMessage);
          }
          try {
              this._runningTick = true;
              for (let view of this._views) {
                  view.detectChanges();
              }
              if (typeof ngDevMode === 'undefined' || ngDevMode) {
                  for (let view of this._views) {
                      view.checkNoChanges();
                  }
              }
          }
          catch (e) {
              // Attention: Don't rethrow as it could cancel subscriptions to Observables!
              this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));
          }
          finally {
              this._runningTick = false;
          }
      }
      /**
       * Attaches a view so that it will be dirty checked.
       * The view will be automatically detached when it is destroyed.
       * This will throw if the view is already attached to a ViewContainer.
       */
      attachView(viewRef) {
          const view = viewRef;
          this._views.push(view);
          view.attachToAppRef(this);
      }
      /**
       * Detaches a view from dirty checking again.
       */
      detachView(viewRef) {
          const view = viewRef;
          remove(this._views, view);
          view.detachFromAppRef();
      }
      _loadComponent(componentRef) {
          this.attachView(componentRef.hostView);
          this.tick();
          this.components.push(componentRef);
          // Get the listeners lazily to prevent DI cycles.
          const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
          listeners.forEach((listener) => listener(componentRef));
      }
      /** @internal */
      ngOnDestroy() {
          this._views.slice().forEach((view) => view.destroy());
          this._onMicrotaskEmptySubscription.unsubscribe();
      }
      /**
       * Returns the number of attached views.
       */
      get viewCount() {
          return this._views.length;
      }
  }
  ApplicationRef.Éµfac = function ApplicationRef_Factory(t) { return new (t || ApplicationRef)(ÉµÉµinject(NgZone), ÉµÉµinject(Injector), ÉµÉµinject(ErrorHandler), ÉµÉµinject(ApplicationInitStatus)); };
  ApplicationRef.Éµprov = /*@__PURE__*/ ÉµÉµdefineInjectable({ token: ApplicationRef, factory: ApplicationRef.Éµfac, providedIn: 'root' });
  (function () { (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationRef, [{
          type: Injectable,
          args: [{ providedIn: 'root' }]
      }], function () { return [{ type: NgZone }, { type: Injector }, { type: ErrorHandler }, { type: ApplicationInitStatus }]; }, null); })();
  function remove(list, el) {
      const index = list.indexOf(el);
      if (index > -1) {
          list.splice(index, 1);
      }
  }
  function _lastDefined(args) {
      for (let i = args.length - 1; i >= 0; i--) {
          if (args[i] !== undefined) {
              return args[i];
          }
      }
      return undefined;
  }
  function _mergeArrays(parts) {
      const result = [];
      parts.forEach((part) => part && result.push(...part));
      return result;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.
   *
   * For more information on how to run and debug tests with either Ivy or View Engine (legacy),
   * please see [BAZEL.md](./docs/BAZEL.md).
   */
  let _devMode = true;
  let _runModeLocked = false;
  /**
   * Returns whether Angular is in development mode. After called once,
   * the value is locked and won't change any more.
   *
   * By default, this is true, unless a user calls `enableProdMode` before calling this.
   *
   * @publicApi
   */
  function isDevMode() {
      _runModeLocked = true;
      return _devMode;
  }
  /**
   * Disable Angular's development mode, which turns off assertions and other
   * checks within the framework.
   *
   * One important assertion this disables verifies that a change detection pass
   * does not result in additional changes to any bindings (also known as
   * unidirectional data flow).
   *
   * @publicApi
   */
  function enableProdMode() {
      if (_runModeLocked) {
          throw new Error('Cannot enable prod mode after platform setup.');
      }
      // The below check is there so when ngDevMode is set via terser
      // `global['ngDevMode'] = false;` is also dropped.
      if (typeof ngDevMode === undefined || !!ngDevMode) {
          _global['ngDevMode'] = false;
      }
      _devMode = false;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Returns the NgModuleFactory with the given id (specified using [@NgModule.id
   * field](api/core/NgModule#id)), if it exists and has been loaded. Factories for NgModules that do
   * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.
   * @publicApi
   * @deprecated Use `getNgModuleById` instead.
   */
  function getModuleFactory(id) {
      const type = getRegisteredNgModuleType(id);
      if (!type)
          throw noModuleError(id);
      return new NgModuleFactory(type);
  }
  /**
   * Returns the NgModule class with the given id (specified using [@NgModule.id
   * field](api/core/NgModule#id)), if it exists and has been loaded. Classes for NgModules that do
   * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.
   * @publicApi
   */
  function getNgModuleById(id) {
      const type = getRegisteredNgModuleType(id);
      if (!type)
          throw noModuleError(id);
      return type;
  }
  function noModuleError(id) {
      return new Error(`No module with ID ${id} loaded`);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Base class that provides change detection functionality.
   * A change-detection tree collects all views that are to be checked for changes.
   * Use the methods to add and remove views from the tree, initiate change-detection,
   * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.
   *
   * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)
   * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)
   *
   * @usageNotes
   *
   * The following examples demonstrate how to modify default change-detection behavior
   * to perform explicit detection when needed.
   *
   * ### Use `markForCheck()` with `CheckOnce` strategy
   *
   * The following example sets the `OnPush` change-detection strategy for a component
   * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check
   * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).
   *
   * <code-example path="core/ts/change_detect/change-detection.ts"
   * region="mark-for-check"></code-example>
   *
   * ### Detach change detector to limit how often check occurs
   *
   * The following example defines a component with a large list of read-only data
   * that is expected to change constantly, many times per second.
   * To improve performance, we want to check and update the list
   * less often than the changes actually occur. To do that, we detach
   * the component's change detector and perform an explicit local check every five seconds.
   *
   * <code-example path="core/ts/change_detect/change-detection.ts" region="detach"></code-example>
   *
   *
   * ### Reattaching a detached component
   *
   * The following example creates a component displaying live data.
   * The component detaches its change detector from the main change detector tree
   * when the `live` property is set to false, and reattaches it when the property
   * becomes true.
   *
   * <code-example path="core/ts/change_detect/change-detection.ts" region="reattach"></code-example>
   *
   * @publicApi
   */
  class ChangeDetectorRef {
  }
  /**
   * @internal
   * @nocollapse
   */
  ChangeDetectorRef.__NG_ELEMENT_ID__ = injectChangeDetectorRef;
  /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */
  function injectChangeDetectorRef(flags) {
      return createViewRef(getCurrentTNode(), getLView(), (flags & 16 /* ForPipe */) === 16 /* ForPipe */);
  }
  /**
   * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).
   *
   * @param tNode The node that is requesting a ChangeDetectorRef
   * @param lView The view to which the node belongs
   * @param isPipe Whether the view is being injected into a pipe.
   * @returns The ChangeDetectorRef to use
   */
  function createViewRef(tNode, lView, isPipe) {
      if (isComponentHost(tNode) && !isPipe) {
          // The LView represents the location where the component is declared.
          // Instead we want the LView for the component View and so we need to look it up.
          const componentView = getComponentLViewByIndex(tNode.index, lView); // look down
          return new ViewRef$1(componentView, componentView);
      }
      else if (tNode.type & (3 /* AnyRNode */ | 12 /* AnyContainer */ | 32 /* Icu */)) {
          // The LView represents the location where the injection is requested from.
          // We need to locate the containing LView (in case where the `lView` is an embedded view)
          const hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up
          return new ViewRef$1(hostComponentView, lView);
      }
      return null;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Represents an Angular [view](guide/glossary#view "Definition").
   *
   * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
   *
   * @publicApi
   */
  class ViewRef extends (/* unused pure expression or super */ null && (ChangeDetectorRef)) {
  }
  /**
   * Represents an Angular [view](guide/glossary#view) in a view container.
   * An [embedded view](guide/glossary#view-tree) can be referenced from a component
   * other than the hosting component whose template defines it, or it can be defined
   * independently by a `TemplateRef`.
   *
   * Properties of elements in a view can change, but the structure (number and order) of elements in
   * a view cannot. Change the structure of elements by inserting, moving, or
   * removing nested views in a view container.
   *
   * @see `ViewContainerRef`
   *
   * @usageNotes
   *
   * The following template breaks down into two separate `TemplateRef` instances,
   * an outer one and an inner one.
   *
   * ```
   * Count: {{items.length}}
   * <ul>
   *   <li *ngFor="let  item of items">{{item}}</li>
   * </ul>
   * ```
   *
   * This is the outer `TemplateRef`:
   *
   * ```
   * Count: {{items.length}}
   * <ul>
   *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
   * </ul>
   * ```
   *
   * This is the inner `TemplateRef`:
   *
   * ```
   *   <li>{{item}}</li>
   * ```
   *
   * The outer and inner `TemplateRef` instances are assembled into views as follows:
   *
   * ```
   * <!-- ViewRef: outer-0 -->
   * Count: 2
   * <ul>
   *   <ng-template view-container-ref></ng-template>
   *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
   *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
   * </ul>
   * <!-- /ViewRef: outer-0 -->
   * ```
   * @publicApi
   */
  class EmbeddedViewRef extends (/* unused pure expression or super */ null && (ViewRef)) {
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // This file exists for easily patching NgModuleFactoryLoader in g3
  var ng_module_factory_loader_impl = {};
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * @publicApi
   */
  class DebugEventListener {
      constructor(name, callback) {
          this.name = name;
          this.callback = callback;
      }
  }
  /**
   * @publicApi
   */
  function asNativeElements(debugEls) {
      return debugEls.map((el) => el.nativeElement);
  }
  /**
   * @publicApi
   */
  class DebugNode {
      constructor(nativeNode) {
          this.nativeNode = nativeNode;
      }
      /**
       * The `DebugElement` parent. Will be `null` if this is the root element.
       */
      get parent() {
          const parent = this.nativeNode.parentNode;
          return parent ? new DebugElement(parent) : null;
      }
      /**
       * The host dependency injector. For example, the root element's component instance injector.
       */
      get injector() {
          return getInjector(this.nativeNode);
      }
      /**
       * The element's own component instance, if it has one.
       */
      get componentInstance() {
          const nativeElement = this.nativeNode;
          return nativeElement &&
              (getComponent$1(nativeElement) || getOwningComponent(nativeElement));
      }
      /**
       * An object that provides parent context for this element. Often an ancestor component instance
       * that governs this element.
       *
       * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`
       * property is the value of the row instance value. For example, the `hero` in `*ngFor="let hero
       * of heroes"`.
       */
      get context() {
          return getComponent$1(this.nativeNode) || getContext(this.nativeNode);
      }
      /**
       * The callbacks attached to the component's @Output properties and/or the element's event
       * properties.
       */
      get listeners() {
          return getListeners(this.nativeNode).filter(listener => listener.type === 'dom');
      }
      /**
       * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local
       * variable name.
       */
      get references() {
          return getLocalRefs(this.nativeNode);
      }
      /**
       * This component's injector lookup tokens. Includes the component itself plus the tokens that the
       * component lists in its providers metadata.
       */
      get providerTokens() {
          return getInjectionTokens(this.nativeNode);
      }
  }
  /**
   * @publicApi
   *
   * @see [Component testing scenarios](guide/testing-components-scenarios)
   * @see [Basics of testing components](guide/testing-components-basics)
   * @see [Testing utility APIs](guide/testing-utility-apis)
   */
  class DebugElement extends (/* unused pure expression or super */ null && (DebugNode)) {
      constructor(nativeNode) {
          ngDevMode && assertDomNode(nativeNode);
          super(nativeNode);
      }
      /**
       * The underlying DOM element at the root of the component.
       */
      get nativeElement() {
          return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;
      }
      /**
       * The element tag name, if it is an element.
       */
      get name() {
          const context = getLContext(this.nativeNode);
          if (context !== null) {
              const lView = context.lView;
              const tData = lView[TVIEW].data;
              const tNode = tData[context.nodeIndex];
              return tNode.value;
          }
          else {
              return this.nativeNode.nodeName;
          }
      }
      /**
       *  Gets a map of property names to property values for an element.
       *
       *  This map includes:
       *  - Regular property bindings (e.g. `[id]="id"`)
       *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
       *  - Interpolated property bindings (e.g. `id="{{ value }}")
       *
       *  It does not include:
       *  - input property bindings (e.g. `[myCustomInput]="value"`)
       *  - attribute bindings (e.g. `[attr.role]="menu"`)
       */
      get properties() {
          const context = getLContext(this.nativeNode);
          if (context === null) {
              return {};
          }
          const lView = context.lView;
          const tData = lView[TVIEW].data;
          const tNode = tData[context.nodeIndex];
          const properties = {};
          // Collect properties from the DOM.
          copyDomProperties(this.nativeElement, properties);
          // Collect properties from the bindings. This is needed for animation renderer which has
          // synthetic properties which don't get reflected into the DOM.
          collectPropertyBindings(properties, tNode, lView, tData);
          return properties;
      }
      /**
       *  A map of attribute names to attribute values for an element.
       */
      get attributes() {
          const attributes = {};
          const element = this.nativeElement;
          if (!element) {
              return attributes;
          }
          const context = getLContext(element);
          if (context === null) {
              return {};
          }
          const lView = context.lView;
          const tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;
          const lowercaseTNodeAttrs = [];
          // For debug nodes we take the element's attribute directly from the DOM since it allows us
          // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones
          // that are set through `Renderer2`). The problem is that the browser will lowercase all names,
          // however since we have the attributes already on the TNode, we can preserve the case by going
          // through them once, adding them to the `attributes` map and putting their lower-cased name
          // into an array. Afterwards when we're going through the native DOM attributes, we can check
          // whether we haven't run into an attribute already through the TNode.
          if (tNodeAttrs) {
              let i = 0;
              while (i < tNodeAttrs.length) {
                  const attrName = tNodeAttrs[i];
                  // Stop as soon as we hit a marker. We only care about the regular attributes. Everything
                  // else will be handled below when we read the final attributes off the DOM.
                  if (typeof attrName !== 'string')
                      break;
                  const attrValue = tNodeAttrs[i + 1];
                  attributes[attrName] = attrValue;
                  lowercaseTNodeAttrs.push(attrName.toLowerCase());
                  i += 2;
              }
          }
          const eAttrs = element.attributes;
          for (let i = 0; i < eAttrs.length; i++) {
              const attr = eAttrs[i];
              const lowercaseName = attr.name.toLowerCase();
              // Make sure that we don't assign the same attribute both in its
              // case-sensitive form and the lower-cased one from the browser.
              if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {
                  // Save the lowercase name to align the behavior between browsers.
                  // IE preserves the case, while all other browser convert it to lower case.
                  attributes[lowercaseName] = attr.value;
              }
          }
          return attributes;
      }
      /**
       * The inline styles of the DOM element.
       *
       * Will be `null` if there is no `style` property on the underlying DOM element.
       *
       * @see [ElementCSSInlineStyle](https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style)
       */
      get styles() {
          if (this.nativeElement && this.nativeElement.style) {
              return this.nativeElement.style;
          }
          return {};
      }
      /**
       * A map containing the class names on the element as keys.
       *
       * This map is derived from the `className` property of the DOM element.
       *
       * Note: The values of this object will always be `true`. The class key will not appear in the KV
       * object if it does not exist on the element.
       *
       * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
       */
      get classes() {
          const result = {};
          const element = this.nativeElement;
          // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.
          const className = element.className;
          const classes = typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');
          classes.forEach((value) => result[value] = true);
          return result;
      }
      /**
       * The `childNodes` of the DOM element as a `DebugNode` array.
       *
       * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)
       */
      get childNodes() {
          const childNodes = this.nativeNode.childNodes;
          const children = [];
          for (let i = 0; i < childNodes.length; i++) {
              const element = childNodes[i];
              children.push(getDebugNode(element));
          }
          return children;
      }
      /**
       * The immediate `DebugElement` children. Walk the tree by descending through `children`.
       */
      get children() {
          const nativeElement = this.nativeElement;
          if (!nativeElement)
              return [];
          const childNodes = nativeElement.children;
          const children = [];
          for (let i = 0; i < childNodes.length; i++) {
              const element = childNodes[i];
              children.push(getDebugNode(element));
          }
          return children;
      }
      /**
       * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.
       */
      query(predicate) {
          const results = this.queryAll(predicate);
          return results[0] || null;
      }
      /**
       * @returns All `DebugElement` matches for the predicate at any depth in the subtree.
       */
      queryAll(predicate) {
          const matches = [];
          _queryAll(this, predicate, matches, true);
          return matches;
      }
      /**
       * @returns All `DebugNode` matches for the predicate at any depth in the subtree.
       */
      queryAllNodes(predicate) {
          const matches = [];
          _queryAll(this, predicate, matches, false);
          return matches;
      }
      /**
       * Triggers the event by its name if there is a corresponding listener in the element's
       * `listeners` collection.
       *
       * If the event lacks a listener or there's some other problem, consider
       * calling `nativeElement.dispatchEvent(eventObject)`.
       *
       * @param eventName The name of the event to trigger
       * @param eventObj The _event object_ expected by the handler
       *
       * @see [Testing components scenarios](guide/testing-components-scenarios#trigger-event-handler)
       */
      triggerEventHandler(eventName, eventObj) {
          const node = this.nativeNode;
          const invokedListeners = [];
          this.listeners.forEach(listener => {
              if (listener.name === eventName) {
                  const callback = listener.callback;
                  callback.call(node, eventObj);
                  invokedListeners.push(callback);
              }
          });
          // We need to check whether `eventListeners` exists, because it's something
          // that Zone.js only adds to `EventTarget` in browser environments.
          if (typeof node.eventListeners === 'function') {
              // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some
              // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event
              // listener.
              node.eventListeners(eventName).forEach((listener) => {
                  // In order to ensure that we can detect the special __ngUnwrap__ token described above, we
                  // use `toString` on the listener and see if it contains the token. We use this approach to
                  // ensure that it still worked with compiled code since it cannot remove or rename string
                  // literals. We also considered using a special function name (i.e. if(listener.name ===
                  // special)) but that was more cumbersome and we were also concerned the compiled code could
                  // strip the name, turning the condition in to ("" === "") and always returning true.
                  if (listener.toString().indexOf('__ngUnwrap__') !== -1) {
                      const unwrappedListener = listener('__ngUnwrap__');
                      return invokedListeners.indexOf(unwrappedListener) === -1 &&
                          unwrappedListener.call(node, eventObj);
                  }
              });
          }
      }
  }
  function copyDomProperties(element, properties) {
      if (element) {
          // Skip own properties (as those are patched)
          let obj = Object.getPrototypeOf(element);
          const NodePrototype = Node.prototype;
          while (obj !== null && obj !== NodePrototype) {
              const descriptors = Object.getOwnPropertyDescriptors(obj);
              for (let key in descriptors) {
                  if (!key.startsWith('__') && !key.startsWith('on')) {
                      // don't include properties starting with `__` and `on`.
                      // `__` are patched values which should not be included.
                      // `on` are listeners which also should not be included.
                      const value = element[key];
                      if (isPrimitiveValue(value)) {
                          properties[key] = value;
                      }
                  }
              }
              obj = Object.getPrototypeOf(obj);
          }
      }
  }
  function isPrimitiveValue(value) {
      return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' ||
          value === null;
  }
  function _queryAll(parentElement, predicate, matches, elementsOnly) {
      const context = getLContext(parentElement.nativeNode);
      if (context !== null) {
          const parentTNode = context.lView[TVIEW].data[context.nodeIndex];
          _queryNodeChildren(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);
      }
      else {
          // If the context is null, then `parentElement` was either created with Renderer2 or native DOM
          // APIs.
          _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);
      }
  }
  /**
   * Recursively match the current TNode against the predicate, and goes on with the next ones.
   *
   * @param tNode the current TNode
   * @param lView the LView of this TNode
   * @param predicate the predicate to match
   * @param matches the list of positive matches
   * @param elementsOnly whether only elements should be searched
   * @param rootNativeNode the root native node on which predicate should not be matched
   */
  function _queryNodeChildren(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {
      ngDevMode && assertTNodeForLView(tNode, lView);
      const nativeNode = getNativeByTNodeOrNull(tNode, lView);
      // For each type of TNode, specific logic is executed.
      if (tNode.type & (3 /* AnyRNode */ | 8 /* ElementContainer */)) {
          // Case 1: the TNode is an element
          // The native node has to be checked.
          _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);
          if (isComponentHost(tNode)) {
              // If the element is the host of a component, then all nodes in its view have to be processed.
              // Note: the component's content (tNode.child) will be processed from the insertion points.
              const componentView = getComponentLViewByIndex(tNode.index, lView);
              if (componentView && componentView[TVIEW].firstChild) {
                  _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);
              }
          }
          else {
              if (tNode.child) {
                  // Otherwise, its children have to be processed.
                  _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
              }
              // We also have to query the DOM directly in order to catch elements inserted through
              // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple
              // times. ViewEngine could do it more efficiently, because all the insertions go through
              // Renderer2, however that's not the case in Ivy. This approach is being used because:
              // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency
              //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.
              // 2. We would have to make `Renderer3` "know" about debug nodes.
              // 3. It allows us to capture nodes that were inserted directly via the DOM.
              nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);
          }
          // In all cases, if a dynamic container exists for this node, each view inside it has to be
          // processed.
          const nodeOrContainer = lView[tNode.index];
          if (isLContainer(nodeOrContainer)) {
              _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);
          }
      }
      else if (tNode.type & 4 /* Container */) {
          // Case 2: the TNode is a container
          // The native node has to be checked.
          const lContainer = lView[tNode.index];
          _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);
          // Each view inside the container has to be processed.
          _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);
      }
      else if (tNode.type & 16 /* Projection */) {
          // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).
          // The nodes projected at this location all need to be processed.
          const componentView = lView[DECLARATION_COMPONENT_VIEW];
          const componentHost = componentView[T_HOST];
          const head = componentHost.projection[tNode.projection];
          if (Array.isArray(head)) {
              for (let nativeNode of head) {
                  _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);
              }
          }
          else if (head) {
              const nextLView = componentView[PARENT];
              const nextTNode = nextLView[TVIEW].data[head.index];
              _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);
          }
      }
      else if (tNode.child) {
          // Case 4: the TNode is a view.
          _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
      }
      // We don't want to go to the next sibling of the root node.
      if (rootNativeNode !== nativeNode) {
          // To determine the next node to be processed, we need to use the next or the projectionNext
          // link, depending on whether the current node has been projected.
          const nextTNode = (tNode.flags & 4 /* isProjected */) ? tNode.projectionNext : tNode.next;
          if (nextTNode) {
              _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);
          }
      }
  }
  /**
   * Process all TNodes in a given container.
   *
   * @param lContainer the container to be processed
   * @param predicate the predicate to match
   * @param matches the list of positive matches
   * @param elementsOnly whether only elements should be searched
   * @param rootNativeNode the root native node on which predicate should not be matched
   */
  function _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode) {
      for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
          const childView = lContainer[i];
          const firstChild = childView[TVIEW].firstChild;
          if (firstChild) {
              _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);
          }
      }
  }
  /**
   * Match the current native node against the predicate.
   *
   * @param nativeNode the current native node
   * @param predicate the predicate to match
   * @param matches the list of positive matches
   * @param elementsOnly whether only elements should be searched
   * @param rootNativeNode the root native node on which predicate should not be matched
   */
  function _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {
      if (rootNativeNode !== nativeNode) {
          const debugNode = getDebugNode(nativeNode);
          if (!debugNode) {
              return;
          }
          // Type of the "predicate and "matches" array are set based on the value of
          // the "elementsOnly" parameter. TypeScript is not able to properly infer these
          // types with generics, so we manually cast the parameters accordingly.
          if (elementsOnly && (debugNode instanceof DebugElement) && predicate(debugNode) &&
              matches.indexOf(debugNode) === -1) {
              matches.push(debugNode);
          }
          else if (!elementsOnly && predicate(debugNode) &&
              matches.indexOf(debugNode) === -1) {
              matches.push(debugNode);
          }
      }
  }
  /**
   * Match all the descendants of a DOM node against a predicate.
   *
   * @param nativeNode the current native node
   * @param predicate the predicate to match
   * @param matches the list where matches are stored
   * @param elementsOnly whether only elements should be searched
   */
  function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {
      const nodes = parentNode.childNodes;
      const length = nodes.length;
      for (let i = 0; i < length; i++) {
          const node = nodes[i];
          const debugNode = getDebugNode(node);
          if (debugNode) {
              if (elementsOnly && (debugNode instanceof DebugElement) && predicate(debugNode) &&
                  matches.indexOf(debugNode) === -1) {
                  matches.push(debugNode);
              }
              else if (!elementsOnly && predicate(debugNode) &&
                  matches.indexOf(debugNode) === -1) {
                  matches.push(debugNode);
              }
              _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);
          }
      }
  }
  /**
   * Iterates through the property bindings for a given node and generates
   * a map of property names to values. This map only contains property bindings
   * defined in templates, not in host bindings.
   */
  function collectPropertyBindings(properties, tNode, lView, tData) {
      let bindingIndexes = tNode.propertyBindings;
      if (bindingIndexes !== null) {
          for (let i = 0; i < bindingIndexes.length; i++) {
              const bindingIndex = bindingIndexes[i];
              const propMetadata = tData[bindingIndex];
              const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
              const propertyName = metadataParts[0];
              if (metadataParts.length > 1) {
                  let value = metadataParts[1];
                  for (let j = 1; j < metadataParts.length - 1; j++) {
                      value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
                  }
                  properties[propertyName] = value;
              }
              else {
                  properties[propertyName] = lView[bindingIndex];
              }
          }
      }
  }
  // Need to keep the nodes in a global Map so that multiple angular apps are supported.
  const _nativeNodeToDebugNode = new Map();
  const NG_DEBUG_PROPERTY = '__ng_debug__';
  /**
   * @publicApi
   */
  function getDebugNode(nativeNode) {
      if (nativeNode instanceof Node) {
          if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {
              nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?
                  new DebugElement(nativeNode) :
                  new DebugNode(nativeNode);
          }
          return nativeNode[NG_DEBUG_PROPERTY];
      }
      return null;
  }
  // TODO: cleanup all references to this function and remove it.
  function getDebugNodeR2(_nativeNode) {
      return null;
  }
  function getAllDebugNodes() {
      return Array.from(_nativeNodeToDebugNode.values());
  }
  function indexDebugNode(node) {
      _nativeNodeToDebugNode.set(node.nativeNode, node);
  }
  function removeDebugNodeFromIndex(node) {
      _nativeNodeToDebugNode.delete(node.nativeNode);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class DefaultIterableDifferFactory {
      constructor() { }
      supports(obj) {
          return isListLikeIterable(obj);
      }
      create(trackByFn) {
          return new DefaultIterableDiffer(trackByFn);
      }
  }
  const trackByIdentity = (index, item) => item;
  /**
   * @deprecated v4.0.0 - Should not be part of public API.
   * @publicApi
   */
  class DefaultIterableDiffer {
      constructor(trackByFn) {
          this.length = 0;
          // Keeps track of the used records at any point in time (during & across `_check()` calls)
          this._linkedRecords = null;
          // Keeps track of the removed records at any point in time during `_check()` calls.
          this._unlinkedRecords = null;
          this._previousItHead = null;
          this._itHead = null;
          this._itTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._movesHead = null;
          this._movesTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
          // Keeps track of records where custom track by is the same, but item identity has changed
          this._identityChangesHead = null;
          this._identityChangesTail = null;
          this._trackByFn = trackByFn || trackByIdentity;
      }
      forEachItem(fn) {
          let record;
          for (record = this._itHead; record !== null; record = record._next) {
              fn(record);
          }
      }
      forEachOperation(fn) {
          let nextIt = this._itHead;
          let nextRemove = this._removalsHead;
          let addRemoveOffset = 0;
          let moveOffsets = null;
          while (nextIt || nextRemove) {
              // Figure out which is the next record to process
              // Order: remove, add, move
              const record = !nextRemove ||
                  nextIt &&
                      nextIt.currentIndex <
                          getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
                  nextIt :
                  nextRemove;
              const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
              const currentIndex = record.currentIndex;
              // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
              if (record === nextRemove) {
                  addRemoveOffset--;
                  nextRemove = nextRemove._nextRemoved;
              }
              else {
                  nextIt = nextIt._next;
                  if (record.previousIndex == null) {
                      addRemoveOffset++;
                  }
                  else {
                      // INVARIANT:  currentIndex < previousIndex
                      if (!moveOffsets)
                          moveOffsets = [];
                      const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                      const localCurrentIndex = currentIndex - addRemoveOffset;
                      if (localMovePreviousIndex != localCurrentIndex) {
                          for (let i = 0; i < localMovePreviousIndex; i++) {
                              const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                              const index = offset + i;
                              if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                  moveOffsets[i] = offset + 1;
                              }
                          }
                          const previousIndex = record.previousIndex;
                          moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                      }
                  }
              }
              if (adjPreviousIndex !== currentIndex) {
                  fn(record, adjPreviousIndex, currentIndex);
              }
          }
      }
      forEachPreviousItem(fn) {
          let record;
          for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
              fn(record);
          }
      }
      forEachAddedItem(fn) {
          let record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              fn(record);
          }
      }
      forEachMovedItem(fn) {
          let record;
          for (record = this._movesHead; record !== null; record = record._nextMoved) {
              fn(record);
          }
      }
      forEachRemovedItem(fn) {
          let record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
              fn(record);
          }
      }
      forEachIdentityChange(fn) {
          let record;
          for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
              fn(record);
          }
      }
      diff(collection) {
          if (collection == null)
              collection = [];
          if (!isListLikeIterable(collection)) {
              const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                  `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed` :
                  '';
              throw new RuntimeError(900 /* INVALID_DIFFER_INPUT */, errorMessage);
          }
          if (this.check(collection)) {
              return this;
          }
          else {
              return null;
          }
      }
      onDestroy() { }
      check(collection) {
          this._reset();
          let record = this._itHead;
          let mayBeDirty = false;
          let index;
          let item;
          let itemTrackBy;
          if (Array.isArray(collection)) {
              this.length = collection.length;
              for (let index = 0; index < this.length; index++) {
                  item = collection[index];
                  itemTrackBy = this._trackByFn(index, item);
                  if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                      record = this._mismatch(record, item, itemTrackBy, index);
                      mayBeDirty = true;
                  }
                  else {
                      if (mayBeDirty) {
                          // TODO(misko): can we limit this to duplicates only?
                          record = this._verifyReinsertion(record, item, itemTrackBy, index);
                      }
                      if (!Object.is(record.item, item))
                          this._addIdentityChange(record, item);
                  }
                  record = record._next;
              }
          }
          else {
              index = 0;
              iterateListLike(collection, (item) => {
                  itemTrackBy = this._trackByFn(index, item);
                  if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                      record = this._mismatch(record, item, itemTrackBy, index);
                      mayBeDirty = true;
                  }
                  else {
                      if (mayBeDirty) {
                          // TODO(misko): can we limit this to duplicates only?
                          record = this._verifyReinsertion(record, item, itemTrackBy, index);
                      }
                      if (!Object.is(record.item, item))
                          this._addIdentityChange(record, item);
                  }
                  record = record._next;
                  index++;
              });
              this.length = index;
          }
          this._truncate(record);
          this.collection = collection;
          return this.isDirty;
      }
      /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
       * changes.
       */
      get isDirty() {
          return this._additionsHead !== null || this._movesHead !== null ||
              this._removalsHead !== null || this._identityChangesHead !== null;
      }
      /**
       * Reset the state of the change objects to show no changes. This means set previousKey to
       * currentKey, and clear all of the queues (additions, moves, removals).
       * Set the previousIndexes of moved and added items to their currentIndexes
       * Reset the list of additions, moves and removals
       *
       * @internal
       */
      _reset() {
          if (this.isDirty) {
              let record;
              for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                  record._nextPrevious = record._next;
              }
              for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                  record.previousIndex = record.currentIndex;
              }
              this._additionsHead = this._additionsTail = null;
              for (record = this._movesHead; record !== null; record = record._nextMoved) {
                  record.previousIndex = record.currentIndex;
              }
              this._movesHead = this._movesTail = null;
              this._removalsHead = this._removalsTail = null;
              this._identityChangesHead = this._identityChangesTail = null;
              // TODO(vicb): when assert gets supported
              // assert(!this.isDirty);
          }
      }
      /**
       * This is the core function which handles differences between collections.
       *
       * - `record` is the record which we saw at this position last time. If null then it is a new
       *   item.
       * - `item` is the current item in the collection
       * - `index` is the position of the item in the collection
       *
       * @internal
       */
      _mismatch(record, item, itemTrackBy, index) {
          // The previous record after which we will append the current one.
          let previousRecord;
          if (record === null) {
              previousRecord = this._itTail;
          }
          else {
              previousRecord = record._prev;
              // Remove the record from the collection since we know it does not match the item.
              this._remove(record);
          }
          // See if we have evicted the item, which used to be at some anterior position of _itHead list.
          record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
          if (record !== null) {
              // It is an item which we have evicted earlier: reinsert it back into the list.
              // But first we need to check if identity changed, so we can update in view if necessary.
              if (!Object.is(record.item, item))
                  this._addIdentityChange(record, item);
              this._reinsertAfter(record, previousRecord, index);
          }
          else {
              // Attempt to see if the item is at some posterior position of _itHead list.
              record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
              if (record !== null) {
                  // We have the item in _itHead at/after `index` position. We need to move it forward in the
                  // collection.
                  // But first we need to check if identity changed, so we can update in view if necessary.
                  if (!Object.is(record.item, item))
                      this._addIdentityChange(record, item);
                  this._moveAfter(record, previousRecord, index);
              }
              else {
                  // It is a new item: add it.
                  record =
                      this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
              }
          }
          return record;
      }
      /**
       * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
       *
       * Use case: `[a, a]` => `[b, a, a]`
       *
       * If we did not have this check then the insertion of `b` would:
       *   1) evict first `a`
       *   2) insert `b` at `0` index.
       *   3) leave `a` at index `1` as is. <-- this is wrong!
       *   3) reinsert `a` at index 2. <-- this is wrong!
       *
       * The correct behavior is:
       *   1) evict first `a`
       *   2) insert `b` at `0` index.
       *   3) reinsert `a` at index 1.
       *   3) move `a` at from `1` to `2`.
       *
       *
       * Double check that we have not evicted a duplicate item. We need to check if the item type may
       * have already been removed:
       * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
       * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
       * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
       * at the end.
       *
       * @internal
       */
      _verifyReinsertion(record, item, itemTrackBy, index) {
          let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
          if (reinsertRecord !== null) {
              record = this._reinsertAfter(reinsertRecord, record._prev, index);
          }
          else if (record.currentIndex != index) {
              record.currentIndex = index;
              this._addToMoves(record, index);
          }
          return record;
      }
      /**
       * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
       *
       * - `record` The first excess {@link IterableChangeRecord_}.
       *
       * @internal
       */
      _truncate(record) {
          // Anything after that needs to be removed;
          while (record !== null) {
              const nextRecord = record._next;
              this._addToRemovals(this._unlink(record));
              record = nextRecord;
          }
          if (this._unlinkedRecords !== null) {
              this._unlinkedRecords.clear();
          }
          if (this._additionsTail !== null) {
              this._additionsTail._nextAdded = null;
          }
          if (this._movesTail !== null) {
              this._movesTail._nextMoved = null;
          }
          if (this._itTail !== null) {
              this._itTail._next = null;
          }
          if (this._removalsTail !== null) {
              this._removalsTail._nextRemoved = null;
          }
          if (this._identityChangesTail !== null) {
              this._identityChangesTail._nextIdentityChange = null;
          }
      }
      /** @internal */
      _reinsertAfter(record, prevRecord, index) {
          if (this._unlinkedRecords !== null) {
              this._unlinkedRecords.remove(record);
          }
          const prev = record._prevRemoved;
          const next = record._nextRemoved;
          if (prev === null) {
              this._removalsHead = next;
          }
          else {
              prev._nextRemoved = next;
          }
          if (next === null) {
              this._removalsTail = prev;
          }
          else {
              next._prevRemoved = prev;
          }
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
      }
      /** @internal */
      _moveAfter(record, prevRecord, index) {
          this._unlink(record);
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
      }
      /** @internal */
      _addAfter(record, prevRecord, index) {
          this._insertAfter(record, prevRecord, index);
          if (this._additionsTail === null) {
              // TODO(vicb):
              // assert(this._additionsHead === null);
              this._additionsTail = this._additionsHead = record;
          }
          else {
              // TODO(vicb):
              // assert(_additionsTail._nextAdded === null);
              // assert(record._nextAdded === null);
              this._additionsTail = this._additionsTail._nextAdded = record;
          }
          return record;
      }
      /** @internal */
      _insertAfter(record, prevRecord, index) {
          // TODO(vicb):
          // assert(record != prevRecord);
          // assert(record._next === null);
          // assert(record._prev === null);
          const next = prevRecord === null ? this._itHead : prevRecord._next;
          // TODO(vicb):
          // assert(next != record);
          // assert(prevRecord != record);
          record._next = next;
          record._prev = prevRecord;
          if (next === null) {
              this._itTail = record;
          }
          else {
              next._prev = record;
          }
          if (prevRecord === null) {
              this._itHead = record;
          }
          else {
              prevRecord._next = record;
          }
          if (this._linkedRecords === null) {
              this._linkedRecords = new _DuplicateMap();
          }
          this._linkedRecords.put(record);
          record.currentIndex = index;
          return record;
      }
      /** @internal */
      _remove(record) {
          return this._addToRemovals(this._unlink(record));
      }
      /** @internal */
      _unlink(record) {
          if (this._linkedRecords !== null) {
              this._linkedRecords.remove(record);
          }
          const prev = record._prev;
          const next = record._next;
          // TODO(vicb):
          // assert((record._prev = null) === null);
          // assert((record._next = null) === null);
          if (prev === null) {
              this._itHead = next;
          }
          else {
              prev._next = next;
          }
          if (next === null) {
              this._itTail = prev;
          }
          else {
              next._prev = prev;
          }
          return record;
      }
      /** @internal */
      _addToMoves(record, toIndex) {
          // TODO(vicb):
          // assert(record._nextMoved === null);
          if (record.previousIndex === toIndex) {
              return record;
          }
          if (this._movesTail === null) {
              // TODO(vicb):
              // assert(_movesHead === null);
              this._movesTail = this._movesHead = record;
          }
          else {
              // TODO(vicb):
              // assert(_movesTail._nextMoved === null);
              this._movesTail = this._movesTail._nextMoved = record;
          }
          return record;
      }
      _addToRemovals(record) {
          if (this._unlinkedRecords === null) {
              this._unlinkedRecords = new _DuplicateMap();
          }
          this._unlinkedRecords.put(record);
          record.currentIndex = null;
          record._nextRemoved = null;
          if (this._removalsTail === null) {
              // TODO(vicb):
              // assert(_removalsHead === null);
              this._removalsTail = this._removalsHead = record;
              record._prevRemoved = null;
          }
          else {
              // TODO(vicb):
              // assert(_removalsTail._nextRemoved === null);
              // assert(record._nextRemoved === null);
              record._prevRemoved = this._removalsTail;
              this._removalsTail = this._removalsTail._nextRemoved = record;
          }
          return record;
      }
      /** @internal */
      _addIdentityChange(record, item) {
          record.item = item;
          if (this._identityChangesTail === null) {
              this._identityChangesTail = this._identityChangesHead = record;
          }
          else {
              this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
          }
          return record;
      }
  }
  class IterableChangeRecord_ {
      constructor(item, trackById) {
          this.item = item;
          this.trackById = trackById;
          this.currentIndex = null;
          this.previousIndex = null;
          /** @internal */
          this._nextPrevious = null;
          /** @internal */
          this._prev = null;
          /** @internal */
          this._next = null;
          /** @internal */
          this._prevDup = null;
          /** @internal */
          this._nextDup = null;
          /** @internal */
          this._prevRemoved = null;
          /** @internal */
          this._nextRemoved = null;
          /** @internal */
          this._nextAdded = null;
          /** @internal */
          this._nextMoved = null;
          /** @internal */
          this._nextIdentityChange = null;
      }
  }
  // A linked list of IterableChangeRecords with the same IterableChangeRecord_.item
  class _DuplicateItemRecordList {
      constructor() {
          /** @internal */
          this._head = null;
          /** @internal */
          this._tail = null;
      }
      /**
       * Append the record to the list of duplicates.
       *
       * Note: by design all records in the list of duplicates hold the same value in record.item.
       */
      add(record) {
          if (this._head === null) {
              this._head = this._tail = record;
              record._nextDup = null;
              record._prevDup = null;
          }
          else {
              // TODO(vicb):
              // assert(record.item ==  _head.item ||
              //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
              this._tail._nextDup = record;
              record._prevDup = this._tail;
              record._nextDup = null;
              this._tail = record;
          }
      }
      // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
      // IterableChangeRecord_.currentIndex >= atOrAfterIndex
      get(trackById, atOrAfterIndex) {
          let record;
          for (record = this._head; record !== null; record = record._nextDup) {
              if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&
                  Object.is(record.trackById, trackById)) {
                  return record;
              }
          }
          return null;
      }
      /**
       * Remove one {@link IterableChangeRecord_} from the list of duplicates.
       *
       * Returns whether the list of duplicates is empty.
       */
      remove(record) {
          // TODO(vicb):
          // assert(() {
          //  // verify that the record being removed is in the list.
          //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
          //    if (identical(cursor, record)) return true;
          //  }
          //  return false;
          //});
          const prev = record._prevDup;
          const next = record._nextDup;
          if (prev === null) {
              this._head = next;
          }
          else {
              prev._nextDup = next;
          }
          if (next === null) {
              this._tail = prev;
          }
          else {
              next._prevDup = prev;
          }
          return this._head === null;
      }
  }
  class _DuplicateMap {
      constructor() {
          this.map = new Map();
      }
      put(record) {
          const key = record.trackById;
          let duplicates = this.map.get(key);
          if (!duplicates) {
              duplicates = new _DuplicateItemRecordList();
              this.map.set(key, duplicates);
          }
          duplicates.add(record);
      }
      /**
       * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
       * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
       *
       * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
       * have any more `a`s needs to return the second `a`.
       */
      get(trackById, atOrAfterIndex) {
          const key = trackById;
          const recordList = this.map.get(key);
          return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
      }
      /**
       * Removes a {@link IterableChangeRecord_} from the list of duplicates.
       *
       * The list of duplicates also is removed from the map if it gets empty.
       */
      remove(record) {
          const key = record.trackById;
          const recordList = this.map.get(key);
          // Remove the list of duplicates when it gets empty
          if (recordList.remove(record)) {
              this.map.delete(key);
          }
          return record;
      }
      get isEmpty() {
          return this.map.size === 0;
      }
      clear() {
          this.map.clear();
      }
  }
  function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
      const previousIndex = item.previousIndex;
      if (previousIndex === null)
          return previousIndex;
      let moveOffset = 0;
      if (moveOffsets && previousIndex < moveOffsets.length) {
          moveOffset = moveOffsets[previousIndex];
      }
      return previousIndex + addRemoveOffset + moveOffset;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  class DefaultKeyValueDifferFactory {
      constructor() { }
      supports(obj) {
          return obj instanceof Map || isJsObject(obj);
      }
      create() {
          return new DefaultKeyValueDiffer();
      }
  }
  class DefaultKeyValueDiffer {
      constructor() {
          this._records = new Map();
          this._mapHead = null;
          // _appendAfter is used in the check loop
          this._appendAfter = null;
          this._previousMapHead = null;
          this._changesHead = null;
          this._changesTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
      }
      get isDirty() {
          return this._additionsHead !== null || this._changesHead !== null ||
              this._removalsHead !== null;
      }
      forEachItem(fn) {
          let record;
          for (record = this._mapHead; record !== null; record = record._next) {
              fn(record);
          }
      }
      forEachPreviousItem(fn) {
          let record;
          for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
              fn(record);
          }
      }
      forEachChangedItem(fn) {
          let record;
          for (record = this._changesHead; record !== null; record = record._nextChanged) {
              fn(record);
          }
      }
      forEachAddedItem(fn) {
          let record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              fn(record);
          }
      }
      forEachRemovedItem(fn) {
          let record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
              fn(record);
          }
      }
      diff(map) {
          if (!map) {
              map = new Map();
          }
          else if (!(map instanceof Map || isJsObject(map))) {
              const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                  `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed` :
                  '';
              throw new RuntimeError(900 /* INVALID_DIFFER_INPUT */, errorMessage);
          }
          return this.check(map) ? this : null;
      }
      onDestroy() { }
      /**
       * Check the current state of the map vs the previous.
       * The algorithm is optimised for when the keys do no change.
       */
      check(map) {
          this._reset();
          let insertBefore = this._mapHead;
          this._appendAfter = null;
          this._forEach(map, (value, key) => {
              if (insertBefore && insertBefore.key === key) {
                  this._maybeAddToChanges(insertBefore, value);
                  this._appendAfter = insertBefore;
                  insertBefore = insertBefore._next;
              }
              else {
                  const record = this._getOrCreateRecordForKey(key, value);
                  insertBefore = this._insertBeforeOrAppend(insertBefore, record);
              }
          });
          // Items remaining at the end of the list have been deleted
          if (insertBefore) {
              if (insertBefore._prev) {
                  insertBefore._prev._next = null;
              }
              this._removalsHead = insertBefore;
              for (let record = insertBefore; record !== null; record = record._nextRemoved) {
                  if (record === this._mapHead) {
                      this._mapHead = null;
                  }
                  this._records.delete(record.key);
                  record._nextRemoved = record._next;
                  record.previousValue = record.currentValue;
                  record.currentValue = null;
                  record._prev = null;
                  record._next = null;
              }
          }
          // Make sure tails have no next records from previous runs
          if (this._changesTail)
              this._changesTail._nextChanged = null;
          if (this._additionsTail)
              this._additionsTail._nextAdded = null;
          return this.isDirty;
      }
      /**
       * Inserts a record before `before` or append at the end of the list when `before` is null.
       *
       * Notes:
       * - This method appends at `this._appendAfter`,
       * - This method updates `this._appendAfter`,
       * - The return value is the new value for the insertion pointer.
       */
      _insertBeforeOrAppend(before, record) {
          if (before) {
              const prev = before._prev;
              record._next = before;
              record._prev = prev;
              before._prev = record;
              if (prev) {
                  prev._next = record;
              }
              if (before === this._mapHead) {
                  this._mapHead = record;
              }
              this._appendAfter = before;
              return before;
          }
          if (this._appendAfter) {
              this._appendAfter._next = record;
              record._prev = this._appendAfter;
          }
          else {
              this._mapHead = record;
          }
          this._appendAfter = record;
          return null;
      }
      _getOrCreateRecordForKey(key, value) {
          if (this._records.has(key)) {
              const record = this._records.get(key);
              this._maybeAddToChanges(record, value);
              const prev = record._prev;
              const next = record._next;
              if (prev) {
                  prev._next = next;
              }
              if (next) {
                  next._prev = prev;
              }
              record._next = null;
              record._prev = null;
              return record;
          }
          const record = new KeyValueChangeRecord_(key);
          this._records.set(key, record);
          record.currentValue = value;
          this._addToAdditions(record);
          return record;
      }
      /** @internal */
      _reset() {
          if (this.isDirty) {
              let record;
              // let `_previousMapHead` contain the state of the map before the changes
              this._previousMapHead = this._mapHead;
              for (record = this._previousMapHead; record !== null; record = record._next) {
                  record._nextPrevious = record._next;
              }
              // Update `record.previousValue` with the value of the item before the changes
              // We need to update all changed items (that's those which have been added and changed)
              for (record = this._changesHead; record !== null; record = record._nextChanged) {
                  record.previousValue = record.currentValue;
              }
              for (record = this._additionsHead; record != null; record = record._nextAdded) {
                  record.previousValue = record.currentValue;
              }
              this._changesHead = this._changesTail = null;
              this._additionsHead = this._additionsTail = null;
              this._removalsHead = null;
          }
      }
      // Add the record or a given key to the list of changes only when the value has actually changed
      _maybeAddToChanges(record, newValue) {
          if (!Object.is(newValue, record.currentValue)) {
              record.previousValue = record.currentValue;
              record.currentValue = newValue;
              this._addToChanges(record);
          }
      }
      _addToAdditions(record) {
          if (this._additionsHead === null) {
              this._additionsHead = this._additionsTail = record;
          }
          else {
              this._additionsTail._nextAdded = record;
              this._additionsTail = record;
          }
      }
      _addToChanges(record) {
          if (this._changesHead === null) {
              this._changesHead = this._changesTail = record;
          }
          else {
              this._changesTail._nextChanged = record;
              this._changesTail = record;
          }
      }
      /** @internal */
      _forEach(obj, fn) {
          if (obj instanceof Map) {
              obj.forEach(fn);
          }
          else {
              Object.keys(obj).forEach(k => fn(obj[k], k));
          }
      }
  }
  class KeyValueChangeRecord_ {
      constructor(key) {
          this.key = key;
          this.previousValue = null;
          this.currentValue = null;
          /** @internal */
          this._nextPrevious = null;
          /** @internal */
          this._next = null;
          /** @internal */
          this._prev = null;
          /** @internal */
          this._nextAdded = null;
          /** @internal */
          this._nextRemoved = null;
          /** @internal */
          this._nextChanged = null;
      }
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function defaultIterableDiffersFactory() {
      return new IterableDiffers([new DefaultIterableDifferFactory()]);
  }
  /**
   * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
   *
   * @publicApi
   */
  class IterableDiffers {
      constructor(factories) {
          this.factories = factories;
      }
      static create(factories, parent) {
          if (parent != null) {
              const copied = parent.factories.slice();
              factories = factories.concat(copied);
          }
          return new IterableDiffers(factories);
      }
      /**
       * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
       * inherited {@link IterableDiffers} instance with the provided factories and return a new
       * {@link IterableDiffers} instance.
       *
       * @usageNotes
       * ### Example
       *
       * The following example shows how to extend an existing list of factories,
       * which will only be applied to the injector for this component and its children.
       * This step is all that's required to make a new {@link IterableDiffer} available.
       *
       * ```
       * @Component({
       *   viewProviders: [
       *     IterableDiffers.extend([new ImmutableListDiffer()])
       *   ]
       * })
       * ```
       */
      static extend(factories) {
          return {
              provide: IterableDiffers,
              useFactory: (parent) => {
                  // if parent is null, it means that we are in the root injector and we have just overridden
                  // the default injection mechanism for IterableDiffers, in such a case just assume
                  // `defaultIterableDiffersFactory`.
                  return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
          };
      }
      find(iterable) {
          const factory = this.factories.find(f => f.supports(iterable));
          if (factory != null) {
              return factory;
          }
          else {
              const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
                  `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'` :
                  '';
              throw new RuntimeError(901 /* NO_SUPPORTING_DIFFER_FACTORY */, errorMessage);
          }
      }
  }
  /** @nocollapse */
  IterableDiffers.Éµprov = ÉµÉµdefineInjectable({ token: IterableDiffers, providedIn: 'root', factory: defaultIterableDiffersFactory });
  function getTypeNameForDebugging(type) {
      return type['name'] || typeof type;
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function defaultKeyValueDiffersFactory() {
      return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
  }
  /**
   * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
   *
   * @publicApi
   */
  class KeyValueDiffers {
      constructor(factories) {
          this.factories = factories;
      }
      static create(factories, parent) {
          if (parent) {
              const copied = parent.factories.slice();
              factories = factories.concat(copied);
          }
          return new KeyValueDiffers(factories);
      }
      /**
       * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
       * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
       * {@link KeyValueDiffers} instance.
       *
       * @usageNotes
       * ### Example
       *
       * The following example shows how to extend an existing list of factories,
       * which will only be applied to the injector for this component and its children.
       * This step is all that's required to make a new {@link KeyValueDiffer} available.
       *
       * ```
       * @Component({
       *   viewProviders: [
       *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
       *   ]
       * })
       * ```
       */
      static extend(factories) {
          return {
              provide: KeyValueDiffers,
              useFactory: (parent) => {
                  // if parent is null, it means that we are in the root injector and we have just overridden
                  // the default injection mechanism for KeyValueDiffers, in such a case just assume
                  // `defaultKeyValueDiffersFactory`.
                  return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
          };
      }
      find(kv) {
          const factory = this.factories.find(f => f.supports(kv));
          if (factory) {
              return factory;
          }
          const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?
              `Cannot find a differ supporting object '${kv}'` :
              '';
          throw new RuntimeError(901 /* NO_SUPPORTING_DIFFER_FACTORY */, errorMessage);
      }
  }
  /** @nocollapse */
  KeyValueDiffers.Éµprov = ÉµÉµdefineInjectable({ token: KeyValueDiffers, providedIn: 'root', factory: defaultKeyValueDiffersFactory });
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Structural diffing for `Object`s and `Map`s.
   */
  const keyValDiff = [new DefaultKeyValueDifferFactory()];
  /**
   * Structural diffing for `Iterable` types such as `Array`s.
   */
  const iterableDiff = [new DefaultIterableDifferFactory()];
  const defaultIterableDiffers = new IterableDiffers(iterableDiff);
  const defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * This platform has to be included in any other platform
   *
   * @publicApi
   */
  const platformCore = createPlatformFactory(null, 'core', []);
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Re-exported by `BrowserModule`, which is included automatically in the root
   * `AppModule` when you create a new app with the CLI `new` command. Eagerly injects
   * `ApplicationRef` to instantiate it.
   *
   * @publicApi
   */
  class ApplicationModule {
      // Inject ApplicationRef to make it eager...
      constructor(appRef) { }
  }
  ApplicationModule.Éµfac = function ApplicationModule_Factory(t) { return new (t || ApplicationModule)(ÉµÉµinject(ApplicationRef)); };
  ApplicationModule.Éµmod = /*@__PURE__*/ ÉµÉµdefineNgModule({ type: ApplicationModule });
  ApplicationModule.Éµinj = /*@__PURE__*/ ÉµÉµdefineInjector({});
  (function () { (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationModule, [{
          type: NgModule
      }], function () { return [{ type: ApplicationRef }]; }, null); })();
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // TODO(alxhub): allows tests to compile, can be removed when tests have been updated.
  const ÉµivyEnabled = true;
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * Compiles a partial directive declaration object into a full directive definition object.
   *
   * @codeGenApi
   */
  function ÉµÉµngDeclareDirective(decl) {
      const compiler = getCompilerFacade({ usage: 1 /* PartialDeclaration */, kind: 'directive', type: decl.type });
      return compiler.compileDirectiveDeclaration(angularCoreEnv, `ng:///${decl.type.name}/Éµfac.js`, decl);
  }
  /**
   * Evaluates the class metadata declaration.
   *
   * @codeGenApi
   */
  function ÉµÉµngDeclareClassMetadata(decl) {
      setClassMetadata(decl.type, decl.decorators, decl.ctorParameters ?? null, decl.propDecorators ?? null);
  }
  /**
   * Compiles a partial component declaration object into a full component definition object.
   *
   * @codeGenApi
   */
  function ÉµÉµngDeclareComponent(decl) {
      const compiler = getCompilerFacade({ usage: 1 /* PartialDeclaration */, kind: 'component', type: decl.type });
      return compiler.compileComponentDeclaration(angularCoreEnv, `ng:///${decl.type.name}/Éµcmp.js`, decl);
  }
  /**
   * Compiles a partial pipe declaration object into a full pipe definition object.
   *
   * @codeGenApi
   */
  function ÉµÉµngDeclareFactory(decl) {
      const compiler = getCompilerFacade({
          usage: 1 /* PartialDeclaration */,
          kind: getFactoryKind(decl.target),
          type: decl.type
      });
      return compiler.compileFactoryDeclaration(angularCoreEnv, `ng:///${decl.type.name}/Éµfac.js`, decl);
  }
  function getFactoryKind(target) {
      switch (target) {
          case FactoryTarget.Directive:
              return 'directive';
          case FactoryTarget.Component:
              return 'component';
          case FactoryTarget.Injectable:
              return 'injectable';
          case FactoryTarget.Pipe:
              return 'pipe';
          case FactoryTarget.NgModule:
              return 'NgModule';
      }
  }
  /**
   * Compiles a partial injectable declaration object into a full injectable definition object.
   *
   * @codeGenApi
   */
  function ÉµÉµngDeclareInjectable(decl) {
      const compiler = getCompilerFacade({ usage: 1 /* PartialDeclaration */, kind: 'injectable', type: decl.type });
      return compiler.compileInjectableDeclaration(angularCoreEnv, `ng:///${decl.type.name}/Éµprov.js`, decl);
  }
  /**
   * Compiles a partial injector declaration object into a full injector definition object.
   *
   * @codeGenApi
   */
  function ÉµÉµngDeclareInjector(decl) {
      const compiler = getCompilerFacade({ usage: 1 /* PartialDeclaration */, kind: 'NgModule', type: decl.type });
      return compiler.compileInjectorDeclaration(angularCoreEnv, `ng:///${decl.type.name}/Éµinj.js`, decl);
  }
  /**
   * Compiles a partial NgModule declaration object into a full NgModule definition object.
   *
   * @codeGenApi
   */
  function ÉµÉµngDeclareNgModule(decl) {
      const compiler = getCompilerFacade({ usage: 1 /* PartialDeclaration */, kind: 'NgModule', type: decl.type });
      return compiler.compileNgModuleDeclaration(angularCoreEnv, `ng:///${decl.type.name}/Éµmod.js`, decl);
  }
  /**
   * Compiles a partial pipe declaration object into a full pipe definition object.
   *
   * @codeGenApi
   */
  function ÉµÉµngDeclarePipe(decl) {
      const compiler = getCompilerFacade({ usage: 1 /* PartialDeclaration */, kind: 'pipe', type: decl.type });
      return compiler.compilePipeDeclaration(angularCoreEnv, `ng:///${decl.type.name}/Éµpipe.js`, decl);
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // clang-format on
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  if (typeof ngDevMode !== 'undefined' && ngDevMode) {
      // This helper is to give a reasonable error message to people upgrading to v9 that have not yet
      // installed `@angular/localize` in their app.
      // tslint:disable-next-line: no-toplevel-property-access
      _global.$localize = _global.$localize || function () {
          throw new Error('It looks like your application or one of its dependencies is using i18n.\n' +
              'Angular 9 introduced a global `$localize()` function that needs to be loaded.\n' +
              'Please run `ng add @angular/localize` from the Angular CLI.\n' +
              '(For non-CLI projects, add `import \'@angular/localize/init\';` to your `polyfills.ts` file.\n' +
              'For server-side rendering applications add the import to your `main.server.ts` file.)');
      };
  }
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  // This file only reexports content of the `src` folder. Keep it that way.
  
  /**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  
  /**
   * Generated bundle index. Do not edit.
   */
  
  
  //# sourceMappingURL=core.mjs.map
  
  ;// CONCATENATED MODULE: ./local/static/cross-domain/fesm2015/cross-domain.mjs
  
  
  
  class CrossDomainService {
    constructor() {
      this.eventsToListenFor = [];
      window.addEventListener('message', _ref => {
        let {
          data: {
            eventName,
            val
          }
        } = _ref;
        const allEvents = this.getAllEventsToListenFor();
        allEvents.forEach(evtObj => {
          if (evtObj.eventName === eventName) {
            evtObj.callback(val);
          }
        });
      });
    }
    /**
     * postToParent
     * @description post message to parent frame with eventName and value
     * @param eventName to post to parent
     * @param valToSend value to post together with event
     */
  
  
    postToParent(eventName) {
      let valToSend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      valToSend = this.executeFuncsInValToSend(valToSend);
      window.parent.postMessage({
        eventName,
        val: valToSend
      }, '*');
    }
    /**
     * postToTop
     * @description post message to the top most window with eventName and value
     * @param eventName to post to top
     * @param valToSend value to post together with event
     */
  
  
    postToTop(eventName) {
      let valToSend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      valToSend = this.executeFuncsInValToSend(valToSend);
      window.top.postMessage({
        eventName,
        val: valToSend
      }, '*');
    }
    /**
     * postToChild
     * @description post message to childFrame with eventName and value
     * @param childFrame target frame
     * @param eventName to post to child
     * @param valToSend value to post together with event
     */
  
  
    postToChild(childFrame, eventName) {
      let valToSend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      valToSend = this.executeFuncsInValToSend(valToSend);
      childFrame.contentWindow.postMessage({
        eventName,
        val: valToSend
      }, '*');
    }
    /**
     * listAllEvents
     * @description return all the events
     */
  
  
    listAllEvents() {
      return this.eventsToListenFor.map(evtObj => evtObj.eventName);
    }
    /**
     * findEvent
     * @description return the event based on eventName
     * @param eventName value to post together with event
     */
  
  
    findEvent(eventName) {
      return this.eventsToListenFor.find(evtObj => evtObj.eventName === eventName);
    }
    /**
     * offEvent
     * @description remove event to be listened for
     * @param removeEventFor value to post together with event
     */
  
  
    offEvent(removeEventFor) {
      this.eventsToListenFor = this.eventsToListenFor.filter(evtObj => evtObj.eventName !== removeEventFor);
    }
    /**
     * onEvent
     * @description add event to be listened for and function to fire upon that event
     * @param listenFor events to listen for
     * @param callbackFunc value to post together with event
     */
  
  
    onEvent(listenFor, callbackFunc) {
      const existingEvent = this.eventsToListenFor.find(evt => evt.eventName === listenFor);
  
      if (existingEvent) {
        existingEvent.callback = callbackFunc;
      } else {
        this.eventsToListenFor.push({
          eventName: listenFor,
          callback: callbackFunc
        });
      }
    }
  
    getAllEventsToListenFor() {
      return this.eventsToListenFor;
    }
    /**
     * @description valObject can contain functions. We're going to search for them and return their keys
     * @param valObject value to post together with event
     * @param keyId value to post together with event
     * @param toReturn value to post together with event
     */
  
  
    deepSearchForFunction(valObject, keyId, toReturn) {
      if (typeof valObject === 'object' && valObject !== null) {
        Object.keys(valObject).forEach(key => {
          const keyFinalValue = this.deepSearchForFunction(valObject[key], `${keyId}.${key}`, toReturn);
  
          if (typeof keyFinalValue === 'string') {
            toReturn.push(keyFinalValue);
          }
        });
        return toReturn;
      }
  
      if (typeof valObject === 'function') {
        return String(keyId).substring(1);
      }
    }
    /**
     * @description valueToSendToWindow may contain functions. These need to be executed first before we postMessage
     * since postMessage can't clone functions
     * @param valueToSendToWindow value to post together with event
     */
  
  
    executeFuncsInValToSend(valueToSendToWindow) {
      const keysWithFuncArray = this.deepSearchForFunction(valueToSendToWindow, '', []);
  
      if (keysWithFuncArray && typeof keysWithFuncArray !== 'string') {
        keysWithFuncArray.forEach(key => {
          const funcToExe = valueToSendToWindow[key];
          valueToSendToWindow[key] = funcToExe();
        });
      }
  
      return valueToSendToWindow;
    }
  
  }
  
  CrossDomainService.Éµfac = function CrossDomainService_Factory(t) {
    return new (t || CrossDomainService)();
  };
  
  CrossDomainService.Éµprov = /* @__PURE__ */ÉµÉµdefineInjectable({
    token: CrossDomainService,
    factory: CrossDomainService.Éµfac,
    providedIn: 'root'
  });
  
  (function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CrossDomainService, [{
      type: Injectable,
      args: [{
        providedIn: 'root'
      }]
    }], function () {
      return [];
    }, null);
  })();
  /*
   * Public API Surface of cross-domain
   */
  
  /**
   * Generated bundle index. Do not edit.
   */
  
  
  
  // EXTERNAL MODULE: ./node_modules/iframe-resizer/index.js
  var iframe_resizer = __webpack_require__(303);
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/helpers/display-mode-enum.js
  const DisplayMode = {
    EMBEDDEDPAGE: 'Embeddedpage',
    PAYMENTPAGE: 'Paymentpage'
  };
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/helpers/screen-skeleton.js
  class SkeletonScreen {
    constructor() {
      const skeletonDiv = document.createElement('div');
      skeletonDiv.classList.add('card-skeleton');
      return skeletonDiv;
    }
  
    static skeletonStyle() {
      return [`.card-skeleton {
          --skeleton-card-padding: 24px;
          --skeleton-card-height: 323px;
          --skeleton-card-skeleton: linear-gradient(#f6f6f6 var(--skeleton-card-height), transparent 0);
          --title-height: 24px;
          --title-1-width: 35%;
          --title-2-width: 45%;
          --title-3-width: 18%;
          --title-4-width: 90px;
          --gap-between-grps: 75px;
          --gap-start-titles: 90px;
          --gap-start-desc: 119px;
          --title-1-position: var(--skeleton-card-padding) var(--gap-start-titles);
          --title-2-position: var(--skeleton-card-padding) calc(var(--gap-start-titles) + var(--gap-between-grps));
          --title-3-position: var(--skeleton-card-padding) calc(var(--gap-start-titles) + var(--gap-between-grps)*2);
          --title-4-position: calc(50% + 70px) calc(var(--gap-start-titles) + var(--gap-between-grps)*2);
          --title-skeleton: linear-gradient(white var(--title-height), transparent 0);
          --desc-line-height: 31px;
          --desc-line-skeleton: linear-gradient(white var(--desc-line-height), transparent 0);
          --desc-line-1-width: calc(100% - 50px);
          --desc-line-2-width: calc(50% - 50px);
          --desc-line-1-position: var(--skeleton-card-padding) var(--gap-start-desc);
          --desc-line-2-position: var(--skeleton-card-padding) calc(var(--gap-start-desc) + var(--gap-between-grps));
          --desc-line-3-position: var(--skeleton-card-padding) calc(var(--gap-start-desc) + var(--gap-between-grps)*2);
          --desc-line-4-position: calc(100% - var(--skeleton-card-padding)) calc(var(--gap-start-desc) + var(--gap-between-grps)*2);
          --header-line-skeleton: linear-gradient(#f6f6f6 var(--desc-line-height), transparent 0);
          --header-line-width: 50%;
          --header-line-height: 18px;
          --header-line-position: var(--skeleton-card-padding) 20px;
          --header-height: 62px;
          --header-position: 0 0;
          --header-skeleton: linear-gradient(white var(--header-height), transparent 0);
          --blur-width: 200px;
          --blur-size: var(--blur-width) calc(var(--skeleton-card-height));
          border: none;
          width: 100%;
          height: 0px;
          position: relative;
        }`, `.card-skeleton:empty::after {
          content: "";
          display: block;
          width: 100%;
          height: var(--skeleton-card-height);
          position: absolute;
          border-radius: 0.25rem;
          border: 1px solid #f2f2f2;
          background-image: linear-gradient(90deg, rgba(246, 246, 246, 0) 0, rgba(246, 246, 246, 0.8) 50%, rgba(246, 246, 246, 0) 100%),
          var(--title-skeleton),
          var(--title-skeleton),
          var(--title-skeleton),
          var(--title-skeleton),
          var(--desc-line-skeleton),
          var(--desc-line-skeleton),
          var(--desc-line-skeleton),
          var(--desc-line-skeleton),
          var(--header-line-skeleton),
          var(--header-skeleton),
          var(--skeleton-card-skeleton);
          background-size: var(--blur-size),
          var(--title-1-width) var(--title-height),
          var(--title-2-width) var(--title-height),
          var(--title-3-width) var(--title-height),
          var(--title-4-width) var(--title-height),
          var(--desc-line-1-width) var(--desc-line-height),
          var(--desc-line-1-width) var(--desc-line-height),
          var(--desc-line-2-width) var(--desc-line-height),
          var(--desc-line-2-width) var(--desc-line-height),
          var(--header-line-width) var(--header-line-height),
          100% var(--header-height),
          100% 100%;
          background-position: -150% 0,
          var(--title-1-position),
          var(--title-2-position),
          var(--title-3-position),
          var(--title-4-position),
          var(--desc-line-1-position),
          var(--desc-line-2-position),
          var(--desc-line-3-position),
          var(--desc-line-4-position),
          var(--header-line-position),
          var(--header-position),
          0 0;
          background-repeat: no-repeat;
          -webkit-animation: loading 2.5s infinite;
          animation: loading 2.5s infinite;
        }`, `@keyframes spin {
          100% { 
            transform: rotate(360deg); 
          }
        }`, `@keyframes loading {
          to {
            background-position: 350% 0,
            var(--title-1-position),
            var(--title-2-position),
            var(--title-3-position),
            var(--title-4-position),
            var(--desc-line-1-position),
            var(--desc-line-2-position),
            var(--desc-line-3-position),
            var(--desc-line-4-position),
            var(--header-line-position),
            var(--header-position),
            0 0;
          }
        }`, `.acs-takeover {
          position: fixed !important;
          left: 0px !important;
          right: 0px !important;
          top: 0px !important;
          height: 100% !important;
        }`];
    }
  
  }
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/helpers/screen-spinner.js
  
  
  const skeletonStyle = SkeletonScreen.skeletonStyle();
  class Spinner {
    constructor(displayMode) {
      const LOADER_ID = 'hc-loader-container';
      const LOADER_STYLES_ID = 'hc-loader-styles';
      const loaderDiv = document.createElement('div');
      const loaderStyleSheet = document.createElement('style');
      const positionFixedOverlay = displayMode === DisplayMode.EMBEDDEDPAGE ? '' : 'position: fixed; top: 0; right: 0; bottom: 0; left: 0;';
      loaderStyleSheet.id = LOADER_STYLES_ID;
      document.head.appendChild(loaderStyleSheet);
  
      for (let s in skeletonStyle) {
        loaderStyleSheet.sheet.insertRule(skeletonStyle[s]);
      }
  
      loaderDiv.setAttribute('id', LOADER_ID);
      loaderDiv.style.cssText = `${positionFixedOverlay}
        background: rgba(0,0,0,0.15);
        height: 100%;
        width: 100%;
        z-index:99999!important;
        display: none;`;
      const spinnerDiv = document.createElement('div');
      spinnerDiv.innerHTML = "<div class='spinner'></div>";
      spinnerDiv.style.cssText = `${positionFixedOverlay}
        width: 70px;
        height: 70px;
        margin: auto;
        border-radius: 50%;
        animation: spin .6s infinite linear;
        border: 2px solid;
        border-color: #555 #555 transparent transparent;`;
      loaderDiv.appendChild(spinnerDiv);
      return loaderDiv;
    }
  
  }
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/helpers/landing-iframe.js
  
  class LandingIframe {
    constructor(iframeSrc, currentDisplayMode, COMMS_IFRAME_ID) {
      const positionFixedOverlay = currentDisplayMode === DisplayMode.EMBEDDEDPAGE ? '' : 'position: fixed; top: 0; right: 0; bottom: 0; left: 0;';
      const frame = document.createElement('iframe');
      frame.setAttribute('id', COMMS_IFRAME_ID);
      frame.style.cssText = `${positionFixedOverlay}
          z-index: 9999;
          display: block;
          background-color: transparent;
          border: 0px none transparent;
          overflow: hidden auto;
          visibility: visible;
          margin: 0px;
          padding: 0px;
          height: 323px;
          width: 100%;`;
      frame.src = iframeSrc;
      return frame;
    }
  
  }
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/helpers/extract-host-name.js
  /**
   * Returns hostName based from a URL and IE friendly
   * @param url
   * @return {string}
   */
  function extractHostname(url) {
    let hostname;
  
    if (url.indexOf('//') > -1) {
      hostname = url.split('/')[2];
    } else {
      hostname = url.split('/')[0];
    }
  
    hostname = hostname.split(':')[0];
    hostname = hostname.split('?')[0];
    return hostname;
  }
  ;
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/helpers/get-script-location.js
  /**
   * IE does not support document.currentScript, use document.querySelector instead to look for the script tag
   * @return {string}
   */
  function getScriptLocation() {
    const script = document.currentScript || document.querySelector(`script[src*="${scriptFileName}"]`) || document.querySelector(`script[src*="${minScriptFileName}"]`);
    return script.src;
  }
  ;
  // EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js
  var jquery = __webpack_require__(755);
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/helpers/flatten.js
  /**
   * Returns flattened data object
   * @param data
   * @param root
   * @param flat
   * @return {string}
   */
  function flatten_flatten(data) {
    let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let flat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    const result = flat || {};
  
    for (const key in data) {
      if (data.hasOwnProperty(key)) {
        const resultKey = root ? root + '.' + key : key;
        const value = data[key];
  
        if (typeof value === 'object') {
          if (value instanceof Array) {
            if (value.length === 0) {
              result[resultKey] = '';
            }
  
            for (let i = 0, len = value.length; i < len; i++) {
              if (typeof value[i] === 'object') {
                flatten_flatten(value[i], resultKey + '[' + i + ']', result);
              } else {
                result[resultKey + "[" + i + "]"] = value[i];
              }
            }
          } else {
            flatten_flatten(value, resultKey, result);
          }
        } else {
          result[resultKey] = value;
        }
      }
    }
  
    return result;
  }
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/helpers/window-state.js
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  class WindowState {
    constructor() {
      _defineProperty(this, "SESSION_ID_PARAM", 'HostedCheckout_sessionId');
  
      _defineProperty(this, "EMBED_CONTAINER_PARAM", 'HostedCheckout_embedContainer');
  
      _defineProperty(this, "MERCHANT_STATE_PARAM", 'HostedCheckout_merchantState');
  
      _defineProperty(this, "SHOW_LIGHTBOX_FUNC", 'HostedCheckout_showLightboxFunc');
  
      _defineProperty(this, "setSessionId", sessionId => {
        sessionStorage.setItem(this.SESSION_ID_PARAM, sessionId);
      });
  
      _defineProperty(this, "getSessionId", () => {
        return sessionStorage.getItem(this.SESSION_ID_PARAM);
      });
  
      _defineProperty(this, "setMerchantState", merchantState => {
        sessionStorage.setItem(this.MERCHANT_STATE_PARAM, JSON.stringify(merchantState));
      });
  
      _defineProperty(this, "getMerchantState", () => {
        return sessionStorage.getItem(this.MERCHANT_STATE_PARAM);
      });
  
      _defineProperty(this, "setEmbedContainer", container => {
        sessionStorage.setItem(this.EMBED_CONTAINER_PARAM, container);
      });
  
      _defineProperty(this, "getEmbedContainer", () => {
        return sessionStorage.getItem(this.EMBED_CONTAINER_PARAM);
      });
  
      _defineProperty(this, "setShowLightboxFunc", showLightboxFunc => {
        sessionStorage.setItem(this.SHOW_LIGHTBOX_FUNC, showLightboxFunc);
      });
  
      _defineProperty(this, "getShowLightboxFunc", () => {
        return sessionStorage.getItem(this.SHOW_LIGHTBOX_FUNC);
      });
  
      _defineProperty(this, "hasShowLightboxFunc", () => {
        return !!sessionStorage.getItem(this.SHOW_LIGHTBOX_FUNC);
      });
  
      _defineProperty(this, "hasSavedData", () => {
        return this.hasSessionData();
      });
  
      _defineProperty(this, "hasSavedMerchantData", () => {
        return this.notNullOrUndefined(this.MERCHANT_STATE_PARAM);
      });
  
      _defineProperty(this, "removeSavedData", () => {
        sessionStorage.removeItem(this.MERCHANT_STATE_PARAM);
        sessionStorage.removeItem(this.EMBED_CONTAINER_PARAM);
        sessionStorage.removeItem(this.SESSION_ID_PARAM);
        sessionStorage.removeItem(this.SHOW_LIGHTBOX_FUNC);
      });
  
      _defineProperty(this, "hasSessionData", () => {
        return this.notNullOrUndefined(this.SESSION_ID_PARAM) && this.notNullOrUndefined(this.EMBED_CONTAINER_PARAM) && this.notNullOrUndefined(this.MERCHANT_STATE_PARAM);
      });
  
      _defineProperty(this, "notNullOrUndefined", param => {
        return sessionStorage.getItem(param) && sessionStorage.getItem(param) !== undefined && typeof sessionStorage.getItem(param) !== 'undefined';
      });
  
      _defineProperty(this, "nullOrUndefined", param => {
        return !this.notNullOrUndefined(param);
      });
    }
  
    onlyEmbedContainerParamExist() {
      // only remove if EMBED_CONTAINER_PARAM does not exist in session storage
      return this.notNullOrUndefined(this.EMBED_CONTAINER_PARAM) && this.nullOrUndefined(this.SESSION_ID_PARAM) && this.nullOrUndefined(this.MERCHANT_STATE_PARAM);
    }
  
  }
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/helpers/callbacks.js
  function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
  
  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
  
  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
  
  function callbacks_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
  
  function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
  
  function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
  
  function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
  
  
  
  
  
  var _checkForURLHash = /*#__PURE__*/new WeakSet();
  
  var _initCallback = /*#__PURE__*/new WeakMap();
  
  var _determineFunctionRef = /*#__PURE__*/new WeakMap();
  
  var _determineScriptAttributeValue = /*#__PURE__*/new WeakMap();
  
  var _doCallback = /*#__PURE__*/new WeakMap();
  
  var _buildUrl = /*#__PURE__*/new WeakMap();
  
  var _forEach = /*#__PURE__*/new WeakMap();
  
  var _removeHash = /*#__PURE__*/new WeakMap();
  
  var _printMessage = /*#__PURE__*/new WeakMap();
  
  class Callbacks {
    constructor(_scriptTag) {
      _classPrivateMethodInitSpec(this, _checkForURLHash);
  
      callbacks_defineProperty(this, "callbackFlagRegex", /__hc-action-(complete|cancel|timeout)(?:-([^-]+)(?:-([^-]+))?(?:-([^-]+))?(?:-([^-]+))?)?/);
  
      callbacks_defineProperty(this, "callbackTypes", ['complete', 'error', 'cancel', 'afterRedirect', 'beforeRedirect', 'timeout']);
  
      callbacks_defineProperty(this, "callbackList", []);
  
      callbacks_defineProperty(this, "windowState", new WindowState());
  
      callbacks_defineProperty(this, "getCallbacks", () => {
        return this.callbackList;
      });
  
      callbacks_defineProperty(this, "completeHandler", params => {
        if (params.issuerInstallmentOffer && params.receiptText) {
          _classPrivateFieldGet(this, _doCallback).call(this, this.callbackList.complete, [params.resultIndicator, params.sessionVersion, params.issuerInstallmentOffer, params.receiptText], ['resultIndicator', 'sessionVersion', 'issuerInstallmentOffer', 'receiptText']);
        } else if (params.issuerInstallmentOffer) {
          _classPrivateFieldGet(this, _doCallback).call(this, this.callbackList.complete, [params.resultIndicator, params.sessionVersion, params.issuerInstallmentOffer], ['resultIndicator', 'sessionVersion', 'issuerInstallmentOffer']);
        } else {
          _classPrivateFieldGet(this, _doCallback).call(this, this.callbackList.complete, [params.resultIndicator, params.sessionVersion], ['resultIndicator', 'sessionVersion']);
        }
      });
  
      callbacks_defineProperty(this, "errorHandler", params => {
        if (this.callbackList.hasOwnProperty('error')) {
          _classPrivateFieldGet(this, _doCallback).call(this, this.callbackList.error, [params]);
        } else {
          _classPrivateFieldGet(this, _printMessage).call(this, 'Failed to find error callback');
  
          _classPrivateFieldGet(this, _printMessage).call(this, JSON.stringify(params, null, 4));
        }
      });
  
      callbacks_defineProperty(this, "cancelHandler", () => {
        _classPrivateFieldGet(this, _doCallback).call(this, this.callbackList.cancel);
      });
  
      callbacks_defineProperty(this, "timeoutHandler", data => {
        if (data && data.timeoutUrl && data.timeoutUrl !== this.constructor.defaultTimeoutUrl) {
          this.redirect(data.timeoutUrl);
        } else if (['function', 'string'].includes(typeof this.callbackList.timeout)) {
          _classPrivateFieldGet(this, _doCallback).call(this, this.callbackList.timeout);
        }
      });
  
      callbacks_defineProperty(this, "beforeRedirectHandler", params => {
        this.windowState.setSessionId(params.sessionId);
  
        if (typeof this.callbackList['beforeRedirect'] === 'function') {
          this.windowState.setMerchantState(this.callbackList['beforeRedirect']());
        } else {
          this.windowState.setMerchantState(null);
        }
      });
  
      callbacks_defineProperty(this, "afterRedirectHandler", () => {
        let savedData = this.windowState.getMerchantState();
  
        if (savedData) {
          if (this.callbackList.hasOwnProperty('afterRedirect')) {
            this.callbackList.afterRedirect(JSON.parse(savedData));
          }
  
          this.windowState.removeSavedData();
        }
      });
  
      callbacks_defineProperty(this, "redirect", (url, params, paramNames) => {
        if (params) {
          url = _classPrivateFieldGet(this, _buildUrl).call(this, url, params, paramNames);
        }
  
        window.location.href = url;
      });
  
      _classPrivateFieldInitSpec(this, _initCallback, {
        writable: true,
        value: scriptTag => {
          for (let callBackType of this.callbackTypes) {
            let scriptRef = 'data-' + callBackType;
  
            let scriptAttribute = _classPrivateFieldGet(this, _determineScriptAttributeValue).call(this, scriptTag, scriptRef);
  
            if (scriptAttribute && scriptAttribute !== '') {
              let callback = _classPrivateFieldGet(this, _determineFunctionRef).call(this, scriptAttribute, window);
  
              if (callback) {
                if (typeof callback === 'function' || typeof callback === 'string') {
                  this.callbackList[callBackType] = callback;
                } else {
                  throw 'Callback defined as \'' + scriptAttribute + '\' in \'' + scriptRef + '\' is not a function or string';
                }
              } else {
                this.callbackList[callBackType] = scriptAttribute;
              }
            }
          }
        }
      });
  
      _classPrivateFieldInitSpec(this, _determineFunctionRef, {
        writable: true,
        value: (ref, scope) => {
          const split = ref.split('.', 2);
  
          if (split.length === 1) {
            return scope[split[0]];
          } else {
            if (scope[split[0]]) {
              return _classPrivateFieldGet(this, _determineFunctionRef).call(this, split[1], scope[split[0]]);
            }
          }
  
          return undefined;
        }
      });
  
      _classPrivateFieldInitSpec(this, _determineScriptAttributeValue, {
        writable: true,
        value: (scriptTag, scriptRef) => {
          if (scriptTag[scriptRef]) {
            return scriptTag[scriptRef];
          }
  
          const attribute = scriptTag.attributes[scriptRef];
  
          if (attribute) {
            return attribute.value;
          }
        }
      });
  
      _classPrivateFieldInitSpec(this, _doCallback, {
        writable: true,
        value: (callback, params, paramNames) => {
          // If string, assume URL and redirect
          if (typeof callback === 'string') {
            this.redirect(callback, params, paramNames);
          } else {
            // Otherwise if the callback is a function, invoke it
            params = params ? params : [];
  
            if (typeof callback === 'function') {
              if (Array.isArray(params) && params.length > 1) {
                params = [params.join()];
              }
  
              callback.apply(null, params);
            }
          }
        }
      });
  
      _classPrivateFieldInitSpec(this, _buildUrl, {
        writable: true,
        value: (url, params, paramNames) => {
          let newUrl = new URL(url);
  
          let parameterAppender = function (key, value) {
            newUrl.search = newUrl.search + (newUrl.search !== '' ? '&' : '') + key + '=' + value;
          };
  
          for (let i = 0; i < params.length; i++) {
            let current = {};
  
            if (paramNames) {
              current[paramNames[i]] = params[i];
            } else {
              current = params[i];
            }
  
            current = flatten_flatten(current);
  
            _classPrivateFieldGet(this, _forEach).call(this, current, parameterAppender);
          }
  
          return newUrl;
        }
      });
  
      _classPrivateFieldInitSpec(this, _forEach, {
        writable: true,
        value: (elements, func) => {
          for (const key in elements) {
            if (elements.hasOwnProperty(key)) {
              func(key, elements[key]);
            }
          }
        }
      });
  
      _classPrivateFieldInitSpec(this, _removeHash, {
        writable: true,
        value: () => {
          history.pushState("", document.title, window.location.pathname + window.location.search);
        }
      });
  
      _classPrivateFieldInitSpec(this, _printMessage, {
        writable: true,
        value: (message, level) => {
          if (window.console) {
            if (level && console[level]) {
              console[level](message);
              return;
            }
  
            console.log(message);
          }
        }
      });
  
      callbacks_defineProperty(this, "shouldResumeSession", () => {
        return this.windowState.hasSavedData();
      });
  
      callbacks_defineProperty(this, "shouldNotRemoveSavedData", () => {
        return this.windowState.onlyEmbedContainerParamExist();
      });
  
      _classPrivateFieldGet(this, _initCallback).call(this, _scriptTag); // For payment page, the flag that we need in order to invoke the callback will be specified in the return URL, so we need to check for it
  
  
      _classPrivateMethodGet(this, _checkForURLHash, _checkForURLHash2).call(this);
    }
  
  }
  
  function _checkForURLHash2() {
    let foundCallbackHash = document.location.hash.match(this.callbackFlagRegex);
  
    if (foundCallbackHash) {
      let result = {};
      result.callbackType = foundCallbackHash[1];
  
      if (foundCallbackHash[2]) {
        result.resultIndicator = foundCallbackHash[2];
      }
  
      if (foundCallbackHash[3]) {
        result.sessionVersion = foundCallbackHash[3];
      }
  
      if (foundCallbackHash[4]) {
        result.issuerInstallmentOffer = decodeURIComponent(foundCallbackHash[4]);
      }
  
      if (foundCallbackHash[5]) {
        result.receiptText = decodeURIComponent(foundCallbackHash[5]);
      } // Remove the callback hash (e.g. #__hc-action-cancel) from the URL
  
  
      _classPrivateFieldGet(this, _removeHash).call(this);
  
      switch (result.callbackType) {
        case 'complete':
          this.completeHandler(result);
          break;
  
        case 'cancel':
          this.cancelHandler();
          break;
  
        case 'timeout':
          this.timeoutHandler();
          break;
      } // Check if there has been any data saved in sessionStorage (this would have been done in a beforeRedirect callback)
  
  
      if (result.callbackType && this.windowState.hasSavedMerchantData()) {
        this.afterRedirectHandler();
      }
    }
  }
  
  callbacks_defineProperty(Callbacks, "defaultCancelUrl", 'urn:hostedCheckout:defaultCancelUrl');
  
  callbacks_defineProperty(Callbacks, "defaultTimeoutUrl", 'urn:hostedCheckout:defaultTimeoutUrl');
  ;// CONCATENATED MODULE: ./node_modules/promise-polyfill/src/finally.js
  /**
   * @this {Promise}
   */
  function finallyConstructor(callback) {
    var constructor = this.constructor;
    return this.then(
      function(value) {
        // @ts-ignore
        return constructor.resolve(callback()).then(function() {
          return value;
        });
      },
      function(reason) {
        // @ts-ignore
        return constructor.resolve(callback()).then(function() {
          // @ts-ignore
          return constructor.reject(reason);
        });
      }
    );
  }
  
  /* harmony default export */ const src_finally = (finallyConstructor);
  
  ;// CONCATENATED MODULE: ./node_modules/promise-polyfill/src/allSettled.js
  function allSettled(arr) {
    var P = this;
    return new P(function(resolve, reject) {
      if (!(arr && typeof arr.length !== 'undefined')) {
        return reject(
          new TypeError(
            typeof arr +
              ' ' +
              arr +
              ' is not iterable(cannot read property Symbol(Symbol.iterator))'
          )
        );
      }
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return resolve([]);
      var remaining = args.length;
  
      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then;
          if (typeof then === 'function') {
            then.call(
              val,
              function(val) {
                res(i, val);
              },
              function(e) {
                args[i] = { status: 'rejected', reason: e };
                if (--remaining === 0) {
                  resolve(args);
                }
              }
            );
            return;
          }
        }
        args[i] = { status: 'fulfilled', value: val };
        if (--remaining === 0) {
          resolve(args);
        }
      }
  
      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  }
  
  /* harmony default export */ const src_allSettled = (allSettled);
  
  ;// CONCATENATED MODULE: ./node_modules/promise-polyfill/src/index.js
  
  
  
  // Store setTimeout reference so promise-polyfill will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var setTimeoutFunc = setTimeout;
  
  function isArray(x) {
    return Boolean(x && typeof x.length !== 'undefined');
  }
  
  function src_noop() {}
  
  // Polyfill for Function.prototype.bind
  function src_bind(fn, thisArg) {
    return function() {
      fn.apply(thisArg, arguments);
    };
  }
  
  /**
   * @constructor
   * @param {Function} fn
   */
  function src_Promise(fn) {
    if (!(this instanceof src_Promise))
      throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    /** @type {!number} */
    this._state = 0;
    /** @type {!boolean} */
    this._handled = false;
    /** @type {Promise|undefined} */
    this._value = undefined;
    /** @type {!Array<!Function>} */
    this._deferreds = [];
  
    doResolve(fn, this);
  }
  
  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    src_Promise._immediateFn(function() {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }
  
  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self)
        throw new TypeError('A promise cannot be resolved with itself.');
      if (
        newValue &&
        (typeof newValue === 'object' || typeof newValue === 'function')
      ) {
        var then = newValue.then;
        if (newValue instanceof src_Promise) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(src_bind(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }
  
  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }
  
  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      src_Promise._immediateFn(function() {
        if (!self._handled) {
          src_Promise._unhandledRejectionFn(self._value);
        }
      });
    }
  
    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }
  
  /**
   * @constructor
   */
  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }
  
  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(
        function(value) {
          if (done) return;
          done = true;
          resolve(self, value);
        },
        function(reason) {
          if (done) return;
          done = true;
          reject(self, reason);
        }
      );
    } catch (ex) {
      if (done) return;
      done = true;
      reject(self, ex);
    }
  }
  
  src_Promise.prototype['catch'] = function(onRejected) {
    return this.then(null, onRejected);
  };
  
  src_Promise.prototype.then = function(onFulfilled, onRejected) {
    // @ts-ignore
    var prom = new this.constructor(src_noop);
  
    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };
  
  src_Promise.prototype['finally'] = src_finally;
  
  src_Promise.all = function(arr) {
    return new src_Promise(function(resolve, reject) {
      if (!isArray(arr)) {
        return reject(new TypeError('Promise.all accepts an array'));
      }
  
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return resolve([]);
      var remaining = args.length;
  
      function res(i, val) {
        try {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(
                val,
                function(val) {
                  res(i, val);
                },
                reject
              );
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }
  
      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };
  
  src_Promise.allSettled = src_allSettled;
  
  src_Promise.resolve = function(value) {
    if (value && typeof value === 'object' && value.constructor === src_Promise) {
      return value;
    }
  
    return new src_Promise(function(resolve) {
      resolve(value);
    });
  };
  
  src_Promise.reject = function(value) {
    return new src_Promise(function(resolve, reject) {
      reject(value);
    });
  };
  
  src_Promise.race = function(arr) {
    return new src_Promise(function(resolve, reject) {
      if (!isArray(arr)) {
        return reject(new TypeError('Promise.race accepts an array'));
      }
  
      for (var i = 0, len = arr.length; i < len; i++) {
        src_Promise.resolve(arr[i]).then(resolve, reject);
      }
    });
  };
  
  // Use polyfill for setImmediate for performance gains
  src_Promise._immediateFn =
    // @ts-ignore
    (typeof setImmediate === 'function' &&
      function(fn) {
        // @ts-ignore
        setImmediate(fn);
      }) ||
    function(fn) {
      setTimeoutFunc(fn, 0);
    };
  
  src_Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
    }
  };
  
  /* harmony default export */ const src = (src_Promise);
  
  ;// CONCATENATED MODULE: ./projects/checkout-api/src/app/checkout-api.js
  
  
  
  
  
  
  
  
  
  
  
  const checkout_api_scriptFileName = 'checkout.js';
  const checkout_api_minScriptFileName = 'checkout.min.js';
  const checkout_api_context = '/checkout/';
  
  window.Checkout = () => {
    const scriptLocation = getScriptLocation();
    const fileName = scriptLocation.indexOf(checkout_api_scriptFileName) > -1 ? checkout_api_scriptFileName : checkout_api_minScriptFileName;
    const checkoutVersion = scriptLocation.substring(scriptLocation.lastIndexOf(checkout_api_context) + checkout_api_context.length, scriptLocation.lastIndexOf(`/${fileName}`));
    const xDom = new CrossDomainService();
    let SESSION_ID;
    const COMMS_IFRAME_ID = 'hc-comms-layer-iframe';
    let COMMS_IFRAME;
    let COMMS_WRAPPER;
    let LOADER_DIV;
    let SKELETON_DIV = new SkeletonScreen();
    let HOSTED_SESSION_BASE_URL;
    let skeletonContainer;
    const host = extractHostname(scriptLocation);
    const hostedSessionBaseUrl = `${host}/form`;
    let isConfigured = false;
    let configureInProgress = false;
    let currentDisplayMode;
    let callbacks;
    let windowState = new WindowState();
  
    const whenDocumentReady = () => {
      return new src(resolve => {
        if (window && window.document && document && document.body) {
          COMMS_WRAPPER = document.body;
          resolve();
        } else {
          document.addEventListener('DOMContentLoaded', () => {
            COMMS_WRAPPER = document.body;
            resolve();
          });
        }
      });
    };
  
    const whenConfigureComplete = () => {
      return new src((resolve, reject) => {
        let checkInterval;
  
        const checkIsConfigured = () => {
          if (isConfigured) {
            resolve();
            clearInterval(checkInterval);
          }
        };
  
        if (isConfigured) {
          resolve();
        } else if (configureInProgress) {
          checkInterval = setInterval(checkIsConfigured, 100);
        } else {
          reject(new Error('Not configured'));
        }
      });
    };
  
    const isConfigValidated = cfg => {
      const paymentPage = cfg.interaction;
  
      if (paymentPage.hasOwnProperty('cancelUrl')) {
        throw invalidRequest('Unexpected parameter .cancelUrl');
      }
  
      if (paymentPage.hasOwnProperty('timeoutUrl')) {
        throw invalidRequest('Unexpected parameter .timeoutUrl');
      }
  
      cfg.interaction = cfg.interaction || {};
      let callbackList = callbacks.getCallbacks();
  
      if (typeof callbackList.cancel === 'string') {
        cfg.interaction.cancelUrl = callbackList.cancel;
      } else {
        cfg.interaction.cancelUrl = Callbacks.defaultCancelUrl;
      }
  
      if (typeof callbackList.timeout === 'string') {
        cfg.interaction.timeoutUrl = callbackList.timeout;
      } else {
        cfg.interaction.timeoutUrl = Callbacks.defaultTimeoutUrl;
      }
  
      if (cfg.merchant) {
        console.warn('merchantId is not allowed via configure(), deleting...');
        delete cfg.merchant;
      }
  
      if (cfg.order) {
        if (cfg.order.amount) {
          throw invalidRequest('order.amount is not allowed via configure()');
        }
  
        if (cfg.order.currency) {
          throw invalidRequest('order.currency is not allowed via configure()');
        }
  
        if (cfg.order.netAmount && cfg.order.amount) {
          throw invalidRequest('Either order.amount or order.netAmount must be defined');
        }
  
        if (cfg.order.netAmount && cfg.interaction && cfg.interaction.operation === 'NONE') {
          throw invalidRequest("order.netAmount must not be defined when interaction.operation is defined with a value of 'NONE'.");
        }
  
        if (cfg.order.surchargeAmount) {
          throw invalidRequest('The value order.surchargeAmount must not be defined, it will be calculated by the gateway');
        }
      }
  
      if (!hasSessionId(cfg) && hasSubMerchantDetails(cfg)) {
        throw invalidRequest('Session id required when configuring hosted checkout with sub-merchant details.');
      }
  
      return true;
    };
  
    const invalidRequest = explanation => ({
      error: {
        result: 'ERROR',
        cause: 'INVALID_REQUEST',
        explanation: explanation
      }
    });
  
    const hasSubMerchantDetails = cfg => {
      if (cfg.version >= 32) {
        if (cfg.hasOwnProperty('order')) {
          return cfg.order.hasOwnProperty('subMerchant');
        }
  
        return false;
      }
  
      return false;
    };
  
    const hasSessionId = cfg => {
      if (cfg.version > 18) {
        const session = cfg.session || {};
        return session.hasOwnProperty('id');
      }
  
      return cfg.hasOwnProperty('session');
    };
  
    const printMessage = (message, level) => {
      if (window.console) {
        if (level && console[level]) {
          console[level](message);
        }
      }
    };
  
    const newCommunicationLayerIframe = () => new LandingIframe(`https://${host}/static/checkout/landing/index.html`, currentDisplayMode, COMMS_IFRAME_ID);
  
    const getTargetScript = () => {
      const scripts = document.getElementsByTagName('script');
  
      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i].src;
  
        if (script && script === scriptLocation) {
          return scripts[i];
        }
      }
  
      return null;
    };
  
    const createLoader = () => {
      return new src(resolve => {
        whenDocumentReady().then(() => {
          if (LOADER_DIV !== undefined && LOADER_DIV !== null) {
            resolve();
          }
  
          LOADER_DIV = new Spinner(currentDisplayMode);
          document.body.appendChild(LOADER_DIV);
          isConfigured = true;
          configureInProgress = false;
          resolve();
        });
      });
    };
  
    const showLoader = () => {
      if (currentDisplayMode === DisplayMode.PAYMENTPAGE) {
        LOADER_DIV.style.display = 'inline-block';
      } else {
        COMMS_WRAPPER.appendChild(SKELETON_DIV);
      }
    };
  
    const hideLoader = () => {
      if (currentDisplayMode === DisplayMode.PAYMENTPAGE) {
        LOADER_DIV.style.display = 'none';
      } else if (SKELETON_DIV.parentNode) {
        SKELETON_DIV.parentNode.removeChild(SKELETON_DIV);
      }
    };
  
    const doShowCommsLayer = () => {
      showLoader();
  
      if (!document.getElementById(COMMS_IFRAME_ID)) {
        COMMS_IFRAME = newCommunicationLayerIframe();
  
        COMMS_IFRAME.onload = function () {
          if (callbacks.shouldResumeSession()) {
            xDom.postToChild(COMMS_IFRAME, 'resume', {
              sessionId: windowState.getSessionId()
            });
          }
        };
  
        COMMS_WRAPPER.appendChild(COMMS_IFRAME);
      }
    };
  
    const validateEmbedContainer = cont => !!document.querySelector(cont);
  
    const doShowEmbeddedPage = () => {
      currentDisplayMode = DisplayMode.EMBEDDEDPAGE;
      COMMS_WRAPPER = document.querySelector(skeletonContainer);
      COMMS_WRAPPER.style.maxHeight = '323px';
      COMMS_WRAPPER.style.overflow = 'hidden';
      COMMS_WRAPPER.style.transition = 'max-height 0.5s ease-out';
      doShowCommsLayer();
    };
  
    const doShowPaymentPage = () => {
      currentDisplayMode = DisplayMode.PAYMENTPAGE;
      doShowCommsLayer();
    };
  
    const acsIframeTakeOver = () => {
      COMMS_IFRAME.classList.add('acs-takeover');
    };
  
    const acsIframeHide = () => {
      COMMS_IFRAME.classList.remove('acs-takeover');
    };
  
    const refreshCommsIframe = () => {
      COMMS_IFRAME = document.getElementById(COMMS_IFRAME_ID);
    };
  
    window.onload = () => {
      callbacks = new Callbacks(getTargetScript());
  
      if (callbacks.shouldResumeSession()) {
        setTimeout(opt => {
          if (windowState.hasShowLightboxFunc()) {
            // reinject the provided modal/lightbox script into the page
            const script = document.createElement('script'); // give it a random ID to try and prevent namespace collision
  
            const targetID = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
            Object.assign(script, {
              id: targetID,
              type: 'text/javascript'
            }); // get script to load modal from windowData, then remove the script once we're done
  
            script.innerHTML = `
              (${windowState.getShowLightboxFunc()})();
              const target = document.querySelector('#${targetID}');
              document.body.removeChild(target);
            `;
            document.body.appendChild(script);
          }
        }, 1, {
          id: windowState.getSessionId(),
          func: windowState.getShowLightboxFunc()
        });
      }
    };
  
    function xDomEvents(config) {
      /**
       * @event open:embedded
       * @desc in embedded mode, angular app will notify checkout-api when embedded-mode is opened
       */
      xDom.onEvent('open:embedded', () => {
        hideLoader();
        acsIframeHide();
        (0,iframe_resizer.iframeResizer)({
          heightCalculationMethod: 'taggedElement',
          widthCalculationMethod: 'taggedElement',
  
          onResized(_ref) {
            let {
              iframe,
              height,
              width
            } = _ref;
            COMMS_WRAPPER.style.maxHeight = height + 'px';
          }
  
        }, '#hc-comms-layer-iframe');
      });
      /**
       * @event embedded:resize
       * @desc when returning from ACS, the iframe becomes nested and iframeResizer() is no longer able to track the
       * nested iframe content. So we have to manually set the size
       */
  
      xDom.onEvent('app:resize', size => {
        COMMS_IFRAME.style.minHeight = size + 'px';
        COMMS_WRAPPER.style.maxHeight = size + 'px';
      });
      /**
       * @event activate
       * @desc  Is triggered from landing.js inside the communications iframe, telling the parent it is ready
       */
  
      xDom.onEvent('activate', () => {
        refreshCommsIframe();
        config.checkoutVersion = checkoutVersion;
        config.parentUrl = window.location.href;
        config.callbacks = {
          complete: callbacks.callbackList.hasOwnProperty('complete'),
          error: callbacks.callbackList.hasOwnProperty('error'),
          cancel: callbacks.callbackList.hasOwnProperty('cancel'),
          timeout: callbacks.callbackList.hasOwnProperty('timeout')
        };
  
        if (!callbacks.shouldResumeSession()) {
          if (currentDisplayMode === DisplayMode.EMBEDDEDPAGE) {
            xDom.postToChild(COMMS_IFRAME, 'configure', config);
          } else {
            xDom.postToChild(COMMS_IFRAME, 'configurePage', config);
          }
        }
      });
      xDom.onEvent('OpenBanking: LaunchUI', params => {
        if (!window.OpenBanking) {
          let openBanking_script = document.createElement('script');
          openBanking_script.setAttribute('src', params.url);
          document.head.appendChild(openBanking_script);
  
          openBanking_script.onload = () => {
            OpenBanking.configure(params.config, callback => {
              if (callback.status !== 'SUCCESS') {
                xDom.postToChild(COMMS_IFRAME, 'OpenBanking: configureError');
              } else {
                launchOpenBanking(params);
              }
            });
          };
        } else {
          launchOpenBanking(params);
        }
      });
  
      function launchOpenBanking(params) {
        OpenBanking.launchOpenBankingUI(params.launchRequest, callback => {
          if (callback) {
            params.errorData.status = callback.status;
            xDom.postToChild(COMMS_IFRAME, 'OpenBanking: retry', params.errorData);
          }
        });
      }
      /**
       * @event error
       * @desc  Is triggered from inside the iframe if any errors occur
       */
  
  
      xDom.onEvent('error', errorResponse => {
        refreshCommsIframe();
        callbacks.errorHandler(errorResponse);
        COMMS_IFRAME.parentNode.removeChild(COMMS_IFRAME);
        hideLoader();
      });
      /**
       * @event complete
       * @desc  If a callback has been specified in the `data-complete` attribute, it will be triggered on successful payment
       */
  
      xDom.onEvent('complete', response => {
        callbacks.completeHandler(response);
      });
      /**
       * @event timeout
       * @desc  If a callback has been specified in the `data-timeout` attribute, it will be triggered when the timer expires
       */
  
      xDom.onEvent('timeout', response => {
        refreshCommsIframe();
        callbacks.timeoutHandler(response);
        COMMS_IFRAME.parentNode.removeChild(COMMS_IFRAME);
      });
      /**
       * @event configuredCallbacks
       * @desc  The child frame is asking the parent if any callbacks were configured (e.g. `data-complete` or `data-cancel`)
       */
  
      xDom.onEvent('top:configuredCallbacks', () => {
        refreshCommsIframe();
        xDom.postToChild(COMMS_IFRAME, 'app:configuredCallbacks', {
          complete: callbacks.callbackList.hasOwnProperty('complete'),
          error: callbacks.callbackList.hasOwnProperty('error'),
          cancel: callbacks.callbackList.hasOwnProperty('cancel'),
          timeout: callbacks.callbackList.hasOwnProperty('timeout')
        });
        xDom.postToChild(COMMS_IFRAME, 'app:returnUrl', {
          returnUrl: window.location.href
        });
      });
      /**
       * @event redirect
       * @desc After configure data is saved to the server, in the case of payment page the parent window is told to redirect to the provided URL
       */
  
      xDom.onEvent('redirect', data => {
        callbacks.beforeRedirectHandler({
          sessionId: SESSION_ID
        });
        window.location.href = data.url;
      });
      /**
       * @event redirectToExternal
       * @desc Used in the case of APMs where we need to redirect to an external provider. Will check if any details in the beforeRedirect callback need to be saved
       */
  
      xDom.onEvent('redirectToExternal', data => {
        callbacks.beforeRedirectHandler({
          sessionId: SESSION_ID
        });
      });
      /**
       * @event nake:acsiframe
       * @desc make ACS iframe after three ds InitAuth / AuthPayer
       */
  
      xDom.onEvent('make:acsiframe', () => {
        acsIframeTakeOver();
      });
      xDom.onEvent('safeToDeleteData', () => {
        windowState.removeSavedData();
      });
    }
  
    return {
      configure: config => {
        return new src((resolve, reject) => {
          if (!callbacks) {
            callbacks = new Callbacks(getTargetScript());
          }
  
          configureInProgress = true;
          const interaction = 'interaction';
          config[interaction] = config[interaction] || {};
  
          try {
            isConfigValidated(config);
          } catch (e) {
            reject(e);
          }
  
          createLoader().then(() => {
            if (callbacks.shouldResumeSession()) {
              config.session.id = windowState.getSessionId();
            } else if (!callbacks.shouldNotRemoveSavedData()) {
              windowState.removeSavedData();
            }
  
            const sessionId = config.session && config.session.id ? config.session.id : '';
  
            if (sessionId) {
              SESSION_ID = sessionId;
            } else {
              reject('Session ID not provided.');
            }
  
            if (hostedSessionBaseUrl) {
              HOSTED_SESSION_BASE_URL = hostedSessionBaseUrl;
              xDomEvents(config);
  
              if (callbacks.shouldResumeSession()) {
                skeletonContainer = windowState.getEmbedContainer();
                whenConfigureComplete().then(() => doShowEmbeddedPage());
  
                if (callbacks.callbackList.hasOwnProperty('afterRedirect')) {
                  callbacks.afterRedirectHandler();
                }
              }
  
              resolve();
            } else {
              HOSTED_SESSION_BASE_URL = '';
              setTimeout(() => hideLoader(), 1000);
              printMessage('Error: Missing hostedSessionBaseUrl', 'error');
              reject('Error: Missing hostedSessionBaseUrl');
            }
          });
        });
      },
      showEmbeddedPage: (embedContainer, showLightboxFunc) => {
        if (showLightboxFunc) {
          windowState.setShowLightboxFunc(showLightboxFunc);
        }
  
        return new src((resolve, reject) => {
          if (validateEmbedContainer(embedContainer)) {
            skeletonContainer = embedContainer;
            windowState.setEmbedContainer(skeletonContainer);
            whenConfigureComplete().then(() => {
              doShowEmbeddedPage();
              resolve();
            }).catch(e => {
              printMessage('Checkout is not configured. Cause:' + e.message, 'error');
              reject('Checkout is not configured. Cause:' + e.message);
            });
          } else {
            printMessage('Error: please provide a valid container for embedded. ie "#some-div"', 'error');
            reject('Error: please provide a valid container for embedded. ie "#some-div"');
          }
        });
      },
      showPaymentPage: () => {
        return new src((resolve, reject) => {
          whenConfigureComplete().then(() => {
            doShowPaymentPage();
            resolve();
          }).catch(e => {
            printMessage('Checkout is not configured. Cause:' + e.message, 'error');
            reject('Checkout is not configured. Cause:' + e.message);
          });
        });
      },
      saveFormFields: () => {
        console.log('saveFormFields');
      },
      restoreFormFields: () => {
        console.log('restoreFormFields');
      }
    };
  };
  
  window.Checkout = Checkout();
  })();
  
  var __webpack_export_target__ = window;
  for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
  if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
  /******/ })()
  ;